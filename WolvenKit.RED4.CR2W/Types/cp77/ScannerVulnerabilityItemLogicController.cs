using WolvenKit.RED4.CR2W.Reflection;
using FastMember;
using static WolvenKit.RED4.CR2W.Types.Enums;

namespace WolvenKit.RED4.CR2W.Types
{
	[REDMeta]
	public class ScannerVulnerabilityItemLogicController : inkWidgetLogicController
	{
		private inkTextWidgetReference _vulnerabilityNameText;
		private inkImageWidgetReference _vulnerabilityIcon;
		private Vulnerability _vulnerabilityStruct;

		[Ordinal(1)] 
		[RED("vulnerabilityNameText")] 
		public inkTextWidgetReference VulnerabilityNameText
		{
			get
			{
				if (_vulnerabilityNameText == null)
				{
					_vulnerabilityNameText = (inkTextWidgetReference) CR2WTypeManager.Create("inkTextWidgetReference", "vulnerabilityNameText", cr2w, this);
				}
				return _vulnerabilityNameText;
			}
			set
			{
				if (_vulnerabilityNameText == value)
				{
					return;
				}
				_vulnerabilityNameText = value;
				PropertySet(this);
			}
		}

		[Ordinal(2)] 
		[RED("vulnerabilityIcon")] 
		public inkImageWidgetReference VulnerabilityIcon
		{
			get
			{
				if (_vulnerabilityIcon == null)
				{
					_vulnerabilityIcon = (inkImageWidgetReference) CR2WTypeManager.Create("inkImageWidgetReference", "vulnerabilityIcon", cr2w, this);
				}
				return _vulnerabilityIcon;
			}
			set
			{
				if (_vulnerabilityIcon == value)
				{
					return;
				}
				_vulnerabilityIcon = value;
				PropertySet(this);
			}
		}

		[Ordinal(3)] 
		[RED("vulnerabilityStruct")] 
		public Vulnerability VulnerabilityStruct
		{
			get
			{
				if (_vulnerabilityStruct == null)
				{
					_vulnerabilityStruct = (Vulnerability) CR2WTypeManager.Create("Vulnerability", "vulnerabilityStruct", cr2w, this);
				}
				return _vulnerabilityStruct;
			}
			set
			{
				if (_vulnerabilityStruct == value)
				{
					return;
				}
				_vulnerabilityStruct = value;
				PropertySet(this);
			}
		}

		public ScannerVulnerabilityItemLogicController(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name) { }
	}
}
