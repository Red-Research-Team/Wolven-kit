using WolvenKit.RED4.CR2W.Types;
using WolvenKit.RED4.CR2W;
using System;
namespace WolvenKit.Modkit.RED4.Materials.Types
{
    public partial class _3d_map
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (Lighting != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Lighting") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Lighting") { IsSerialized = true, Value = (float)Lighting }; v.Variant = p;
            }
            if (ParticleSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ParticleSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ParticleSize") { IsSerialized = true, Value = (float)ParticleSize }; v.Variant = p;
            }
            if (WorldScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WorldScale") { IsSerialized = true, Value = (float)WorldScale }; v.Variant = p;
            }
            if (WorldColorTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldColorTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldColorTex") { IsSerialized = true, DepotPath = WorldColorTex }; v.Variant = p;
            }
            if (WorldPosTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldPosTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldPosTex") { IsSerialized = true, DepotPath = WorldPosTex }; v.Variant = p;
            }
            if (WorldNormalTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldNormalTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldNormalTex") { IsSerialized = true, DepotPath = WorldNormalTex }; v.Variant = p;
            }
            if (WorldDepthTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldDepthTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldDepthTex") { IsSerialized = true, DepotPath = WorldDepthTex }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
        }
    }
    public partial class _3d_map_cubes
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (PointCloudTextureHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PointCloudTextureHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "PointCloudTextureHeight") { IsSerialized = true, Value = (float)PointCloudTextureHeight }; v.Variant = p;
            }
            if (TransMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TransMin") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TransMin") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TransMin.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TransMin.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TransMin.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TransMin.W };
            }
            if (TransMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TransMax") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TransMax") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TransMax.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TransMax.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TransMax.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TransMax.W };
            }
            if (WorldPosTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldPosTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldPosTex") { IsSerialized = true, DepotPath = WorldPosTex }; v.Variant = p;
            }
            if (CubeSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CubeSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CubeSize") { IsSerialized = true, Value = (float)CubeSize }; v.Variant = p;
            }
            if (ColorGradient != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorGradient") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorGradient") { IsSerialized = true, Value = (float)ColorGradient }; v.Variant = p;
            }
            if (DebugScaleOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugScaleOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DebugScaleOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DebugScaleOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DebugScaleOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DebugScaleOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DebugScaleOffset.W };
            }
            if (DissolveDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DissolveDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DissolveDistance") { IsSerialized = true, Value = (float)DissolveDistance }; v.Variant = p;
            }
            if (DissolveBandWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DissolveBandWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DissolveBandWidth") { IsSerialized = true, Value = (float)DissolveBandWidth }; v.Variant = p;
            }
            if (DissolveCellSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DissolveCellSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DissolveCellSize") { IsSerialized = true, Value = (float)DissolveCellSize }; v.Variant = p;
            }
            if (DissolveBurnColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DissolveBurnColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DissolveBurnColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DissolveBurnColor.Red }, Green = new CUInt8() { Value = (Byte)DissolveBurnColor.Green }, Blue = new CUInt8() { Value = (Byte)DissolveBurnColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DissolveBurnColor.Alpha } }; v.Variant = p;
            }
            if (DissolveBurnStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DissolveBurnStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DissolveBurnStrength") { IsSerialized = true, Value = (float)DissolveBurnStrength }; v.Variant = p;
            }
            if (DissolveBurnMinCameraSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DissolveBurnMinCameraSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DissolveBurnMinCameraSpeed") { IsSerialized = true, Value = (float)DissolveBurnMinCameraSpeed }; v.Variant = p;
            }
            if (MapEdgeDissolveCenter != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MapEdgeDissolveCenter") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MapEdgeDissolveCenter") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MapEdgeDissolveCenter.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MapEdgeDissolveCenter.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MapEdgeDissolveCenter.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MapEdgeDissolveCenter.W };
            }
            if (MapEdgeDissolveRadiusStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MapEdgeDissolveRadiusStart") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MapEdgeDissolveRadiusStart") { IsSerialized = true, Value = (float)MapEdgeDissolveRadiusStart }; v.Variant = p;
            }
            if (MapEdgeDissolveRadiusBand != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MapEdgeDissolveRadiusBand") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MapEdgeDissolveRadiusBand") { IsSerialized = true, Value = (float)MapEdgeDissolveRadiusBand }; v.Variant = p;
            }
            if (MapEdgeDissolveCellSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MapEdgeDissolveCellSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MapEdgeDissolveCellSize") { IsSerialized = true, Value = (float)MapEdgeDissolveCellSize }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (EdgeColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EdgeColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EdgeColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EdgeColor.Red }, Green = new CUInt8() { Value = (Byte)EdgeColor.Green }, Blue = new CUInt8() { Value = (Byte)EdgeColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EdgeColor.Alpha } }; v.Variant = p;
            }
            if (EdgeThickness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EdgeThickness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EdgeThickness") { IsSerialized = true, Value = (float)EdgeThickness }; v.Variant = p;
            }
            if (EdgeSharpnessPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EdgeSharpnessPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EdgeSharpnessPower") { IsSerialized = true, Value = (float)EdgeSharpnessPower }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Translucency != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Translucency") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Translucency") { IsSerialized = true, Value = (float)Translucency }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _3d_map_solid
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (RenderOnTop != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RenderOnTop") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RenderOnTop") { IsSerialized = true, Value = (float)RenderOnTop }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _beyondblackwall
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (DiffuseMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseMap") { IsSerialized = true, DepotPath = DiffuseMap }; v.Variant = p;
            }
            if (HeightMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeightMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "HeightMap") { IsSerialized = true, DepotPath = HeightMap }; v.Variant = p;
            }
            if (Height != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Height") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Height") { IsSerialized = true, Value = (float)Height }; v.Variant = p;
            }
            if (Intensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Intensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Intensity") { IsSerialized = true, Value = (float)Intensity }; v.Variant = p;
            }
            if (AnimBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimBlend") { IsSerialized = true, Value = (float)AnimBlend }; v.Variant = p;
            }
            if (SmallDistortionStrenght != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SmallDistortionStrenght") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SmallDistortionStrenght") { IsSerialized = true, Value = (float)SmallDistortionStrenght }; v.Variant = p;
            }
            if (BigDistortionStrenght != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BigDistortionStrenght") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BigDistortionStrenght") { IsSerialized = true, Value = (float)BigDistortionStrenght }; v.Variant = p;
            }
            if (SmallDistortionTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SmallDistortionTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SmallDistortionTime") { IsSerialized = true, Value = (float)SmallDistortionTime }; v.Variant = p;
            }
            if (BigDistortionTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BigDistortionTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BigDistortionTime") { IsSerialized = true, Value = (float)BigDistortionTime }; v.Variant = p;
            }
            if (VignetteIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VignetteIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VignetteIntensity") { IsSerialized = true, Value = (float)VignetteIntensity }; v.Variant = p;
            }
            if (LuminancePower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LuminancePower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LuminancePower") { IsSerialized = true, Value = (float)LuminancePower }; v.Variant = p;
            }
            if (CompareValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CompareValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CompareValue") { IsSerialized = true, Value = (float)CompareValue }; v.Variant = p;
            }
            if (PixelStretchBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PixelStretchBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "PixelStretchBlend") { IsSerialized = true, Value = (float)PixelStretchBlend }; v.Variant = p;
            }
        }
    }
    public partial class _beyondblackwall_chars
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (TextureColorBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureColorBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TextureColorBlend") { IsSerialized = true, Value = (float)TextureColorBlend }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Metalness") { IsSerialized = true, Value = (float)Metalness }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (AtlasSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AtlasSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AtlasSize") { IsSerialized = true, Value = (float)AtlasSize }; v.Variant = p;
            }
            if (AtlasID != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AtlasID") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AtlasID") { IsSerialized = true, Value = (float)AtlasID }; v.Variant = p;
            }
            if (SmallDistortionStrenght != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SmallDistortionStrenght") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SmallDistortionStrenght") { IsSerialized = true, Value = (float)SmallDistortionStrenght }; v.Variant = p;
            }
            if (BigDistortionStrenght != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BigDistortionStrenght") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BigDistortionStrenght") { IsSerialized = true, Value = (float)BigDistortionStrenght }; v.Variant = p;
            }
            if (SmallDistortionTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SmallDistortionTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SmallDistortionTime") { IsSerialized = true, Value = (float)SmallDistortionTime }; v.Variant = p;
            }
            if (BigDistortionTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BigDistortionTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BigDistortionTime") { IsSerialized = true, Value = (float)BigDistortionTime }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _beyondblackwall_sky
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (SkyDiffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SkyDiffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SkyDiffuse") { IsSerialized = true, DepotPath = SkyDiffuse }; v.Variant = p;
            }
            if (SkySorted != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SkySorted") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SkySorted") { IsSerialized = true, DepotPath = SkySorted }; v.Variant = p;
            }
            if (SkySortMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SkySortMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SkySortMask") { IsSerialized = true, DepotPath = SkySortMask }; v.Variant = p;
            }
            if (NoiseMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NoiseMap") { IsSerialized = true, DepotPath = NoiseMap }; v.Variant = p;
            }
            if (SilhouetteDiffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SilhouetteDiffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SilhouetteDiffuse") { IsSerialized = true, DepotPath = SilhouetteDiffuse }; v.Variant = p;
            }
            if (SilhouetteMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SilhouetteMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SilhouetteMask") { IsSerialized = true, DepotPath = SilhouetteMask }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (LightDirectionHorizontal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightDirectionHorizontal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightDirectionHorizontal") { IsSerialized = true, Value = (float)LightDirectionHorizontal }; v.Variant = p;
            }
            if (LightDirectionVertical != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightDirectionVertical") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightDirectionVertical") { IsSerialized = true, Value = (float)LightDirectionVertical }; v.Variant = p;
            }
            if (Wrap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Wrap") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Wrap") { IsSerialized = true, Value = (float)Wrap }; v.Variant = p;
            }
            if (WrapIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WrapIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WrapIntensity") { IsSerialized = true, Value = (float)WrapIntensity }; v.Variant = p;
            }
            if (FlashIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlashIntensity") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "FlashIntensity") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)FlashIntensity.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)FlashIntensity.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)FlashIntensity.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)FlashIntensity.W };
            }
            if (FlashTimeScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlashTimeScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "FlashTimeScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)FlashTimeScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)FlashTimeScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)FlashTimeScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)FlashTimeScale.W };
            }
            if (LightColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "LightColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)LightColor.Red }, Green = new CUInt8() { Value = (Byte)LightColor.Green }, Blue = new CUInt8() { Value = (Byte)LightColor.Blue }, Alpha = new CUInt8() { Value = (Byte)LightColor.Alpha } }; v.Variant = p;
            }
            if (SkyAmbient != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SkyAmbient") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SkyAmbient") { IsSerialized = true, Value = (float)SkyAmbient }; v.Variant = p;
            }
            if (SkyParameter != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SkyParameter") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "SkyParameter") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)SkyParameter.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)SkyParameter.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)SkyParameter.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)SkyParameter.W };
            }
            if (SilhouetteUV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SilhouetteUV") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "SilhouetteUV") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)SilhouetteUV.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)SilhouetteUV.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)SilhouetteUV.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)SilhouetteUV.W };
            }
            if (CompareValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CompareValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CompareValue") { IsSerialized = true, Value = (float)CompareValue }; v.Variant = p;
            }
        }
    }
    public partial class _beyondblackwall_sky_raymarch
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (NoiseTexture3D != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseTexture3D") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NoiseTexture3D") { IsSerialized = true, DepotPath = NoiseTexture3D }; v.Variant = p;
            }
            if (VolumeNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VolumeNoise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VolumeNoise") { IsSerialized = true, DepotPath = VolumeNoise }; v.Variant = p;
            }
            if (ScreenNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScreenNoise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ScreenNoise") { IsSerialized = true, DepotPath = ScreenNoise }; v.Variant = p;
            }
            if (LightColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "LightColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)LightColor.Red }, Green = new CUInt8() { Value = (Byte)LightColor.Green }, Blue = new CUInt8() { Value = (Byte)LightColor.Blue }, Alpha = new CUInt8() { Value = (Byte)LightColor.Alpha } }; v.Variant = p;
            }
            if (LightIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightIntensity") { IsSerialized = true, Value = (float)LightIntensity }; v.Variant = p;
            }
            if (LightVectorXY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightVectorXY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightVectorXY") { IsSerialized = true, Value = (float)LightVectorXY }; v.Variant = p;
            }
            if (LightVectorZ != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightVectorZ") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightVectorZ") { IsSerialized = true, Value = (float)LightVectorZ }; v.Variant = p;
            }
            if (SkyColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SkyColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "SkyColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)SkyColor.Red }, Green = new CUInt8() { Value = (Byte)SkyColor.Green }, Blue = new CUInt8() { Value = (Byte)SkyColor.Blue }, Alpha = new CUInt8() { Value = (Byte)SkyColor.Alpha } }; v.Variant = p;
            }
            if (VectorNoiseSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorNoiseSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VectorNoiseSize") { IsSerialized = true, Value = (float)VectorNoiseSize }; v.Variant = p;
            }
            if (VectorNoiseIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorNoiseIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VectorNoiseIntensity") { IsSerialized = true, Value = (float)VectorNoiseIntensity }; v.Variant = p;
            }
            if (AmbientLightTop != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AmbientLightTop") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "AmbientLightTop") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)AmbientLightTop.Red }, Green = new CUInt8() { Value = (Byte)AmbientLightTop.Green }, Blue = new CUInt8() { Value = (Byte)AmbientLightTop.Blue }, Alpha = new CUInt8() { Value = (Byte)AmbientLightTop.Alpha } }; v.Variant = p;
            }
            if (AmbientLightBottom != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AmbientLightBottom") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "AmbientLightBottom") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)AmbientLightBottom.Red }, Green = new CUInt8() { Value = (Byte)AmbientLightBottom.Green }, Blue = new CUInt8() { Value = (Byte)AmbientLightBottom.Blue }, Alpha = new CUInt8() { Value = (Byte)AmbientLightBottom.Alpha } }; v.Variant = p;
            }
            if (CoverageShift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoverageShift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CoverageShift") { IsSerialized = true, Value = (float)CoverageShift }; v.Variant = p;
            }
            if (JitterIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "JitterIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "JitterIntensity") { IsSerialized = true, Value = (float)JitterIntensity }; v.Variant = p;
            }
            if (EmisssivIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmisssivIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmisssivIntensity") { IsSerialized = true, Value = (float)EmisssivIntensity }; v.Variant = p;
            }
            if (CloudScaleXY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CloudScaleXY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CloudScaleXY") { IsSerialized = true, Value = (float)CloudScaleXY }; v.Variant = p;
            }
            if (CloudScaleZ != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CloudScaleZ") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CloudScaleZ") { IsSerialized = true, Value = (float)CloudScaleZ }; v.Variant = p;
            }
            if (CloudPositionZ != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CloudPositionZ") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CloudPositionZ") { IsSerialized = true, Value = (float)CloudPositionZ }; v.Variant = p;
            }
            if (NoiseOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NoiseOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NoiseOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NoiseOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NoiseOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NoiseOffset.W };
            }
            if (FlashAreaOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlashAreaOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "FlashAreaOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)FlashAreaOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)FlashAreaOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)FlashAreaOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)FlashAreaOffset.W };
            }
            if (SphereOffsetZ != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SphereOffsetZ") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SphereOffsetZ") { IsSerialized = true, Value = (float)SphereOffsetZ }; v.Variant = p;
            }
            if (SphereSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SphereSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SphereSize") { IsSerialized = true, Value = (float)SphereSize }; v.Variant = p;
            }
            if (SphereOffsetVec != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SphereOffsetVec") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "SphereOffsetVec") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)SphereOffsetVec.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)SphereOffsetVec.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)SphereOffsetVec.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)SphereOffsetVec.W };
            }
            if (NoiseSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseSize") { IsSerialized = true, Value = (float)NoiseSize }; v.Variant = p;
            }
            if (CloudDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CloudDensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CloudDensity") { IsSerialized = true, Value = (float)CloudDensity }; v.Variant = p;
            }
            if (DetailNoiseSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailNoiseSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DetailNoiseSize") { IsSerialized = true, Value = (float)DetailNoiseSize }; v.Variant = p;
            }
            if (DetailNoiseOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailNoiseOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DetailNoiseOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DetailNoiseOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DetailNoiseOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DetailNoiseOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DetailNoiseOffset.W };
            }
            if (ScreenNoiseVec != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScreenNoiseVec") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "ScreenNoiseVec") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)ScreenNoiseVec.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)ScreenNoiseVec.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)ScreenNoiseVec.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)ScreenNoiseVec.W };
            }
            if (Samples != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Samples") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Samples") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Samples.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Samples.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Samples.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Samples.W };
            }
            if (SkyBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SkyBlend") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "SkyBlend") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)SkyBlend.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)SkyBlend.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)SkyBlend.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)SkyBlend.W };
            }
            if (Scatter != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Scatter") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Scatter") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Scatter.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Scatter.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Scatter.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Scatter.W };
            }
            if (SilverLightCone != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SilverLightCone") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "SilverLightCone") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)SilverLightCone.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)SilverLightCone.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)SilverLightCone.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)SilverLightCone.W };
            }
        }
    }
    public partial class _blood_puddle_decal
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (NoiseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NoiseTexture") { IsSerialized = true, DepotPath = NoiseTexture }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (Squash != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Squash") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Squash") { IsSerialized = true, Value = (float)Squash }; v.Variant = p;
            }
            if (Curls != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Curls") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Curls") { IsSerialized = true, Value = (float)Curls }; v.Variant = p;
            }
            if (Details != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Details") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Details") { IsSerialized = true, Value = (float)Details }; v.Variant = p;
            }
            if (Thickness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Thickness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Thickness") { IsSerialized = true, Value = (float)Thickness }; v.Variant = p;
            }
            if (ProgressiveOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ProgressiveOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ProgressiveOpacity") { IsSerialized = true, Value = (float)ProgressiveOpacity }; v.Variant = p;
            }
        }
    }
    public partial class _cable
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VehicleDamageInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VehicleDamageInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VehicleDamageInfluence") { IsSerialized = true, Value = (float)VehicleDamageInfluence }; v.Variant = p;
            }
            if (ThicknessStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ThicknessStart") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ThicknessStart") { IsSerialized = true, Value = (float)ThicknessStart }; v.Variant = p;
            }
            if (ThicknessEnd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ThicknessEnd") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ThicknessEnd") { IsSerialized = true, Value = (float)ThicknessEnd }; v.Variant = p;
            }
            if (RangeStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RangeStart") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RangeStart") { IsSerialized = true, Value = (float)RangeStart }; v.Variant = p;
            }
            if (RangeEnd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RangeEnd") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RangeEnd") { IsSerialized = true, Value = (float)RangeEnd }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveLift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveLift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveLift") { IsSerialized = true, Value = (float)EmissiveLift }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
        }
    }
    public partial class _circuit_wires
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (PointCloudTextureRes != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PointCloudTextureRes") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "PointCloudTextureRes") { IsSerialized = true, Value = (float)PointCloudTextureRes }; v.Variant = p;
            }
            if (TransMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TransMin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TransMin") { IsSerialized = true, Value = (float)TransMin }; v.Variant = p;
            }
            if (TransMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TransMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TransMax") { IsSerialized = true, Value = (float)TransMax }; v.Variant = p;
            }
            if (WorldPosTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldPosTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldPosTex") { IsSerialized = true, DepotPath = WorldPosTex }; v.Variant = p;
            }
            if (WireThickness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WireThickness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WireThickness") { IsSerialized = true, Value = (float)WireThickness }; v.Variant = p;
            }
            if (InstanceOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InstanceOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "InstanceOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)InstanceOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)InstanceOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)InstanceOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)InstanceOffset.W };
            }
            if (LocalNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LocalNormal") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "LocalNormal") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)LocalNormal.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)LocalNormal.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)LocalNormal.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)LocalNormal.W };
            }
            if (BevelStrenght != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BevelStrenght") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BevelStrenght") { IsSerialized = true, Value = (float)BevelStrenght }; v.Variant = p;
            }
            if (DebugVC != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugVC") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DebugVC") { IsSerialized = true, Value = (float)DebugVC }; v.Variant = p;
            }
            if (DebugID != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugID") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DebugID") { IsSerialized = true, Value = (float)DebugID }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColor.Red }, Green = new CUInt8() { Value = (Byte)BaseColor.Green }, Blue = new CUInt8() { Value = (Byte)BaseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColor.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Metalness") { IsSerialized = true, Value = (float)Metalness }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Translucency != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Translucency") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Translucency") { IsSerialized = true, Value = (float)Translucency }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _cloth_mov
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (vertex_paint_tex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "vertex_paint_tex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "vertex_paint_tex") { IsSerialized = true, DepotPath = vertex_paint_tex }; v.Variant = p;
            }
            if (trans_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_min") { IsSerialized = true, Value = (float)trans_min }; v.Variant = p;
            }
            if (trans_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_max") { IsSerialized = true, Value = (float)trans_max }; v.Variant = p;
            }
            if (n_frames != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_frames") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_frames") { IsSerialized = true, Value = (float)n_frames }; v.Variant = p;
            }
            if (n_pieces != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_pieces") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_pieces") { IsSerialized = true, Value = (float)n_pieces }; v.Variant = p;
            }
            if (play_time != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "play_time") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "play_time") { IsSerialized = true, Value = (float)play_time }; v.Variant = p;
            }
            if (frame_rate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "frame_rate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "frame_rate") { IsSerialized = true, Value = (float)frame_rate }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
        }
    }
    public partial class _cloth_mov_multilayered
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (vertex_paint_tex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "vertex_paint_tex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "vertex_paint_tex") { IsSerialized = true, DepotPath = vertex_paint_tex }; v.Variant = p;
            }
            if (trans_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_min") { IsSerialized = true, Value = (float)trans_min }; v.Variant = p;
            }
            if (trans_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_max") { IsSerialized = true, Value = (float)trans_max }; v.Variant = p;
            }
            if (n_frames != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_frames") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_frames") { IsSerialized = true, Value = (float)n_frames }; v.Variant = p;
            }
            if (n_pieces != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_pieces") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_pieces") { IsSerialized = true, Value = (float)n_pieces }; v.Variant = p;
            }
            if (play_time != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "play_time") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "play_time") { IsSerialized = true, Value = (float)play_time }; v.Variant = p;
            }
            if (frame_rate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "frame_rate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "frame_rate") { IsSerialized = true, Value = (float)frame_rate }; v.Variant = p;
            }
            if (GlobalNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlobalNormal") { IsSerialized = true, DepotPath = GlobalNormal }; v.Variant = p;
            }
            if (MultilayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Mask>(cr2w, v, "MultilayerMask") { IsSerialized = true, DepotPath = MultilayerMask }; v.Variant = p;
            }
            if (MultilayerSetup != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerSetup") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Setup>(cr2w, v, "MultilayerSetup") { IsSerialized = true, DepotPath = MultilayerSetup }; v.Variant = p;
            }
            if (MaskAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskAtlas") { IsSerialized = true, DepotPath = MaskAtlas }; v.Variant = p;
            }
            if (LayersStartIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersStartIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersStartIndex") { IsSerialized = true, Value = (float)LayersStartIndex }; v.Variant = p;
            }
            if (SurfaceTexAspectRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceTexAspectRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceTexAspectRatio") { IsSerialized = true, Value = (float)SurfaceTexAspectRatio }; v.Variant = p;
            }
            if (MaskToTileScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskToTileScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskToTileScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskToTileScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskToTileScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskToTileScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskToTileScale.W };
            }
            if (MaskTileSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTileSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskTileSize") { IsSerialized = true, Value = (float)MaskTileSize }; v.Variant = p;
            }
            if (MaskAtlasDims != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlasDims") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskAtlasDims") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskAtlasDims.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskAtlasDims.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskAtlasDims.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskAtlasDims.W };
            }
            if (MaskBaseResolution != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskBaseResolution") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskBaseResolution") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskBaseResolution.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskBaseResolution.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskBaseResolution.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskBaseResolution.W };
            }
            if (SetupLayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SetupLayerMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SetupLayerMask") { IsSerialized = true, Value = (float)SetupLayerMask }; v.Variant = p;
            }
        }
    }
    public partial class _cyberparticles_base
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (trans_extent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_extent") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "trans_extent") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)trans_extent.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)trans_extent.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)trans_extent.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)trans_extent.W };
            }
            if (Contrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Contrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Contrast") { IsSerialized = true, Value = (float)Contrast }; v.Variant = p;
            }
            if (AddSizeX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AddSizeX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AddSizeX") { IsSerialized = true, Value = (float)AddSizeX }; v.Variant = p;
            }
            if (AddSizeY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AddSizeY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AddSizeY") { IsSerialized = true, Value = (float)AddSizeY }; v.Variant = p;
            }
            if (Width != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Width") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Width") { IsSerialized = true, Value = (float)Width }; v.Variant = p;
            }
            if (Height != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Height") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Height") { IsSerialized = true, Value = (float)Height }; v.Variant = p;
            }
            if (WorldColorTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldColorTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldColorTex") { IsSerialized = true, DepotPath = WorldColorTex }; v.Variant = p;
            }
            if (WorldPosTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldPosTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldPosTex") { IsSerialized = true, DepotPath = WorldPosTex }; v.Variant = p;
            }
            if (WorldSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WorldSize") { IsSerialized = true, Value = (float)WorldSize }; v.Variant = p;
            }
            if (ParticleSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ParticleSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ParticleSize") { IsSerialized = true, Value = (float)ParticleSize }; v.Variant = p;
            }
            if (DissolveTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DissolveTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DissolveTime") { IsSerialized = true, Value = (float)DissolveTime }; v.Variant = p;
            }
            if (DissolveGlobalTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DissolveGlobalTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DissolveGlobalTime") { IsSerialized = true, Value = (float)DissolveGlobalTime }; v.Variant = p;
            }
            if (DissolveDeltaScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DissolveDeltaScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DissolveDeltaScale") { IsSerialized = true, Value = (float)DissolveDeltaScale }; v.Variant = p;
            }
            if (DissolveNoiseScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DissolveNoiseScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DissolveNoiseScale") { IsSerialized = true, Value = (float)DissolveNoiseScale }; v.Variant = p;
            }
            if (DissolveParticleSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DissolveParticleSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DissolveParticleSize") { IsSerialized = true, Value = (float)DissolveParticleSize }; v.Variant = p;
            }
            if (WarpTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WarpTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WarpTime") { IsSerialized = true, Value = (float)WarpTime }; v.Variant = p;
            }
            if (WarpLocation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WarpLocation") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "WarpLocation") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)WarpLocation.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)WarpLocation.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)WarpLocation.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)WarpLocation.W };
            }
            if (StretchMul != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "StretchMul") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "StretchMul") { IsSerialized = true, Value = (float)StretchMul }; v.Variant = p;
            }
            if (StretchMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "StretchMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "StretchMax") { IsSerialized = true, Value = (float)StretchMax }; v.Variant = p;
            }
            if (UnRevealTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UnRevealTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UnRevealTime") { IsSerialized = true, Value = (float)UnRevealTime }; v.Variant = p;
            }
            if (Displace01 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Displace01") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Displace01") { IsSerialized = true, Value = (float)Displace01 }; v.Variant = p;
            }
            if (Displace02 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Displace02") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Displace02") { IsSerialized = true, Value = (float)Displace02 }; v.Variant = p;
            }
            if (GlobalNoiseScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalNoiseScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlobalNoiseScale") { IsSerialized = true, Value = (float)GlobalNoiseScale }; v.Variant = p;
            }
            if (VectorField != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField") { IsSerialized = true, DepotPath = VectorField }; v.Variant = p;
            }
            if (VectorFieldSliceCount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldSliceCount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VectorFieldSliceCount") { IsSerialized = true, Value = (float)VectorFieldSliceCount }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (Tint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tint") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Tint") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Tint.Red }, Green = new CUInt8() { Value = (Byte)Tint.Green }, Blue = new CUInt8() { Value = (Byte)Tint.Blue }, Alpha = new CUInt8() { Value = (Byte)Tint.Alpha } }; v.Variant = p;
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
        }
    }
    public partial class _cyberparticles_blackwall
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VideoRT != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VideoRT") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VideoRT") { IsSerialized = true, DepotPath = VideoRT }; v.Variant = p;
            }
            if (GradientTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GradientTex") { IsSerialized = true, DepotPath = GradientTex }; v.Variant = p;
            }
            if (DisturbTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisturbTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DisturbTex") { IsSerialized = true, DepotPath = DisturbTex }; v.Variant = p;
            }
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (UsesInstancing != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UsesInstancing") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UsesInstancing") { IsSerialized = true, Value = (float)UsesInstancing }; v.Variant = p;
            }
            if (DisturbRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisturbRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisturbRadius") { IsSerialized = true, Value = (float)DisturbRadius }; v.Variant = p;
            }
            if (DisturbCurveFrequency != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisturbCurveFrequency") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisturbCurveFrequency") { IsSerialized = true, Value = (float)DisturbCurveFrequency }; v.Variant = p;
            }
            if (DisturbMul != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisturbMul") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisturbMul") { IsSerialized = true, Value = (float)DisturbMul }; v.Variant = p;
            }
            if (DisturbTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisturbTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisturbTime") { IsSerialized = true, Value = (float)DisturbTime }; v.Variant = p;
            }
            if (DisturbNoiseScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisturbNoiseScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisturbNoiseScale") { IsSerialized = true, Value = (float)DisturbNoiseScale }; v.Variant = p;
            }
            if (DisturbScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisturbScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisturbScale") { IsSerialized = true, Value = (float)DisturbScale }; v.Variant = p;
            }
            if (DisturbBrighten != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisturbBrighten") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisturbBrighten") { IsSerialized = true, Value = (float)DisturbBrighten }; v.Variant = p;
            }
            if (DisturbLocation1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisturbLocation1") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DisturbLocation1") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DisturbLocation1.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DisturbLocation1.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DisturbLocation1.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DisturbLocation1.W };
            }
            if (DisturbLocation2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisturbLocation2") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DisturbLocation2") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DisturbLocation2.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DisturbLocation2.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DisturbLocation2.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DisturbLocation2.W };
            }
            if (TimeFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TimeFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TimeFactor") { IsSerialized = true, Value = (float)TimeFactor }; v.Variant = p;
            }
            if (Scale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Scale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Scale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Scale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Scale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Scale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Scale.W };
            }
            if (Dimensions != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Dimensions") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Dimensions") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Dimensions.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Dimensions.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Dimensions.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Dimensions.W };
            }
            if (TexTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexTiling") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexTiling") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexTiling.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexTiling.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexTiling.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexTiling.W };
            }
            if (Contrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Contrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Contrast") { IsSerialized = true, Value = (float)Contrast }; v.Variant = p;
            }
            if (AddSizeX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AddSizeX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AddSizeX") { IsSerialized = true, Value = (float)AddSizeX }; v.Variant = p;
            }
            if (AddSizeY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AddSizeY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AddSizeY") { IsSerialized = true, Value = (float)AddSizeY }; v.Variant = p;
            }
            if (ParticleSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ParticleSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ParticleSize") { IsSerialized = true, Value = (float)ParticleSize }; v.Variant = p;
            }
            if (WarpTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WarpTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WarpTime") { IsSerialized = true, Value = (float)WarpTime }; v.Variant = p;
            }
            if (WarpLocation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WarpLocation") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "WarpLocation") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)WarpLocation.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)WarpLocation.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)WarpLocation.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)WarpLocation.W };
            }
            if (StretchMul != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "StretchMul") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "StretchMul") { IsSerialized = true, Value = (float)StretchMul }; v.Variant = p;
            }
            if (StretchMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "StretchMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "StretchMax") { IsSerialized = true, Value = (float)StretchMax }; v.Variant = p;
            }
            if (CNoiseAdjust != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CNoiseAdjust") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CNoiseAdjust") { IsSerialized = true, Value = (float)CNoiseAdjust }; v.Variant = p;
            }
            if (Align != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Align") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Align") { IsSerialized = true, Value = (float)Align }; v.Variant = p;
            }
            if (HighFreqFade != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HighFreqFade") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "HighFreqFade") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)HighFreqFade.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)HighFreqFade.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)HighFreqFade.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)HighFreqFade.W };
            }
            if (VectorField != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField") { IsSerialized = true, DepotPath = VectorField }; v.Variant = p;
            }
            if (VectorFieldSliceCount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldSliceCount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VectorFieldSliceCount") { IsSerialized = true, Value = (float)VectorFieldSliceCount }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Tint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tint") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Tint") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Tint.Red }, Green = new CUInt8() { Value = (Byte)Tint.Green }, Blue = new CUInt8() { Value = (Byte)Tint.Blue }, Alpha = new CUInt8() { Value = (Byte)Tint.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _cyberparticles_blackwall_touch
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (RippleSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RippleSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RippleSize") { IsSerialized = true, Value = (float)RippleSize }; v.Variant = p;
            }
            if (RippleSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RippleSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RippleSpeed") { IsSerialized = true, Value = (float)RippleSpeed }; v.Variant = p;
            }
            if (RippleNumber != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RippleNumber") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RippleNumber") { IsSerialized = true, Value = (float)RippleNumber }; v.Variant = p;
            }
            if (RippleHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RippleHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RippleHeight") { IsSerialized = true, Value = (float)RippleHeight }; v.Variant = p;
            }
            if (RipplePosition != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RipplePosition") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RipplePosition") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RipplePosition.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RipplePosition.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RipplePosition.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RipplePosition.W };
            }
            if (RippleDirection != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RippleDirection") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RippleDirection") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RippleDirection.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RippleDirection.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RippleDirection.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RippleDirection.W };
            }
            if (TimeFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TimeFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TimeFactor") { IsSerialized = true, Value = (float)TimeFactor }; v.Variant = p;
            }
            if (Scale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Scale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Scale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Scale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Scale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Scale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Scale.W };
            }
            if (Dimensions != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Dimensions") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Dimensions") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Dimensions.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Dimensions.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Dimensions.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Dimensions.W };
            }
            if (TexTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexTiling") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexTiling") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexTiling.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexTiling.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexTiling.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexTiling.W };
            }
            if (Contrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Contrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Contrast") { IsSerialized = true, Value = (float)Contrast }; v.Variant = p;
            }
            if (AddSizeX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AddSizeX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AddSizeX") { IsSerialized = true, Value = (float)AddSizeX }; v.Variant = p;
            }
            if (AddSizeY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AddSizeY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AddSizeY") { IsSerialized = true, Value = (float)AddSizeY }; v.Variant = p;
            }
            if (ParticleSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ParticleSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ParticleSize") { IsSerialized = true, Value = (float)ParticleSize }; v.Variant = p;
            }
            if (WarpTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WarpTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WarpTime") { IsSerialized = true, Value = (float)WarpTime }; v.Variant = p;
            }
            if (WarpLocation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WarpLocation") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "WarpLocation") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)WarpLocation.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)WarpLocation.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)WarpLocation.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)WarpLocation.W };
            }
            if (StretchMul != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "StretchMul") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "StretchMul") { IsSerialized = true, Value = (float)StretchMul }; v.Variant = p;
            }
            if (StretchMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "StretchMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "StretchMax") { IsSerialized = true, Value = (float)StretchMax }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Tint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tint") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Tint") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Tint.Red }, Green = new CUInt8() { Value = (Byte)Tint.Green }, Blue = new CUInt8() { Value = (Byte)Tint.Blue }, Alpha = new CUInt8() { Value = (Byte)Tint.Alpha } }; v.Variant = p;
            }
            if (TintPulse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintPulse") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintPulse") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintPulse.Red }, Green = new CUInt8() { Value = (Byte)TintPulse.Green }, Blue = new CUInt8() { Value = (Byte)TintPulse.Blue }, Alpha = new CUInt8() { Value = (Byte)TintPulse.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _cyberparticles_braindance
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DebugAlwaysShow != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugAlwaysShow") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DebugAlwaysShow") { IsSerialized = true, Value = (float)DebugAlwaysShow }; v.Variant = p;
            }
            if (DebugDisplayUV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugDisplayUV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DebugDisplayUV") { IsSerialized = true, Value = (float)DebugDisplayUV }; v.Variant = p;
            }
            if (NumQuadsX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NumQuadsX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NumQuadsX") { IsSerialized = true, Value = (float)NumQuadsX }; v.Variant = p;
            }
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (ParticleSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ParticleSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ParticleSize") { IsSerialized = true, Value = (float)ParticleSize }; v.Variant = p;
            }
            if (WorldPosTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldPosTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldPosTex") { IsSerialized = true, DepotPath = WorldPosTex }; v.Variant = p;
            }
            if (RevealMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RevealMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RevealMask") { IsSerialized = true, DepotPath = RevealMask }; v.Variant = p;
            }
            if (RevealMaskFramesY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RevealMaskFramesY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RevealMaskFramesY") { IsSerialized = true, Value = (float)RevealMaskFramesY }; v.Variant = p;
            }
            if (RevealMaskBoundsMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RevealMaskBoundsMin") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RevealMaskBoundsMin") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RevealMaskBoundsMin.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RevealMaskBoundsMin.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RevealMaskBoundsMin.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RevealMaskBoundsMin.W };
            }
            if (RevealMaskBoundsMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RevealMaskBoundsMax") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RevealMaskBoundsMax") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RevealMaskBoundsMax.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RevealMaskBoundsMax.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RevealMaskBoundsMax.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RevealMaskBoundsMax.W };
            }
            if (FlowMap0 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlowMap0") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FlowMap0") { IsSerialized = true, DepotPath = FlowMap0 }; v.Variant = p;
            }
            if (CluesMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CluesMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "CluesMap") { IsSerialized = true, DepotPath = CluesMap }; v.Variant = p;
            }
            if (CharacterBlobRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CharacterBlobRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CharacterBlobRadius") { IsSerialized = true, Value = (float)CharacterBlobRadius }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (MaskParticle != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskParticle") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskParticle") { IsSerialized = true, DepotPath = MaskParticle }; v.Variant = p;
            }
        }
    }
    public partial class _cyberparticles_dynamic
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (ParticleSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ParticleSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ParticleSize") { IsSerialized = true, Value = (float)ParticleSize }; v.Variant = p;
            }
            if (JitterStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "JitterStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "JitterStrength") { IsSerialized = true, Value = (float)JitterStrength }; v.Variant = p;
            }
            if (WorldPosTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldPosTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldPosTex") { IsSerialized = true, DepotPath = WorldPosTex }; v.Variant = p;
            }
            if (NormalTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTex") { IsSerialized = true, DepotPath = NormalTex }; v.Variant = p;
            }
            if (NumQuadsX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NumQuadsX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NumQuadsX") { IsSerialized = true, Value = (float)NumQuadsX }; v.Variant = p;
            }
            if (VectorField != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField") { IsSerialized = true, DepotPath = VectorField }; v.Variant = p;
            }
            if (VectorFieldSliceCount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldSliceCount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VectorFieldSliceCount") { IsSerialized = true, Value = (float)VectorFieldSliceCount }; v.Variant = p;
            }
            if (VectorFieldTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldTiling") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "VectorFieldTiling") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)VectorFieldTiling.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)VectorFieldTiling.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)VectorFieldTiling.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)VectorFieldTiling.W };
            }
            if (VectorFieldAnimSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldAnimSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "VectorFieldAnimSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)VectorFieldAnimSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)VectorFieldAnimSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)VectorFieldAnimSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)VectorFieldAnimSpeed.W };
            }
            if (VectorFieldDisplacementStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldDisplacementStrength") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "VectorFieldDisplacementStrength") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)VectorFieldDisplacementStrength.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)VectorFieldDisplacementStrength.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)VectorFieldDisplacementStrength.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)VectorFieldDisplacementStrength.W };
            }
            if (Scale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Scale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Scale") { IsSerialized = true, Value = (float)Scale }; v.Variant = p;
            }
            if (UsePivotAsOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UsePivotAsOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UsePivotAsOffset") { IsSerialized = true, Value = (float)UsePivotAsOffset }; v.Variant = p;
            }
            if (OriginalPivotWorldPosition != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OriginalPivotWorldPosition") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "OriginalPivotWorldPosition") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)OriginalPivotWorldPosition.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)OriginalPivotWorldPosition.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)OriginalPivotWorldPosition.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)OriginalPivotWorldPosition.W };
            }
            if (ColorMain != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMain") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorMain") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorMain.Red }, Green = new CUInt8() { Value = (Byte)ColorMain.Green }, Blue = new CUInt8() { Value = (Byte)ColorMain.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorMain.Alpha } }; v.Variant = p;
            }
            if (Brightness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Brightness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Brightness") { IsSerialized = true, Value = (float)Brightness }; v.Variant = p;
            }
            if (BrightnessTop != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BrightnessTop") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BrightnessTop") { IsSerialized = true, Value = (float)BrightnessTop }; v.Variant = p;
            }
            if (HACK_Q110_IsElder != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HACK_Q110_IsElder") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HACK_Q110_IsElder") { IsSerialized = true, Value = (float)HACK_Q110_IsElder }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
        }
    }
    public partial class _cyberparticles_platform
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BlueNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlueNoise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BlueNoise") { IsSerialized = true, DepotPath = BlueNoise }; v.Variant = p;
            }
            if (DataTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DataTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DataTex") { IsSerialized = true, DepotPath = DataTex }; v.Variant = p;
            }
            if (BlackTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlackTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BlackTex") { IsSerialized = true, DepotPath = BlackTex }; v.Variant = p;
            }
            if (UnRevealTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UnRevealTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UnRevealTime") { IsSerialized = true, Value = (float)UnRevealTime }; v.Variant = p;
            }
            if (RevealDirection != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RevealDirection") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RevealDirection") { IsSerialized = true, Value = (float)RevealDirection }; v.Variant = p;
            }
            if (ColorMul != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMul") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMul") { IsSerialized = true, Value = (float)ColorMul }; v.Variant = p;
            }
            if (MovementScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MovementScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MovementScale") { IsSerialized = true, Value = (float)MovementScale }; v.Variant = p;
            }
            if (DistanceFade != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistanceFade") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistanceFade") { IsSerialized = true, Value = (float)DistanceFade }; v.Variant = p;
            }
            if (FloorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FloorScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FloorScale") { IsSerialized = true, Value = (float)FloorScale }; v.Variant = p;
            }
            if (BlockSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlockSize") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BlockSize") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BlockSize.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BlockSize.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BlockSize.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BlockSize.W };
            }
            if (CityTilingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CityTilingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CityTilingX") { IsSerialized = true, Value = (float)CityTilingX }; v.Variant = p;
            }
            if (CityTilingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CityTilingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CityTilingY") { IsSerialized = true, Value = (float)CityTilingY }; v.Variant = p;
            }
            if (SideTilingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SideTilingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SideTilingX") { IsSerialized = true, Value = (float)SideTilingX }; v.Variant = p;
            }
            if (SideTilingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SideTilingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SideTilingY") { IsSerialized = true, Value = (float)SideTilingY }; v.Variant = p;
            }
            if (AddSizeX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AddSizeX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AddSizeX") { IsSerialized = true, Value = (float)AddSizeX }; v.Variant = p;
            }
            if (AddSizeY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AddSizeY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AddSizeY") { IsSerialized = true, Value = (float)AddSizeY }; v.Variant = p;
            }
            if (Width != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Width") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Width") { IsSerialized = true, Value = (float)Width }; v.Variant = p;
            }
            if (Height != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Height") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Height") { IsSerialized = true, Value = (float)Height }; v.Variant = p;
            }
            if (Depth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Depth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Depth") { IsSerialized = true, Value = (float)Depth }; v.Variant = p;
            }
            if (NoiseScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NoiseScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NoiseScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NoiseScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NoiseScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NoiseScale.W };
            }
            if (NoiseSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseSize") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NoiseSize") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NoiseSize.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NoiseSize.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NoiseSize.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NoiseSize.W };
            }
            if (TranslateTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TranslateTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TranslateTime") { IsSerialized = true, Value = (float)TranslateTime }; v.Variant = p;
            }
            if (TranslateDestination != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TranslateDestination") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TranslateDestination") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TranslateDestination.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TranslateDestination.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TranslateDestination.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TranslateDestination.W };
            }
            if (StretchMul != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "StretchMul") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "StretchMul") { IsSerialized = true, Value = (float)StretchMul }; v.Variant = p;
            }
            if (StretchMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "StretchMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "StretchMax") { IsSerialized = true, Value = (float)StretchMax }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (Tint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tint") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Tint") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Tint.Red }, Green = new CUInt8() { Value = (Byte)Tint.Green }, Blue = new CUInt8() { Value = (Byte)Tint.Blue }, Alpha = new CUInt8() { Value = (Byte)Tint.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _decal_emissive_color
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveAlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveAlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveAlphaThreshold") { IsSerialized = true, Value = (float)EmissiveAlphaThreshold }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
        }
    }
    public partial class _decal_emissive_only
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (EmissiveMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "EmissiveMask") { IsSerialized = true, DepotPath = EmissiveMask }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (EmissiveAlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveAlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveAlphaThreshold") { IsSerialized = true, Value = (float)EmissiveAlphaThreshold }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
        }
    }
    public partial class _decal_forward
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (Alpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Alpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Alpha") { IsSerialized = true, Value = (float)Alpha }; v.Variant = p;
            }
        }
    }
    public partial class _decal_gradientmap_recolor
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (DiffuseTextureAsMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTextureAsMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseTextureAsMaskTexture") { IsSerialized = true, Value = (float)DiffuseTextureAsMaskTexture }; v.Variant = p;
            }
            if (GradientMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GradientMap") { IsSerialized = true, DepotPath = GradientMap }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
        }
    }
    public partial class _decal_gradientmap_recolor_emissive
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (DiffuseTextureAsMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTextureAsMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseTextureAsMaskTexture") { IsSerialized = true, Value = (float)DiffuseTextureAsMaskTexture }; v.Variant = p;
            }
            if (GradientMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GradientMap") { IsSerialized = true, DepotPath = GradientMap }; v.Variant = p;
            }
            if (EmissiveGradientMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveGradientMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "EmissiveGradientMap") { IsSerialized = true, DepotPath = EmissiveGradientMap }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
        }
    }
    public partial class _decal_normal_roughness
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseTextureAsMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTextureAsMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseTextureAsMaskTexture") { IsSerialized = true, Value = (float)DiffuseTextureAsMaskTexture }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
        }
    }
    public partial class _decal_normal_roughness_metalness
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseTextureAsMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTextureAsMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseTextureAsMaskTexture") { IsSerialized = true, Value = (float)DiffuseTextureAsMaskTexture }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
        }
    }
    public partial class _decal_normal_roughness_metalness_2
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseTextureAsMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTextureAsMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseTextureAsMaskTexture") { IsSerialized = true, Value = (float)DiffuseTextureAsMaskTexture }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (AtlasSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AtlasSize") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "AtlasSize") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)AtlasSize.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)AtlasSize.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)AtlasSize.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)AtlasSize.W };
            }
            if (SubRegion != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubRegion") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "SubRegion") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)SubRegion.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)SubRegion.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)SubRegion.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)SubRegion.W };
            }
        }
    }
    public partial class _decal_parallax
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseTextureAsMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTextureAsMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseTextureAsMaskTexture") { IsSerialized = true, Value = (float)DiffuseTextureAsMaskTexture }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (AtlasSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AtlasSize") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "AtlasSize") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)AtlasSize.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)AtlasSize.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)AtlasSize.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)AtlasSize.W };
            }
            if (SubRegion != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubRegion") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "SubRegion") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)SubRegion.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)SubRegion.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)SubRegion.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)SubRegion.W };
            }
            if (HeightTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeightTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "HeightTexture") { IsSerialized = true, DepotPath = HeightTexture }; v.Variant = p;
            }
            if (HeightStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeightStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HeightStrength") { IsSerialized = true, Value = (float)HeightStrength }; v.Variant = p;
            }
        }
    }
    public partial class _decal_puddle
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (DiffuseTextureAsMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTextureAsMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseTextureAsMaskTexture") { IsSerialized = true, Value = (float)DiffuseTextureAsMaskTexture }; v.Variant = p;
            }
            if (DiffuseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseAlpha") { IsSerialized = true, Value = (float)DiffuseAlpha }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
        }
    }
    public partial class _decal_roughness
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseTextureAsMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTextureAsMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseTextureAsMaskTexture") { IsSerialized = true, Value = (float)DiffuseTextureAsMaskTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
        }
    }
    public partial class _decal_roughness_only
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
        }
    }
    public partial class _decal_terrain_projected
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AlphaMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "AlphaMask") { IsSerialized = true, DepotPath = AlphaMask }; v.Variant = p;
            }
            if (AlphaMaskBlackPoint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskBlackPoint") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskBlackPoint") { IsSerialized = true, Value = (float)AlphaMaskBlackPoint }; v.Variant = p;
            }
            if (AlphaMaskWhitePoint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskWhitePoint") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskWhitePoint") { IsSerialized = true, Value = (float)AlphaMaskWhitePoint }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (SpecularIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SpecularIntensity") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SpecularIntensity") { IsSerialized = true, DepotPath = SpecularIntensity }; v.Variant = p;
            }
            if (RoughnessLevels != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessLevels") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RoughnessLevels") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RoughnessLevels.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RoughnessLevels.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RoughnessLevels.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RoughnessLevels.W };
            }
            if (SpecularIntensityLevels != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SpecularIntensityLevels") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "SpecularIntensityLevels") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)SpecularIntensityLevels.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)SpecularIntensityLevels.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)SpecularIntensityLevels.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)SpecularIntensityLevels.W };
            }
            if (ColorMaskLevels != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMaskLevels") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "ColorMaskLevels") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)ColorMaskLevels.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)ColorMaskLevels.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)ColorMaskLevels.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)ColorMaskLevels.W };
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (Microblend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Microblend") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Microblend") { IsSerialized = true, DepotPath = Microblend }; v.Variant = p;
            }
            if (MicroblendContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MicroblendContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MicroblendContrast") { IsSerialized = true, Value = (float)MicroblendContrast }; v.Variant = p;
            }
            if (MaterialTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaterialTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaterialTiling") { IsSerialized = true, Value = (float)MaterialTiling }; v.Variant = p;
            }
            if (LayerTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTiling") { IsSerialized = true, Value = (float)LayerTiling }; v.Variant = p;
            }
            if (MicroblendTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MicroblendTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MicroblendTiling") { IsSerialized = true, Value = (float)MicroblendTiling }; v.Variant = p;
            }
        }
    }
    public partial class _decal_tintable
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseTextureAsMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTextureAsMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseTextureAsMaskTexture") { IsSerialized = true, Value = (float)DiffuseTextureAsMaskTexture }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (TintMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "TintMaskTexture") { IsSerialized = true, DepotPath = TintMaskTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (MaskColorR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskColorR") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "MaskColorR") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)MaskColorR.Red }, Green = new CUInt8() { Value = (Byte)MaskColorR.Green }, Blue = new CUInt8() { Value = (Byte)MaskColorR.Blue }, Alpha = new CUInt8() { Value = (Byte)MaskColorR.Alpha } }; v.Variant = p;
            }
            if (MaskColorG != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskColorG") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "MaskColorG") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)MaskColorG.Red }, Green = new CUInt8() { Value = (Byte)MaskColorG.Green }, Blue = new CUInt8() { Value = (Byte)MaskColorG.Blue }, Alpha = new CUInt8() { Value = (Byte)MaskColorG.Alpha } }; v.Variant = p;
            }
            if (MaskColorB != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskColorB") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "MaskColorB") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)MaskColorB.Red }, Green = new CUInt8() { Value = (Byte)MaskColorB.Green }, Blue = new CUInt8() { Value = (Byte)MaskColorB.Blue }, Alpha = new CUInt8() { Value = (Byte)MaskColorB.Alpha } }; v.Variant = p;
            }
            if (AtlasSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AtlasSize") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "AtlasSize") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)AtlasSize.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)AtlasSize.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)AtlasSize.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)AtlasSize.W };
            }
            if (SubRegion != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubRegion") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "SubRegion") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)SubRegion.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)SubRegion.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)SubRegion.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)SubRegion.W };
            }
        }
    }
    public partial class _diode_sign
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (ColorForeground != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorForeground") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorForeground") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorForeground.Red }, Green = new CUInt8() { Value = (Byte)ColorForeground.Green }, Blue = new CUInt8() { Value = (Byte)ColorForeground.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorForeground.Alpha } }; v.Variant = p;
            }
            if (ColorMiddle != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMiddle") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorMiddle") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorMiddle.Red }, Green = new CUInt8() { Value = (Byte)ColorMiddle.Green }, Blue = new CUInt8() { Value = (Byte)ColorMiddle.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorMiddle.Alpha } }; v.Variant = p;
            }
            if (ColorBackground != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorBackground") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorBackground") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorBackground.Red }, Green = new CUInt8() { Value = (Byte)ColorBackground.Green }, Blue = new CUInt8() { Value = (Byte)ColorBackground.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorBackground.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Metalness") { IsSerialized = true, Value = (float)Metalness }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (HeightIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeightIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HeightIndex") { IsSerialized = true, Value = (float)HeightIndex }; v.Variant = p;
            }
            if (WidthPixels != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WidthPixels") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WidthPixels") { IsSerialized = true, Value = (float)WidthPixels }; v.Variant = p;
            }
            if (StretchFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "StretchFactor") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "StretchFactor") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)StretchFactor.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)StretchFactor.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)StretchFactor.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)StretchFactor.W };
            }
            if (ScrollSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollSpeed") { IsSerialized = true, Value = (float)ScrollSpeed }; v.Variant = p;
            }
            if (DotSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotSize") { IsSerialized = true, Value = (float)DotSize }; v.Variant = p;
            }
            if (Multiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Multiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Multiplier") { IsSerialized = true, Value = (float)Multiplier }; v.Variant = p;
            }
            if (AmountOfLayers != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AmountOfLayers") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AmountOfLayers") { IsSerialized = true, Value = (float)AmountOfLayers }; v.Variant = p;
            }
            if (DotsSpacing != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsSpacing") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotsSpacing") { IsSerialized = true, Value = (float)DotsSpacing }; v.Variant = p;
            }
            if (FarDotMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FarDotMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FarDotMultiplier") { IsSerialized = true, Value = (float)FarDotMultiplier }; v.Variant = p;
            }
            if (WidthPixelsStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WidthPixelsStart") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WidthPixelsStart") { IsSerialized = true, Value = (float)WidthPixelsStart }; v.Variant = p;
            }
            if (AllWidthPixels != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AllWidthPixels") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AllWidthPixels") { IsSerialized = true, Value = (float)AllWidthPixels }; v.Variant = p;
            }
            if (AmountOfLines != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AmountOfLines") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AmountOfLines") { IsSerialized = true, Value = (float)AmountOfLines }; v.Variant = p;
            }
            if (Text != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Text") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Text") { IsSerialized = true, DepotPath = Text }; v.Variant = p;
            }
        }
    }
    public partial class _earth_globe
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (MultilayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Mask>(cr2w, v, "MultilayerMask") { IsSerialized = true, DepotPath = MultilayerMask }; v.Variant = p;
            }
            if (MultilayerSetup != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerSetup") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Setup>(cr2w, v, "MultilayerSetup") { IsSerialized = true, DepotPath = MultilayerSetup }; v.Variant = p;
            }
            if (MultilayerBlendStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerBlendStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MultilayerBlendStrength") { IsSerialized = true, Value = (float)MultilayerBlendStrength }; v.Variant = p;
            }
            if (MaskAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskAtlas") { IsSerialized = true, DepotPath = MaskAtlas }; v.Variant = p;
            }
            if (SurfaceTexAspectRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceTexAspectRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceTexAspectRatio") { IsSerialized = true, Value = (float)SurfaceTexAspectRatio }; v.Variant = p;
            }
            if (MaskToTileScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskToTileScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskToTileScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskToTileScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskToTileScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskToTileScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskToTileScale.W };
            }
            if (MaskTileSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTileSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskTileSize") { IsSerialized = true, Value = (float)MaskTileSize }; v.Variant = p;
            }
            if (CloudsMicroblend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CloudsMicroblend") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "CloudsMicroblend") { IsSerialized = true, DepotPath = CloudsMicroblend }; v.Variant = p;
            }
            if (MaskAtlasDims != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlasDims") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskAtlasDims") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskAtlasDims.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskAtlasDims.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskAtlasDims.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskAtlasDims.W };
            }
            if (MaskBaseResolution != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskBaseResolution") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskBaseResolution") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskBaseResolution.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskBaseResolution.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskBaseResolution.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskBaseResolution.W };
            }
            if (CityLightsMicroblend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CityLightsMicroblend") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "CityLightsMicroblend") { IsSerialized = true, DepotPath = CityLightsMicroblend }; v.Variant = p;
            }
            if (SetupLayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SetupLayerMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SetupLayerMask") { IsSerialized = true, Value = (float)SetupLayerMask }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (SunDirection != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SunDirection") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "SunDirection") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)SunDirection.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)SunDirection.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)SunDirection.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)SunDirection.W };
            }
            if (WaterMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaterMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WaterMask") { IsSerialized = true, DepotPath = WaterMask }; v.Variant = p;
            }
            if (Clouds != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Clouds") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Clouds") { IsSerialized = true, DepotPath = Clouds }; v.Variant = p;
            }
            if (CityLights != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CityLights") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "CityLights") { IsSerialized = true, DepotPath = CityLights }; v.Variant = p;
            }
            if (LayersStartIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersStartIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersStartIndex") { IsSerialized = true, Value = (float)LayersStartIndex }; v.Variant = p;
            }
            if (CloudIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CloudIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CloudIntensity") { IsSerialized = true, Value = (float)CloudIntensity }; v.Variant = p;
            }
            if (CityLightsColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CityLightsColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "CityLightsColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)CityLightsColor.Red }, Green = new CUInt8() { Value = (Byte)CityLightsColor.Green }, Blue = new CUInt8() { Value = (Byte)CityLightsColor.Blue }, Alpha = new CUInt8() { Value = (Byte)CityLightsColor.Alpha } }; v.Variant = p;
            }
            if (OceanDetailNormalMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OceanDetailNormalMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "OceanDetailNormalMap") { IsSerialized = true, DepotPath = OceanDetailNormalMap }; v.Variant = p;
            }
            if (OceanRoughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OceanRoughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OceanRoughness") { IsSerialized = true, Value = (float)OceanRoughness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
        }
    }
    public partial class _earth_globe_atmosphere
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (AtmosphereColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AtmosphereColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "AtmosphereColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)AtmosphereColor.Red }, Green = new CUInt8() { Value = (Byte)AtmosphereColor.Green }, Blue = new CUInt8() { Value = (Byte)AtmosphereColor.Blue }, Alpha = new CUInt8() { Value = (Byte)AtmosphereColor.Alpha } }; v.Variant = p;
            }
            if (AtmosphereOrangeColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AtmosphereOrangeColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "AtmosphereOrangeColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)AtmosphereOrangeColor.Red }, Green = new CUInt8() { Value = (Byte)AtmosphereOrangeColor.Green }, Blue = new CUInt8() { Value = (Byte)AtmosphereOrangeColor.Blue }, Alpha = new CUInt8() { Value = (Byte)AtmosphereOrangeColor.Alpha } }; v.Variant = p;
            }
            if (Brigthness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Brigthness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Brigthness") { IsSerialized = true, Value = (float)Brigthness }; v.Variant = p;
            }
            if (FresnelPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelPower") { IsSerialized = true, Value = (float)FresnelPower }; v.Variant = p;
            }
            if (TransmissionBoost != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TransmissionBoost") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TransmissionBoost") { IsSerialized = true, Value = (float)TransmissionBoost }; v.Variant = p;
            }
            if (TransmissionBoostPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TransmissionBoostPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TransmissionBoostPower") { IsSerialized = true, Value = (float)TransmissionBoostPower }; v.Variant = p;
            }
            if (EarthRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EarthRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EarthRadius") { IsSerialized = true, Value = (float)EarthRadius }; v.Variant = p;
            }
            if (SunDirection != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SunDirection") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "SunDirection") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)SunDirection.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)SunDirection.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)SunDirection.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)SunDirection.W };
            }
        }
    }
    public partial class _earth_globe_lights
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VertexOffsetFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexOffsetFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexOffsetFactor") { IsSerialized = true, Value = (float)VertexOffsetFactor }; v.Variant = p;
            }
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AnimationSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationSpeed") { IsSerialized = true, Value = (float)AnimationSpeed }; v.Variant = p;
            }
            if (AnimationFramesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesWidth") { IsSerialized = true, Value = (float)AnimationFramesWidth }; v.Variant = p;
            }
            if (AnimationFramesHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesHeight") { IsSerialized = true, Value = (float)AnimationFramesHeight }; v.Variant = p;
            }
            if (ScrollSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "ScrollSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)ScrollSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)ScrollSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)ScrollSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)ScrollSpeed.W };
            }
            if (HardOrSoftTransition != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HardOrSoftTransition") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HardOrSoftTransition") { IsSerialized = true, Value = (float)HardOrSoftTransition }; v.Variant = p;
            }
            if (FullVisibilityFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FullVisibilityFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FullVisibilityFactor") { IsSerialized = true, Value = (float)FullVisibilityFactor }; v.Variant = p;
            }
            if (EnableAlternateUVcoord != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableAlternateUVcoord") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableAlternateUVcoord") { IsSerialized = true, Value = (float)EnableAlternateUVcoord }; v.Variant = p;
            }
            if (Preview2ndState != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Preview2ndState") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Preview2ndState") { IsSerialized = true, Value = (float)Preview2ndState }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
            if (CityLightsMicroblend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CityLightsMicroblend") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "CityLightsMicroblend") { IsSerialized = true, DepotPath = CityLightsMicroblend }; v.Variant = p;
            }
            if (SunDirection != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SunDirection") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "SunDirection") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)SunDirection.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)SunDirection.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)SunDirection.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)SunDirection.W };
            }
        }
    }
    public partial class _emissive_control
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Translucency != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Translucency") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Translucency") { IsSerialized = true, Value = (float)Translucency }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _eye
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Albedo != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Albedo") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Albedo") { IsSerialized = true, DepotPath = Albedo }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (Blick != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Blick") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Blick") { IsSerialized = true, DepotPath = Blick }; v.Variant = p;
            }
            if (NormalBubble != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalBubble") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalBubble") { IsSerialized = true, DepotPath = NormalBubble }; v.Variant = p;
            }
            if (RefractionIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionIndex") { IsSerialized = true, Value = (float)RefractionIndex }; v.Variant = p;
            }
            if (RefractionAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionAmount") { IsSerialized = true, Value = (float)RefractionAmount }; v.Variant = p;
            }
            if (EyeRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EyeRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EyeRadius") { IsSerialized = true, Value = (float)EyeRadius }; v.Variant = p;
            }
            if (EyeHorizAngleRight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EyeHorizAngleRight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EyeHorizAngleRight") { IsSerialized = true, Value = (float)EyeHorizAngleRight }; v.Variant = p;
            }
            if (EyeHorizAngleLeft != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EyeHorizAngleLeft") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EyeHorizAngleLeft") { IsSerialized = true, Value = (float)EyeHorizAngleLeft }; v.Variant = p;
            }
            if (EyeParallaxPlane != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EyeParallaxPlane") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EyeParallaxPlane") { IsSerialized = true, Value = (float)EyeParallaxPlane }; v.Variant = p;
            }
            if (IrisSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IrisSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IrisSize") { IsSerialized = true, Value = (float)IrisSize }; v.Variant = p;
            }
            if (IrisCoordMargin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IrisCoordMargin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IrisCoordMargin") { IsSerialized = true, Value = (float)IrisCoordMargin }; v.Variant = p;
            }
            if (IrisCoordFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IrisCoordFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IrisCoordFactor") { IsSerialized = true, Value = (float)IrisCoordFactor }; v.Variant = p;
            }
            if (BlickScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlickScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlickScale") { IsSerialized = true, Value = (float)BlickScale }; v.Variant = p;
            }
            if (BubbleNormalTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BubbleNormalTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BubbleNormalTile") { IsSerialized = true, Value = (float)BubbleNormalTile }; v.Variant = p;
            }
            if (EggMarginExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EggMarginExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EggMarginExponent") { IsSerialized = true, Value = (float)EggMarginExponent }; v.Variant = p;
            }
            if (EggMarginFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EggMarginFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EggMarginFactor") { IsSerialized = true, Value = (float)EggMarginFactor }; v.Variant = p;
            }
            if (EggSubFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EggSubFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EggSubFactor") { IsSerialized = true, Value = (float)EggSubFactor }; v.Variant = p;
            }
            if (EggFullRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EggFullRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EggFullRadius") { IsSerialized = true, Value = (float)EggFullRadius }; v.Variant = p;
            }
            if (Specularity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Specularity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Specularity") { IsSerialized = true, Value = (float)Specularity }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (SubsurfaceFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubsurfaceFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubsurfaceFactor") { IsSerialized = true, Value = (float)SubsurfaceFactor }; v.Variant = p;
            }
            if (AntiLightbleedValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AntiLightbleedValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AntiLightbleedValue") { IsSerialized = true, Value = (float)AntiLightbleedValue }; v.Variant = p;
            }
            if (AntiLightbleedUpOff != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AntiLightbleedUpOff") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AntiLightbleedUpOff") { IsSerialized = true, Value = (float)AntiLightbleedUpOff }; v.Variant = p;
            }
        }
    }
    public partial class _eye_blendable
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VectorField != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField") { IsSerialized = true, DepotPath = VectorField }; v.Variant = p;
            }
            if (FadeOutDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutDistance") { IsSerialized = true, Value = (float)FadeOutDistance }; v.Variant = p;
            }
            if (FadeOutOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutOffset") { IsSerialized = true, Value = (float)FadeOutOffset }; v.Variant = p;
            }
            if (GlitchChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchChance") { IsSerialized = true, Value = (float)GlitchChance }; v.Variant = p;
            }
            if (GlitchOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchOffset") { IsSerialized = true, Value = (float)GlitchOffset }; v.Variant = p;
            }
            if (FresnelColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "FresnelColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)FresnelColor.Red }, Green = new CUInt8() { Value = (Byte)FresnelColor.Green }, Blue = new CUInt8() { Value = (Byte)FresnelColor.Blue }, Alpha = new CUInt8() { Value = (Byte)FresnelColor.Alpha } }; v.Variant = p;
            }
            if (Albedo != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Albedo") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Albedo") { IsSerialized = true, DepotPath = Albedo }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (Blick != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Blick") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Blick") { IsSerialized = true, DepotPath = Blick }; v.Variant = p;
            }
            if (NormalBubble != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalBubble") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalBubble") { IsSerialized = true, DepotPath = NormalBubble }; v.Variant = p;
            }
            if (RefractionIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionIndex") { IsSerialized = true, Value = (float)RefractionIndex }; v.Variant = p;
            }
            if (RefractionAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionAmount") { IsSerialized = true, Value = (float)RefractionAmount }; v.Variant = p;
            }
            if (IrisSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IrisSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IrisSize") { IsSerialized = true, Value = (float)IrisSize }; v.Variant = p;
            }
            if (EyeHorizAngleRight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EyeHorizAngleRight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EyeHorizAngleRight") { IsSerialized = true, Value = (float)EyeHorizAngleRight }; v.Variant = p;
            }
            if (EyeHorizAngleLeft != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EyeHorizAngleLeft") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EyeHorizAngleLeft") { IsSerialized = true, Value = (float)EyeHorizAngleLeft }; v.Variant = p;
            }
            if (EyeRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EyeRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EyeRadius") { IsSerialized = true, Value = (float)EyeRadius }; v.Variant = p;
            }
            if (EyeParallaxPlane != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EyeParallaxPlane") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EyeParallaxPlane") { IsSerialized = true, Value = (float)EyeParallaxPlane }; v.Variant = p;
            }
            if (BubbleNormalTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BubbleNormalTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BubbleNormalTile") { IsSerialized = true, Value = (float)BubbleNormalTile }; v.Variant = p;
            }
            if (EggFullRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EggFullRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EggFullRadius") { IsSerialized = true, Value = (float)EggFullRadius }; v.Variant = p;
            }
            if (EggMarginExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EggMarginExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EggMarginExponent") { IsSerialized = true, Value = (float)EggMarginExponent }; v.Variant = p;
            }
            if (EggMarginFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EggMarginFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EggMarginFactor") { IsSerialized = true, Value = (float)EggMarginFactor }; v.Variant = p;
            }
            if (EggSubFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EggSubFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EggSubFactor") { IsSerialized = true, Value = (float)EggSubFactor }; v.Variant = p;
            }
            if (IrisCoordFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IrisCoordFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IrisCoordFactor") { IsSerialized = true, Value = (float)IrisCoordFactor }; v.Variant = p;
            }
            if (IrisCoordMargin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IrisCoordMargin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IrisCoordMargin") { IsSerialized = true, Value = (float)IrisCoordMargin }; v.Variant = p;
            }
            if (BlickScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlickScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlickScale") { IsSerialized = true, Value = (float)BlickScale }; v.Variant = p;
            }
            if (Specularity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Specularity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Specularity") { IsSerialized = true, Value = (float)Specularity }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (SubsurfaceFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubsurfaceFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubsurfaceFactor") { IsSerialized = true, Value = (float)SubsurfaceFactor }; v.Variant = p;
            }
            if (AntiLightbleedValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AntiLightbleedValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AntiLightbleedValue") { IsSerialized = true, Value = (float)AntiLightbleedValue }; v.Variant = p;
            }
            if (AntiLightbleedUpOff != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AntiLightbleedUpOff") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AntiLightbleedUpOff") { IsSerialized = true, Value = (float)AntiLightbleedUpOff }; v.Variant = p;
            }
        }
    }
    public partial class _eye_gradient
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Albedo != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Albedo") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Albedo") { IsSerialized = true, DepotPath = Albedo }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (Blick != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Blick") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Blick") { IsSerialized = true, DepotPath = Blick }; v.Variant = p;
            }
            if (NormalBubble != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalBubble") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalBubble") { IsSerialized = true, DepotPath = NormalBubble }; v.Variant = p;
            }
            if (IrisMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IrisMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "IrisMask") { IsSerialized = true, DepotPath = IrisMask }; v.Variant = p;
            }
            if (IrisColorGradient != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IrisColorGradient") { IsSerialized = true }; m.Add(v);
                var p = new rRef<CGradient>(cr2w, v, "IrisColorGradient") { IsSerialized = true, DepotPath = IrisColorGradient }; v.Variant = p;
            }
            if (RefractionIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionIndex") { IsSerialized = true, Value = (float)RefractionIndex }; v.Variant = p;
            }
            if (RefractionAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionAmount") { IsSerialized = true, Value = (float)RefractionAmount }; v.Variant = p;
            }
            if (IrisSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IrisSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IrisSize") { IsSerialized = true, Value = (float)IrisSize }; v.Variant = p;
            }
            if (EyeHorizAngleRight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EyeHorizAngleRight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EyeHorizAngleRight") { IsSerialized = true, Value = (float)EyeHorizAngleRight }; v.Variant = p;
            }
            if (EyeHorizAngleLeft != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EyeHorizAngleLeft") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EyeHorizAngleLeft") { IsSerialized = true, Value = (float)EyeHorizAngleLeft }; v.Variant = p;
            }
            if (EyeRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EyeRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EyeRadius") { IsSerialized = true, Value = (float)EyeRadius }; v.Variant = p;
            }
            if (EyeParallaxPlane != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EyeParallaxPlane") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EyeParallaxPlane") { IsSerialized = true, Value = (float)EyeParallaxPlane }; v.Variant = p;
            }
            if (BubbleNormalTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BubbleNormalTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BubbleNormalTile") { IsSerialized = true, Value = (float)BubbleNormalTile }; v.Variant = p;
            }
            if (EggFullRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EggFullRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EggFullRadius") { IsSerialized = true, Value = (float)EggFullRadius }; v.Variant = p;
            }
            if (EggMarginExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EggMarginExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EggMarginExponent") { IsSerialized = true, Value = (float)EggMarginExponent }; v.Variant = p;
            }
            if (EggMarginFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EggMarginFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EggMarginFactor") { IsSerialized = true, Value = (float)EggMarginFactor }; v.Variant = p;
            }
            if (EggSubFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EggSubFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EggSubFactor") { IsSerialized = true, Value = (float)EggSubFactor }; v.Variant = p;
            }
            if (IrisCoordFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IrisCoordFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IrisCoordFactor") { IsSerialized = true, Value = (float)IrisCoordFactor }; v.Variant = p;
            }
            if (IrisCoordMargin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IrisCoordMargin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IrisCoordMargin") { IsSerialized = true, Value = (float)IrisCoordMargin }; v.Variant = p;
            }
            if (BlickScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlickScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlickScale") { IsSerialized = true, Value = (float)BlickScale }; v.Variant = p;
            }
            if (Specularity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Specularity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Specularity") { IsSerialized = true, Value = (float)Specularity }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (SubsurfaceFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubsurfaceFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubsurfaceFactor") { IsSerialized = true, Value = (float)SubsurfaceFactor }; v.Variant = p;
            }
            if (AntiLightbleedValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AntiLightbleedValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AntiLightbleedValue") { IsSerialized = true, Value = (float)AntiLightbleedValue }; v.Variant = p;
            }
            if (AntiLightbleedUpOff != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AntiLightbleedUpOff") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AntiLightbleedUpOff") { IsSerialized = true, Value = (float)AntiLightbleedUpOff }; v.Variant = p;
            }
        }
    }
    public partial class _eye_shadow
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (ShadowColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShadowColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ShadowColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ShadowColor.Red }, Green = new CUInt8() { Value = (Byte)ShadowColor.Green }, Blue = new CUInt8() { Value = (Byte)ShadowColor.Blue }, Alpha = new CUInt8() { Value = (Byte)ShadowColor.Alpha } }; v.Variant = p;
            }
            if (Exponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Exponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Exponent") { IsSerialized = true, Value = (float)Exponent }; v.Variant = p;
            }
            if (Intensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Intensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Intensity") { IsSerialized = true, Value = (float)Intensity }; v.Variant = p;
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
            if (WetnessRoughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WetnessRoughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WetnessRoughness") { IsSerialized = true, Value = (float)WetnessRoughness }; v.Variant = p;
            }
            if (WetnessStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WetnessStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WetnessStrength") { IsSerialized = true, Value = (float)WetnessStrength }; v.Variant = p;
            }
            if (SubsurfaceBlur != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubsurfaceBlur") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubsurfaceBlur") { IsSerialized = true, Value = (float)SubsurfaceBlur }; v.Variant = p;
            }
        }
    }
    public partial class _eye_shadow_blendable
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VectorField != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField") { IsSerialized = true, DepotPath = VectorField }; v.Variant = p;
            }
            if (FadeOutDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutDistance") { IsSerialized = true, Value = (float)FadeOutDistance }; v.Variant = p;
            }
            if (FadeOutOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutOffset") { IsSerialized = true, Value = (float)FadeOutOffset }; v.Variant = p;
            }
            if (GlitchChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchChance") { IsSerialized = true, Value = (float)GlitchChance }; v.Variant = p;
            }
            if (GlitchOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchOffset") { IsSerialized = true, Value = (float)GlitchOffset }; v.Variant = p;
            }
            if (FresnelColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "FresnelColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)FresnelColor.Red }, Green = new CUInt8() { Value = (Byte)FresnelColor.Green }, Blue = new CUInt8() { Value = (Byte)FresnelColor.Blue }, Alpha = new CUInt8() { Value = (Byte)FresnelColor.Alpha } }; v.Variant = p;
            }
            if (FresnelColorIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColorIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelColorIntensity") { IsSerialized = true, Value = (float)FresnelColorIntensity }; v.Variant = p;
            }
            if (FresnelExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelExponent") { IsSerialized = true, Value = (float)FresnelExponent }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (ShadowColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShadowColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ShadowColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ShadowColor.Red }, Green = new CUInt8() { Value = (Byte)ShadowColor.Green }, Blue = new CUInt8() { Value = (Byte)ShadowColor.Blue }, Alpha = new CUInt8() { Value = (Byte)ShadowColor.Alpha } }; v.Variant = p;
            }
            if (Exponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Exponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Exponent") { IsSerialized = true, Value = (float)Exponent }; v.Variant = p;
            }
            if (Intensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Intensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Intensity") { IsSerialized = true, Value = (float)Intensity }; v.Variant = p;
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
            if (WetnessRoughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WetnessRoughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WetnessRoughness") { IsSerialized = true, Value = (float)WetnessRoughness }; v.Variant = p;
            }
            if (WetnessStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WetnessStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WetnessStrength") { IsSerialized = true, Value = (float)WetnessStrength }; v.Variant = p;
            }
            if (SubsurfaceBlur != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubsurfaceBlur") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubsurfaceBlur") { IsSerialized = true, Value = (float)SubsurfaceBlur }; v.Variant = p;
            }
        }
    }
    public partial class _fake_occluder
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DissolveDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DissolveDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DissolveDistance") { IsSerialized = true, Value = (float)DissolveDistance }; v.Variant = p;
            }
            if (DissolveBandWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DissolveBandWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DissolveBandWidth") { IsSerialized = true, Value = (float)DissolveBandWidth }; v.Variant = p;
            }
        }
    }
    public partial class _fillable_fluid
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (FluidBoundingBoxMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FluidBoundingBoxMin") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "FluidBoundingBoxMin") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)FluidBoundingBoxMin.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)FluidBoundingBoxMin.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)FluidBoundingBoxMin.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)FluidBoundingBoxMin.W };
            }
            if (FluidBoundingBoxMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FluidBoundingBoxMax") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "FluidBoundingBoxMax") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)FluidBoundingBoxMax.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)FluidBoundingBoxMax.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)FluidBoundingBoxMax.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)FluidBoundingBoxMax.W };
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (TintColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor.Red }, Green = new CUInt8() { Value = (Byte)TintColor.Green }, Blue = new CUInt8() { Value = (Byte)TintColor.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor.Alpha } }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (ObjectSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ObjectSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ObjectSize") { IsSerialized = true, Value = (float)ObjectSize }; v.Variant = p;
            }
            if (ControlledByFx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ControlledByFx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ControlledByFx") { IsSerialized = true, Value = (float)ControlledByFx }; v.Variant = p;
            }
            if (FillAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FillAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FillAmount") { IsSerialized = true, Value = (float)FillAmount }; v.Variant = p;
            }
            if (Waves != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Waves") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Waves") { IsSerialized = true, DepotPath = Waves }; v.Variant = p;
            }
            if (WaveAmplitude != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveAmplitude") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaveAmplitude") { IsSerialized = true, Value = (float)WaveAmplitude }; v.Variant = p;
            }
            if (WaveSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaveSpeed") { IsSerialized = true, Value = (float)WaveSpeed }; v.Variant = p;
            }
            if (WaveSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaveSize") { IsSerialized = true, Value = (float)WaveSize }; v.Variant = p;
            }
        }
    }
    public partial class _fillable_fluid_vertex
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (FluidBoundingBoxMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FluidBoundingBoxMin") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "FluidBoundingBoxMin") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)FluidBoundingBoxMin.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)FluidBoundingBoxMin.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)FluidBoundingBoxMin.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)FluidBoundingBoxMin.W };
            }
            if (FluidBoundingBoxMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FluidBoundingBoxMax") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "FluidBoundingBoxMax") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)FluidBoundingBoxMax.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)FluidBoundingBoxMax.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)FluidBoundingBoxMax.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)FluidBoundingBoxMax.W };
            }
            if (ControlledByFx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ControlledByFx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ControlledByFx") { IsSerialized = true, Value = (float)ControlledByFx }; v.Variant = p;
            }
            if (ControlledByFxMode != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ControlledByFxMode") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ControlledByFxMode") { IsSerialized = true, Value = (float)ControlledByFxMode }; v.Variant = p;
            }
            if (PinchDeformation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PinchDeformation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "PinchDeformation") { IsSerialized = true, Value = (float)PinchDeformation }; v.Variant = p;
            }
            if (FillAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FillAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FillAmount") { IsSerialized = true, Value = (float)FillAmount }; v.Variant = p;
            }
            if (Waves != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Waves") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Waves") { IsSerialized = true, DepotPath = Waves }; v.Variant = p;
            }
            if (WaveAmplitude != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveAmplitude") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaveAmplitude") { IsSerialized = true, Value = (float)WaveAmplitude }; v.Variant = p;
            }
            if (WaveSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaveSpeed") { IsSerialized = true, Value = (float)WaveSpeed }; v.Variant = p;
            }
            if (WaveSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaveSize") { IsSerialized = true, Value = (float)WaveSize }; v.Variant = p;
            }
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (GlassTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTint") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlassTint") { IsSerialized = true, DepotPath = GlassTint }; v.Variant = p;
            }
            if (TintColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor.Red }, Green = new CUInt8() { Value = (Byte)TintColor.Green }, Blue = new CUInt8() { Value = (Byte)TintColor.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor.Alpha } }; v.Variant = p;
            }
            if (FrontFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FrontFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FrontFacesReflectionPower") { IsSerialized = true, Value = (float)FrontFacesReflectionPower }; v.Variant = p;
            }
            if (IOR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IOR") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IOR") { IsSerialized = true, Value = (float)IOR }; v.Variant = p;
            }
            if (FresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelBias") { IsSerialized = true, Value = (float)FresnelBias }; v.Variant = p;
            }
            if (GlassSpecularColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassSpecularColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "GlassSpecularColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)GlassSpecularColor.Red }, Green = new CUInt8() { Value = (Byte)GlassSpecularColor.Green }, Blue = new CUInt8() { Value = (Byte)GlassSpecularColor.Blue }, Alpha = new CUInt8() { Value = (Byte)GlassSpecularColor.Alpha } }; v.Variant = p;
            }
            if (BlurRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurRadius") { IsSerialized = true, Value = (float)BlurRadius }; v.Variant = p;
            }
        }
    }
    public partial class _fluid_mov
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (OpacityBackFace != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OpacityBackFace") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OpacityBackFace") { IsSerialized = true, Value = (float)OpacityBackFace }; v.Variant = p;
            }
            if (UvTilingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingX") { IsSerialized = true, Value = (float)UvTilingX }; v.Variant = p;
            }
            if (UvTilingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingY") { IsSerialized = true, Value = (float)UvTilingY }; v.Variant = p;
            }
            if (UvOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetX") { IsSerialized = true, Value = (float)UvOffsetX }; v.Variant = p;
            }
            if (UvOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetY") { IsSerialized = true, Value = (float)UvOffsetY }; v.Variant = p;
            }
            if (RoughnessTileAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTileAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RoughnessTileAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.W };
            }
            if (NormalTileAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTileAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NormalTileAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NormalTileAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NormalTileAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NormalTileAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NormalTileAndOffset.W };
            }
            if (GlassTintTileAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTintTileAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "GlassTintTileAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.W };
            }
            if (vertex_paint_tex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "vertex_paint_tex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "vertex_paint_tex") { IsSerialized = true, DepotPath = vertex_paint_tex }; v.Variant = p;
            }
            if (IsControlledByDestruction != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IsControlledByDestruction") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IsControlledByDestruction") { IsSerialized = true, Value = (float)IsControlledByDestruction }; v.Variant = p;
            }
            if (trans_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_min") { IsSerialized = true, Value = (float)trans_min }; v.Variant = p;
            }
            if (trans_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_max") { IsSerialized = true, Value = (float)trans_max }; v.Variant = p;
            }
            if (rot_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "rot_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "rot_min") { IsSerialized = true, Value = (float)rot_min }; v.Variant = p;
            }
            if (rot_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "rot_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "rot_max") { IsSerialized = true, Value = (float)rot_max }; v.Variant = p;
            }
            if (n_frames != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_frames") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_frames") { IsSerialized = true, Value = (float)n_frames }; v.Variant = p;
            }
            if (n_pieces != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_pieces") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_pieces") { IsSerialized = true, Value = (float)n_pieces }; v.Variant = p;
            }
            if (play_time != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "play_time") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "play_time") { IsSerialized = true, Value = (float)play_time }; v.Variant = p;
            }
            if (debug_familys != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "debug_familys") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "debug_familys") { IsSerialized = true, Value = (float)debug_familys }; v.Variant = p;
            }
            if (frame_rate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "frame_rate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "frame_rate") { IsSerialized = true, Value = (float)frame_rate }; v.Variant = p;
            }
            if (YAxisUp != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "YAxisUp") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "YAxisUp") { IsSerialized = true, Value = (float)YAxisUp }; v.Variant = p;
            }
            if (z_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "z_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "z_min") { IsSerialized = true, Value = (float)z_min }; v.Variant = p;
            }
            if (ground_offset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ground_offset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ground_offset") { IsSerialized = true, Value = (float)ground_offset }; v.Variant = p;
            }
            if (GlassTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTint") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlassTint") { IsSerialized = true, DepotPath = GlassTint }; v.Variant = p;
            }
            if (TintColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor.Red }, Green = new CUInt8() { Value = (Byte)TintColor.Green }, Blue = new CUInt8() { Value = (Byte)TintColor.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor.Alpha } }; v.Variant = p;
            }
            if (TintFromVertexPaint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintFromVertexPaint") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TintFromVertexPaint") { IsSerialized = true, Value = (float)TintFromVertexPaint }; v.Variant = p;
            }
            if (FrontFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FrontFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FrontFacesReflectionPower") { IsSerialized = true, Value = (float)FrontFacesReflectionPower }; v.Variant = p;
            }
            if (BackFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BackFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BackFacesReflectionPower") { IsSerialized = true, Value = (float)BackFacesReflectionPower }; v.Variant = p;
            }
            if (IOR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IOR") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IOR") { IsSerialized = true, Value = (float)IOR }; v.Variant = p;
            }
            if (RefractionDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionDepth") { IsSerialized = true, Value = (float)RefractionDepth }; v.Variant = p;
            }
            if (FresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelBias") { IsSerialized = true, Value = (float)FresnelBias }; v.Variant = p;
            }
            if (GlassSpecularColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassSpecularColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "GlassSpecularColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)GlassSpecularColor.Red }, Green = new CUInt8() { Value = (Byte)GlassSpecularColor.Green }, Blue = new CUInt8() { Value = (Byte)GlassSpecularColor.Blue }, Alpha = new CUInt8() { Value = (Byte)GlassSpecularColor.Alpha } }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (NormalMapAffectsSpecular != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalMapAffectsSpecular") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalMapAffectsSpecular") { IsSerialized = true, Value = (float)NormalMapAffectsSpecular }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (SurfaceMetalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceMetalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceMetalness") { IsSerialized = true, Value = (float)SurfaceMetalness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (MaskOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskOpacity") { IsSerialized = true, Value = (float)MaskOpacity }; v.Variant = p;
            }
            if (GlassRoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassRoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlassRoughnessBias") { IsSerialized = true, Value = (float)GlassRoughnessBias }; v.Variant = p;
            }
            if (MaskRoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskRoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskRoughnessBias") { IsSerialized = true, Value = (float)MaskRoughnessBias }; v.Variant = p;
            }
            if (BlurRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurRadius") { IsSerialized = true, Value = (float)BlurRadius }; v.Variant = p;
            }
            if (BlurByRoughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurByRoughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurByRoughness") { IsSerialized = true, Value = (float)BlurByRoughness }; v.Variant = p;
            }
        }
    }
    public partial class _frosted_glass
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (RenderBackFaces != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RenderBackFaces") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RenderBackFaces") { IsSerialized = true, Value = (float)RenderBackFaces }; v.Variant = p;
            }
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (UvTilingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingX") { IsSerialized = true, Value = (float)UvTilingX }; v.Variant = p;
            }
            if (UvTilingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingY") { IsSerialized = true, Value = (float)UvTilingY }; v.Variant = p;
            }
            if (UvOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetX") { IsSerialized = true, Value = (float)UvOffsetX }; v.Variant = p;
            }
            if (UvOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetY") { IsSerialized = true, Value = (float)UvOffsetY }; v.Variant = p;
            }
            if (RoughnessTileAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTileAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RoughnessTileAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.W };
            }
            if (NormalTileAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTileAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NormalTileAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NormalTileAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NormalTileAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NormalTileAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NormalTileAndOffset.W };
            }
            if (GlassTintTileAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTintTileAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "GlassTintTileAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.W };
            }
            if (RoughnessBase != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBase") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBase") { IsSerialized = true, Value = (float)RoughnessBase }; v.Variant = p;
            }
            if (RoughnessAttenuation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessAttenuation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessAttenuation") { IsSerialized = true, Value = (float)RoughnessAttenuation }; v.Variant = p;
            }
            if (SurfaceOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceOpacity") { IsSerialized = true, Value = (float)SurfaceOpacity }; v.Variant = p;
            }
            if (ColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorMultiplier") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorMultiplier.Red }, Green = new CUInt8() { Value = (Byte)ColorMultiplier.Green }, Blue = new CUInt8() { Value = (Byte)ColorMultiplier.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorMultiplier.Alpha } }; v.Variant = p;
            }
            if (GlassTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTint") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlassTint") { IsSerialized = true, DepotPath = GlassTint }; v.Variant = p;
            }
            if (TintSurface != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintSurface") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintSurface") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintSurface.Red }, Green = new CUInt8() { Value = (Byte)TintSurface.Green }, Blue = new CUInt8() { Value = (Byte)TintSurface.Blue }, Alpha = new CUInt8() { Value = (Byte)TintSurface.Alpha } }; v.Variant = p;
            }
            if (GlassSpecularColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassSpecularColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "GlassSpecularColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)GlassSpecularColor.Red }, Green = new CUInt8() { Value = (Byte)GlassSpecularColor.Green }, Blue = new CUInt8() { Value = (Byte)GlassSpecularColor.Blue }, Alpha = new CUInt8() { Value = (Byte)GlassSpecularColor.Alpha } }; v.Variant = p;
            }
            if (FrontFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FrontFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FrontFacesReflectionPower") { IsSerialized = true, Value = (float)FrontFacesReflectionPower }; v.Variant = p;
            }
            if (BackFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BackFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BackFacesReflectionPower") { IsSerialized = true, Value = (float)BackFacesReflectionPower }; v.Variant = p;
            }
            if (IOR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IOR") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IOR") { IsSerialized = true, Value = (float)IOR }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (RefractionDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionDepth") { IsSerialized = true, Value = (float)RefractionDepth }; v.Variant = p;
            }
            if (FresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelBias") { IsSerialized = true, Value = (float)FresnelBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (SurfaceMetalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceMetalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceMetalness") { IsSerialized = true, Value = (float)SurfaceMetalness }; v.Variant = p;
            }
            if (SpecularPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SpecularPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SpecularPower") { IsSerialized = true, Value = (float)SpecularPower }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (NormalMapAffectsSpecular != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalMapAffectsSpecular") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalMapAffectsSpecular") { IsSerialized = true, Value = (float)NormalMapAffectsSpecular }; v.Variant = p;
            }
            if (BlurRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurRadius") { IsSerialized = true, Value = (float)BlurRadius }; v.Variant = p;
            }
            if (BlurRoughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurRoughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurRoughness") { IsSerialized = true, Value = (float)BlurRoughness }; v.Variant = p;
            }
            if (MaskOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskOpacity") { IsSerialized = true, Value = (float)MaskOpacity }; v.Variant = p;
            }
            if (MaskUseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskUseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskUseAlpha") { IsSerialized = true, Value = (float)MaskUseAlpha }; v.Variant = p;
            }
            if (MaskAddSurface != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAddSurface") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskAddSurface") { IsSerialized = true, Value = (float)MaskAddSurface }; v.Variant = p;
            }
            if (MaskAddOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAddOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskAddOpacity") { IsSerialized = true, Value = (float)MaskAddOpacity }; v.Variant = p;
            }
            if (MaskAddRoughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAddRoughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskAddRoughness") { IsSerialized = true, Value = (float)MaskAddRoughness }; v.Variant = p;
            }
        }
    }
    public partial class _frosted_glass_curtain
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (MaskOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskOpacity") { IsSerialized = true, Value = (float)MaskOpacity }; v.Variant = p;
            }
            if (RoughnessDirty != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessDirty") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessDirty") { IsSerialized = true, Value = (float)RoughnessDirty }; v.Variant = p;
            }
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (ColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorMultiplier") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorMultiplier.Red }, Green = new CUInt8() { Value = (Byte)ColorMultiplier.Green }, Blue = new CUInt8() { Value = (Byte)ColorMultiplier.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorMultiplier.Alpha } }; v.Variant = p;
            }
            if (TintColorAttenuation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColorAttenuation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TintColorAttenuation") { IsSerialized = true, Value = (float)TintColorAttenuation }; v.Variant = p;
            }
            if (RoughnessAttenuation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessAttenuation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessAttenuation") { IsSerialized = true, Value = (float)RoughnessAttenuation }; v.Variant = p;
            }
            if (FrontFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FrontFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FrontFacesReflectionPower") { IsSerialized = true, Value = (float)FrontFacesReflectionPower }; v.Variant = p;
            }
            if (BackFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BackFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BackFacesReflectionPower") { IsSerialized = true, Value = (float)BackFacesReflectionPower }; v.Variant = p;
            }
            if (IOR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IOR") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IOR") { IsSerialized = true, Value = (float)IOR }; v.Variant = p;
            }
            if (blurRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "blurRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "blurRadius") { IsSerialized = true, Value = (float)blurRadius }; v.Variant = p;
            }
            if (diffuseStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "diffuseStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "diffuseStrength") { IsSerialized = true, Value = (float)diffuseStrength }; v.Variant = p;
            }
            if (SpecularPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SpecularPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SpecularPower") { IsSerialized = true, Value = (float)SpecularPower }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
        }
    }
    public partial class _glass
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (OpacityBackFace != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OpacityBackFace") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OpacityBackFace") { IsSerialized = true, Value = (float)OpacityBackFace }; v.Variant = p;
            }
            if (UvTilingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingX") { IsSerialized = true, Value = (float)UvTilingX }; v.Variant = p;
            }
            if (UvTilingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingY") { IsSerialized = true, Value = (float)UvTilingY }; v.Variant = p;
            }
            if (UvOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetX") { IsSerialized = true, Value = (float)UvOffsetX }; v.Variant = p;
            }
            if (UvOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetY") { IsSerialized = true, Value = (float)UvOffsetY }; v.Variant = p;
            }
            if (RoughnessTileAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTileAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RoughnessTileAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.W };
            }
            if (NormalTileAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTileAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NormalTileAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NormalTileAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NormalTileAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NormalTileAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NormalTileAndOffset.W };
            }
            if (GlassTintTileAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTintTileAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "GlassTintTileAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.W };
            }
            if (TintColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor.Red }, Green = new CUInt8() { Value = (Byte)TintColor.Green }, Blue = new CUInt8() { Value = (Byte)TintColor.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor.Alpha } }; v.Variant = p;
            }
            if (GlassTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTint") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlassTint") { IsSerialized = true, DepotPath = GlassTint }; v.Variant = p;
            }
            if (TintFromVertexPaint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintFromVertexPaint") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TintFromVertexPaint") { IsSerialized = true, Value = (float)TintFromVertexPaint }; v.Variant = p;
            }
            if (FrontFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FrontFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FrontFacesReflectionPower") { IsSerialized = true, Value = (float)FrontFacesReflectionPower }; v.Variant = p;
            }
            if (BackFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BackFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BackFacesReflectionPower") { IsSerialized = true, Value = (float)BackFacesReflectionPower }; v.Variant = p;
            }
            if (IOR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IOR") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IOR") { IsSerialized = true, Value = (float)IOR }; v.Variant = p;
            }
            if (RefractionDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionDepth") { IsSerialized = true, Value = (float)RefractionDepth }; v.Variant = p;
            }
            if (FresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelBias") { IsSerialized = true, Value = (float)FresnelBias }; v.Variant = p;
            }
            if (GlassSpecularColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassSpecularColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "GlassSpecularColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)GlassSpecularColor.Red }, Green = new CUInt8() { Value = (Byte)GlassSpecularColor.Green }, Blue = new CUInt8() { Value = (Byte)GlassSpecularColor.Blue }, Alpha = new CUInt8() { Value = (Byte)GlassSpecularColor.Alpha } }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (NormalMapAffectsSpecular != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalMapAffectsSpecular") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalMapAffectsSpecular") { IsSerialized = true, Value = (float)NormalMapAffectsSpecular }; v.Variant = p;
            }
            if (SurfaceMetalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceMetalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceMetalness") { IsSerialized = true, Value = (float)SurfaceMetalness }; v.Variant = p;
            }
            if (MaskOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskOpacity") { IsSerialized = true, Value = (float)MaskOpacity }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (GlassRoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassRoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlassRoughnessBias") { IsSerialized = true, Value = (float)GlassRoughnessBias }; v.Variant = p;
            }
            if (MaskRoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskRoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskRoughnessBias") { IsSerialized = true, Value = (float)MaskRoughnessBias }; v.Variant = p;
            }
            if (BlurRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurRadius") { IsSerialized = true, Value = (float)BlurRadius }; v.Variant = p;
            }
            if (BlurByRoughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurByRoughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurByRoughness") { IsSerialized = true, Value = (float)BlurByRoughness }; v.Variant = p;
            }
        }
    }
    public partial class _glass_blendable
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VectorField != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField") { IsSerialized = true, DepotPath = VectorField }; v.Variant = p;
            }
            if (FadeOutDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutDistance") { IsSerialized = true, Value = (float)FadeOutDistance }; v.Variant = p;
            }
            if (FadeOutOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutOffset") { IsSerialized = true, Value = (float)FadeOutOffset }; v.Variant = p;
            }
            if (GlitchChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchChance") { IsSerialized = true, Value = (float)GlitchChance }; v.Variant = p;
            }
            if (GlitchOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchOffset") { IsSerialized = true, Value = (float)GlitchOffset }; v.Variant = p;
            }
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (OpacityBackFace != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OpacityBackFace") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OpacityBackFace") { IsSerialized = true, Value = (float)OpacityBackFace }; v.Variant = p;
            }
            if (FresnelColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "FresnelColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)FresnelColor.Red }, Green = new CUInt8() { Value = (Byte)FresnelColor.Green }, Blue = new CUInt8() { Value = (Byte)FresnelColor.Blue }, Alpha = new CUInt8() { Value = (Byte)FresnelColor.Alpha } }; v.Variant = p;
            }
            if (FresnelColorIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColorIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelColorIntensity") { IsSerialized = true, Value = (float)FresnelColorIntensity }; v.Variant = p;
            }
            if (FresnelExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelExponent") { IsSerialized = true, Value = (float)FresnelExponent }; v.Variant = p;
            }
            if (GlassTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTint") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlassTint") { IsSerialized = true, DepotPath = GlassTint }; v.Variant = p;
            }
            if (TintColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor.Red }, Green = new CUInt8() { Value = (Byte)TintColor.Green }, Blue = new CUInt8() { Value = (Byte)TintColor.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor.Alpha } }; v.Variant = p;
            }
            if (TintFromVertexPaint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintFromVertexPaint") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TintFromVertexPaint") { IsSerialized = true, Value = (float)TintFromVertexPaint }; v.Variant = p;
            }
            if (FrontFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FrontFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FrontFacesReflectionPower") { IsSerialized = true, Value = (float)FrontFacesReflectionPower }; v.Variant = p;
            }
            if (BackFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BackFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BackFacesReflectionPower") { IsSerialized = true, Value = (float)BackFacesReflectionPower }; v.Variant = p;
            }
            if (IOR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IOR") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IOR") { IsSerialized = true, Value = (float)IOR }; v.Variant = p;
            }
            if (RefractionDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionDepth") { IsSerialized = true, Value = (float)RefractionDepth }; v.Variant = p;
            }
            if (FresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelBias") { IsSerialized = true, Value = (float)FresnelBias }; v.Variant = p;
            }
            if (GlassSpecularColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassSpecularColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "GlassSpecularColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)GlassSpecularColor.Red }, Green = new CUInt8() { Value = (Byte)GlassSpecularColor.Green }, Blue = new CUInt8() { Value = (Byte)GlassSpecularColor.Blue }, Alpha = new CUInt8() { Value = (Byte)GlassSpecularColor.Alpha } }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (NormalMapAffectsSpecular != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalMapAffectsSpecular") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalMapAffectsSpecular") { IsSerialized = true, Value = (float)NormalMapAffectsSpecular }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (SurfaceMetalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceMetalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceMetalness") { IsSerialized = true, Value = (float)SurfaceMetalness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (MaskOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskOpacity") { IsSerialized = true, Value = (float)MaskOpacity }; v.Variant = p;
            }
            if (GlassRoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassRoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlassRoughnessBias") { IsSerialized = true, Value = (float)GlassRoughnessBias }; v.Variant = p;
            }
            if (MaskRoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskRoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskRoughnessBias") { IsSerialized = true, Value = (float)MaskRoughnessBias }; v.Variant = p;
            }
            if (BlurRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurRadius") { IsSerialized = true, Value = (float)BlurRadius }; v.Variant = p;
            }
            if (BlurByRoughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurByRoughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurByRoughness") { IsSerialized = true, Value = (float)BlurByRoughness }; v.Variant = p;
            }
        }
    }
    public partial class _glass_cracked_edge
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (AlphaScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaScale") { IsSerialized = true, Value = (float)AlphaScale }; v.Variant = p;
            }
            if (UseAlphaFromSkinning != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseAlphaFromSkinning") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseAlphaFromSkinning") { IsSerialized = true, Value = (float)UseAlphaFromSkinning }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
        }
    }
    public partial class _glass_deferred
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (UvTilingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingX") { IsSerialized = true, Value = (float)UvTilingX }; v.Variant = p;
            }
            if (UvTilingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingY") { IsSerialized = true, Value = (float)UvTilingY }; v.Variant = p;
            }
            if (UvOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetX") { IsSerialized = true, Value = (float)UvOffsetX }; v.Variant = p;
            }
            if (UvOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetY") { IsSerialized = true, Value = (float)UvOffsetY }; v.Variant = p;
            }
            if (NormalTileAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTileAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NormalTileAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NormalTileAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NormalTileAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NormalTileAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NormalTileAndOffset.W };
            }
            if (GlassTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTint") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlassTint") { IsSerialized = true, DepotPath = GlassTint }; v.Variant = p;
            }
            if (TintColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor.Red }, Green = new CUInt8() { Value = (Byte)TintColor.Green }, Blue = new CUInt8() { Value = (Byte)TintColor.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor.Alpha } }; v.Variant = p;
            }
            if (TintFromVertexPaint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintFromVertexPaint") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TintFromVertexPaint") { IsSerialized = true, Value = (float)TintFromVertexPaint }; v.Variant = p;
            }
            if (TintColorAttenuation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColorAttenuation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TintColorAttenuation") { IsSerialized = true, Value = (float)TintColorAttenuation }; v.Variant = p;
            }
            if (FresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelBias") { IsSerialized = true, Value = (float)FresnelBias }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (SurfaceMetalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceMetalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceMetalness") { IsSerialized = true, Value = (float)SurfaceMetalness }; v.Variant = p;
            }
            if (GlassMetalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassMetalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlassMetalness") { IsSerialized = true, Value = (float)GlassMetalness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (MaskOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskOpacity") { IsSerialized = true, Value = (float)MaskOpacity }; v.Variant = p;
            }
            if (MaskRoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskRoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskRoughnessBias") { IsSerialized = true, Value = (float)MaskRoughnessBias }; v.Variant = p;
            }
            if (Reflection != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Reflection") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Reflection") { IsSerialized = true, DepotPath = Reflection }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
        }
    }
    public partial class _glass_scope
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (UvTilingOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "UvTilingOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)UvTilingOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)UvTilingOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)UvTilingOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)UvTilingOffset.W };
            }
            if (LensRoughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LensRoughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LensRoughness") { IsSerialized = true, Value = (float)LensRoughness }; v.Variant = p;
            }
            if (SurfaceMetalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceMetalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceMetalness") { IsSerialized = true, Value = (float)SurfaceMetalness }; v.Variant = p;
            }
            if (LensMetalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LensMetalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LensMetalness") { IsSerialized = true, Value = (float)LensMetalness }; v.Variant = p;
            }
            if (GlassTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTint") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlassTint") { IsSerialized = true, DepotPath = GlassTint }; v.Variant = p;
            }
            if (GlassTintMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTintMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "GlassTintMultiplier") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)GlassTintMultiplier.Red }, Green = new CUInt8() { Value = (Byte)GlassTintMultiplier.Green }, Blue = new CUInt8() { Value = (Byte)GlassTintMultiplier.Blue }, Alpha = new CUInt8() { Value = (Byte)GlassTintMultiplier.Alpha } }; v.Variant = p;
            }
            if (EmissiveTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveTint") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveTint") { IsSerialized = true, Value = (float)EmissiveTint }; v.Variant = p;
            }
            if (LensSpecularColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LensSpecularColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "LensSpecularColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)LensSpecularColor.Red }, Green = new CUInt8() { Value = (Byte)LensSpecularColor.Green }, Blue = new CUInt8() { Value = (Byte)LensSpecularColor.Blue }, Alpha = new CUInt8() { Value = (Byte)LensSpecularColor.Alpha } }; v.Variant = p;
            }
            if (LensReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LensReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LensReflectionPower") { IsSerialized = true, Value = (float)LensReflectionPower }; v.Variant = p;
            }
            if (FresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelBias") { IsSerialized = true, Value = (float)FresnelBias }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (SpecularPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SpecularPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SpecularPower") { IsSerialized = true, Value = (float)SpecularPower }; v.Variant = p;
            }
            if (MaskOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskOpacity") { IsSerialized = true, Value = (float)MaskOpacity }; v.Variant = p;
            }
            if (UseMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseMask") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "UseMask") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)UseMask.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)UseMask.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)UseMask.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)UseMask.W };
            }
            if (ScopeMaskFarDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScopeMaskFarDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScopeMaskFarDistance") { IsSerialized = true, Value = (float)ScopeMaskFarDistance }; v.Variant = p;
            }
            if (ScopeMaskClose != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScopeMaskClose") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ScopeMaskClose") { IsSerialized = true, DepotPath = ScopeMaskClose }; v.Variant = p;
            }
            if (ScopeMaskFar != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScopeMaskFar") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ScopeMaskFar") { IsSerialized = true, DepotPath = ScopeMaskFar }; v.Variant = p;
            }
            if (LensBulge != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LensBulge") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "LensBulge") { IsSerialized = true, DepotPath = LensBulge }; v.Variant = p;
            }
            if (ScopeInside != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScopeInside") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ScopeInside") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ScopeInside.Red }, Green = new CUInt8() { Value = (Byte)ScopeInside.Green }, Blue = new CUInt8() { Value = (Byte)ScopeInside.Blue }, Alpha = new CUInt8() { Value = (Byte)ScopeInside.Alpha } }; v.Variant = p;
            }
            if (DistortionStrenght != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortionStrenght") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortionStrenght") { IsSerialized = true, Value = (float)DistortionStrenght }; v.Variant = p;
            }
            if (LensBulgeStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LensBulgeStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LensBulgeStrength") { IsSerialized = true, Value = (float)LensBulgeStrength }; v.Variant = p;
            }
            if (AberrationStrenght != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AberrationStrenght") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AberrationStrenght") { IsSerialized = true, Value = (float)AberrationStrenght }; v.Variant = p;
            }
            if (SphereMaskCloseRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SphereMaskCloseRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SphereMaskCloseRadius") { IsSerialized = true, Value = (float)SphereMaskCloseRadius }; v.Variant = p;
            }
            if (SphereMaskCloseHardness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SphereMaskCloseHardness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SphereMaskCloseHardness") { IsSerialized = true, Value = (float)SphereMaskCloseHardness }; v.Variant = p;
            }
            if (LensBulgeRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LensBulgeRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LensBulgeRadius") { IsSerialized = true, Value = (float)LensBulgeRadius }; v.Variant = p;
            }
            if (LensBulgeHardness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LensBulgeHardness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LensBulgeHardness") { IsSerialized = true, Value = (float)LensBulgeHardness }; v.Variant = p;
            }
            if (SphereMaskFarRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SphereMaskFarRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SphereMaskFarRadius") { IsSerialized = true, Value = (float)SphereMaskFarRadius }; v.Variant = p;
            }
            if (SphereMaskFarHardness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SphereMaskFarHardness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SphereMaskFarHardness") { IsSerialized = true, Value = (float)SphereMaskFarHardness }; v.Variant = p;
            }
            if (SphereMaskDistortionRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SphereMaskDistortionRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SphereMaskDistortionRadius") { IsSerialized = true, Value = (float)SphereMaskDistortionRadius }; v.Variant = p;
            }
            if (SphereMaskDistortionHardness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SphereMaskDistortionHardness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SphereMaskDistortionHardness") { IsSerialized = true, Value = (float)SphereMaskDistortionHardness }; v.Variant = p;
            }
            if (EyeRelief != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EyeRelief") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "EyeRelief") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)EyeRelief.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)EyeRelief.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)EyeRelief.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)EyeRelief.W };
            }
        }
    }
    public partial class _glass_window_rain
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (UvTilingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingX") { IsSerialized = true, Value = (float)UvTilingX }; v.Variant = p;
            }
            if (UvTilingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingY") { IsSerialized = true, Value = (float)UvTilingY }; v.Variant = p;
            }
            if (UvOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetX") { IsSerialized = true, Value = (float)UvOffsetX }; v.Variant = p;
            }
            if (UvOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetY") { IsSerialized = true, Value = (float)UvOffsetY }; v.Variant = p;
            }
            if (RoughnessTileAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTileAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RoughnessTileAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.W };
            }
            if (GlassTintTileAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTintTileAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "GlassTintTileAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.W };
            }
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (OpacityBackFace != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OpacityBackFace") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OpacityBackFace") { IsSerialized = true, Value = (float)OpacityBackFace }; v.Variant = p;
            }
            if (GlassTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTint") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlassTint") { IsSerialized = true, DepotPath = GlassTint }; v.Variant = p;
            }
            if (TintColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor.Red }, Green = new CUInt8() { Value = (Byte)TintColor.Green }, Blue = new CUInt8() { Value = (Byte)TintColor.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor.Alpha } }; v.Variant = p;
            }
            if (TintSurface != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintSurface") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintSurface") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintSurface.Red }, Green = new CUInt8() { Value = (Byte)TintSurface.Green }, Blue = new CUInt8() { Value = (Byte)TintSurface.Blue }, Alpha = new CUInt8() { Value = (Byte)TintSurface.Alpha } }; v.Variant = p;
            }
            if (FrontFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FrontFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FrontFacesReflectionPower") { IsSerialized = true, Value = (float)FrontFacesReflectionPower }; v.Variant = p;
            }
            if (BackFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BackFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BackFacesReflectionPower") { IsSerialized = true, Value = (float)BackFacesReflectionPower }; v.Variant = p;
            }
            if (FresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelBias") { IsSerialized = true, Value = (float)FresnelBias }; v.Variant = p;
            }
            if (GlassSpecularColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassSpecularColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "GlassSpecularColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)GlassSpecularColor.Red }, Green = new CUInt8() { Value = (Byte)GlassSpecularColor.Green }, Blue = new CUInt8() { Value = (Byte)GlassSpecularColor.Blue }, Alpha = new CUInt8() { Value = (Byte)GlassSpecularColor.Alpha } }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (SurfaceMetalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceMetalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceMetalness") { IsSerialized = true, Value = (float)SurfaceMetalness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (MaskOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskOpacity") { IsSerialized = true, Value = (float)MaskOpacity }; v.Variant = p;
            }
            if (GlassRoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassRoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlassRoughnessBias") { IsSerialized = true, Value = (float)GlassRoughnessBias }; v.Variant = p;
            }
            if (MaskRoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskRoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskRoughnessBias") { IsSerialized = true, Value = (float)MaskRoughnessBias }; v.Variant = p;
            }
            if (RainTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RainTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RainTiling") { IsSerialized = true, Value = (float)RainTiling }; v.Variant = p;
            }
            if (FlowTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlowTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlowTiling") { IsSerialized = true, Value = (float)FlowTiling }; v.Variant = p;
            }
            if (DotsNormalTxt != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsNormalTxt") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DotsNormalTxt") { IsSerialized = true, DepotPath = DotsNormalTxt }; v.Variant = p;
            }
            if (DotsTxt != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsTxt") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DotsTxt") { IsSerialized = true, DepotPath = DotsTxt }; v.Variant = p;
            }
            if (FlowTxt != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlowTxt") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FlowTxt") { IsSerialized = true, DepotPath = FlowTxt }; v.Variant = p;
            }
        }
    }
    public partial class _hair
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Strand_Gradient != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Strand_Gradient") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Strand_Gradient") { IsSerialized = true, DepotPath = Strand_Gradient }; v.Variant = p;
            }
            if (Animation_AmplitudeScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Animation_AmplitudeScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Animation_AmplitudeScale") { IsSerialized = true, Value = (float)Animation_AmplitudeScale }; v.Variant = p;
            }
            if (Animation_PeriodScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Animation_PeriodScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Animation_PeriodScale") { IsSerialized = true, Value = (float)Animation_PeriodScale }; v.Variant = p;
            }
            if (Strand_ID != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Strand_ID") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Strand_ID") { IsSerialized = true, DepotPath = Strand_ID }; v.Variant = p;
            }
            if (Strand_Alpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Strand_Alpha") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Strand_Alpha") { IsSerialized = true, DepotPath = Strand_Alpha }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (AlphaCutoff != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaCutoff") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaCutoff") { IsSerialized = true, Value = (float)AlphaCutoff }; v.Variant = p;
            }
            if (Flow != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Flow") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Flow") { IsSerialized = true, DepotPath = Flow }; v.Variant = p;
            }
            if (FlowStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlowStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlowStrength") { IsSerialized = true, Value = (float)FlowStrength }; v.Variant = p;
            }
            if (VertexColorStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexColorStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexColorStrength") { IsSerialized = true, Value = (float)VertexColorStrength }; v.Variant = p;
            }
            if (Scattering != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Scattering") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Scattering") { IsSerialized = true, Value = (float)Scattering }; v.Variant = p;
            }
            if (ShadowStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShadowStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ShadowStrength") { IsSerialized = true, Value = (float)ShadowStrength }; v.Variant = p;
            }
            if (ShadowMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShadowMin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ShadowMin") { IsSerialized = true, Value = (float)ShadowMin }; v.Variant = p;
            }
            if (ShadowMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShadowMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ShadowMax") { IsSerialized = true, Value = (float)ShadowMax }; v.Variant = p;
            }
            if (ShadowRoughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShadowRoughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ShadowRoughness") { IsSerialized = true, Value = (float)ShadowRoughness }; v.Variant = p;
            }
            if (DebugHairColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugHairColor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DebugHairColor") { IsSerialized = true, Value = (float)DebugHairColor }; v.Variant = p;
            }
            if (HairProfile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HairProfile") { IsSerialized = true }; m.Add(v);
                var p = new rRef<CHairProfile>(cr2w, v, "HairProfile") { IsSerialized = true, DepotPath = HairProfile }; v.Variant = p;
            }
        }
    }
    public partial class _hair_blendable
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VectorField != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField") { IsSerialized = true, DepotPath = VectorField }; v.Variant = p;
            }
            if (FadeOutDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutDistance") { IsSerialized = true, Value = (float)FadeOutDistance }; v.Variant = p;
            }
            if (FadeOutOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutOffset") { IsSerialized = true, Value = (float)FadeOutOffset }; v.Variant = p;
            }
            if (GlitchChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchChance") { IsSerialized = true, Value = (float)GlitchChance }; v.Variant = p;
            }
            if (GlitchOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchOffset") { IsSerialized = true, Value = (float)GlitchOffset }; v.Variant = p;
            }
            if (Strand_Gradient != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Strand_Gradient") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Strand_Gradient") { IsSerialized = true, DepotPath = Strand_Gradient }; v.Variant = p;
            }
            if (Animation_AmplitudeScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Animation_AmplitudeScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Animation_AmplitudeScale") { IsSerialized = true, Value = (float)Animation_AmplitudeScale }; v.Variant = p;
            }
            if (Animation_PeriodScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Animation_PeriodScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Animation_PeriodScale") { IsSerialized = true, Value = (float)Animation_PeriodScale }; v.Variant = p;
            }
            if (FresnelColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "FresnelColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)FresnelColor.Red }, Green = new CUInt8() { Value = (Byte)FresnelColor.Green }, Blue = new CUInt8() { Value = (Byte)FresnelColor.Blue }, Alpha = new CUInt8() { Value = (Byte)FresnelColor.Alpha } }; v.Variant = p;
            }
            if (FresnelColorIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColorIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelColorIntensity") { IsSerialized = true, Value = (float)FresnelColorIntensity }; v.Variant = p;
            }
            if (FresnelExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelExponent") { IsSerialized = true, Value = (float)FresnelExponent }; v.Variant = p;
            }
            if (Strand_ID != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Strand_ID") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Strand_ID") { IsSerialized = true, DepotPath = Strand_ID }; v.Variant = p;
            }
            if (Strand_Alpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Strand_Alpha") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Strand_Alpha") { IsSerialized = true, DepotPath = Strand_Alpha }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (AlphaCutoff != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaCutoff") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaCutoff") { IsSerialized = true, Value = (float)AlphaCutoff }; v.Variant = p;
            }
            if (Flow != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Flow") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Flow") { IsSerialized = true, DepotPath = Flow }; v.Variant = p;
            }
            if (FlowStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlowStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlowStrength") { IsSerialized = true, Value = (float)FlowStrength }; v.Variant = p;
            }
            if (VertexColorStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexColorStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexColorStrength") { IsSerialized = true, Value = (float)VertexColorStrength }; v.Variant = p;
            }
            if (Scattering != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Scattering") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Scattering") { IsSerialized = true, Value = (float)Scattering }; v.Variant = p;
            }
            if (ShadowStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShadowStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ShadowStrength") { IsSerialized = true, Value = (float)ShadowStrength }; v.Variant = p;
            }
            if (ShadowMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShadowMin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ShadowMin") { IsSerialized = true, Value = (float)ShadowMin }; v.Variant = p;
            }
            if (ShadowMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShadowMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ShadowMax") { IsSerialized = true, Value = (float)ShadowMax }; v.Variant = p;
            }
            if (ShadowRoughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShadowRoughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ShadowRoughness") { IsSerialized = true, Value = (float)ShadowRoughness }; v.Variant = p;
            }
            if (DebugHairColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugHairColor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DebugHairColor") { IsSerialized = true, Value = (float)DebugHairColor }; v.Variant = p;
            }
            if (HairProfile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HairProfile") { IsSerialized = true }; m.Add(v);
                var p = new rRef<CHairProfile>(cr2w, v, "HairProfile") { IsSerialized = true, DepotPath = HairProfile }; v.Variant = p;
            }
        }
    }
    public partial class _hair_proxy
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Albedo != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Albedo") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Albedo") { IsSerialized = true, DepotPath = Albedo }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Scattering != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Scattering") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Scattering") { IsSerialized = true, Value = (float)Scattering }; v.Variant = p;
            }
        }
    }
    public partial class _ice_fluid_mov
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (WaveIdleNormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveIdleNormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaveIdleNormalStrength") { IsSerialized = true, Value = (float)WaveIdleNormalStrength }; v.Variant = p;
            }
            if (WaveIdleTilingAndSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveIdleTilingAndSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "WaveIdleTilingAndSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)WaveIdleTilingAndSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)WaveIdleTilingAndSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)WaveIdleTilingAndSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)WaveIdleTilingAndSpeed.W };
            }
            if (DebugTimeOverride != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugTimeOverride") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DebugTimeOverride") { IsSerialized = true, Value = (float)DebugTimeOverride }; v.Variant = p;
            }
            if (n_frames != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_frames") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_frames") { IsSerialized = true, Value = (float)n_frames }; v.Variant = p;
            }
            if (frame_rate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "frame_rate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "frame_rate") { IsSerialized = true, Value = (float)frame_rate }; v.Variant = p;
            }
            if (SimulationAtlasFrameCountX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SimulationAtlasFrameCountX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SimulationAtlasFrameCountX") { IsSerialized = true, Value = (float)SimulationAtlasFrameCountX }; v.Variant = p;
            }
            if (SimulationAtlasFrameCountY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SimulationAtlasFrameCountY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SimulationAtlasFrameCountY") { IsSerialized = true, Value = (float)SimulationAtlasFrameCountY }; v.Variant = p;
            }
            if (SimulationAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SimulationAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SimulationAtlas") { IsSerialized = true, DepotPath = SimulationAtlas }; v.Variant = p;
            }
            if (WaveIdleMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveIdleMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WaveIdleMap") { IsSerialized = true, DepotPath = WaveIdleMap }; v.Variant = p;
            }
            if (WaveIdleHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveIdleHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaveIdleHeight") { IsSerialized = true, Value = (float)WaveIdleHeight }; v.Variant = p;
            }
            if (HeightMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeightMin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HeightMin") { IsSerialized = true, Value = (float)HeightMin }; v.Variant = p;
            }
            if (HeightMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeightMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HeightMax") { IsSerialized = true, Value = (float)HeightMax }; v.Variant = p;
            }
            if (WaterRoughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaterRoughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaterRoughness") { IsSerialized = true, Value = (float)WaterRoughness }; v.Variant = p;
            }
            if (WaterSpecF0 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaterSpecF0") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaterSpecF0") { IsSerialized = true, Value = (float)WaterSpecF0 }; v.Variant = p;
            }
            if (WaterSpecF90 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaterSpecF90") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaterSpecF90") { IsSerialized = true, Value = (float)WaterSpecF90 }; v.Variant = p;
            }
            if (WaterColorShallow != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaterColorShallow") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "WaterColorShallow") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)WaterColorShallow.Red }, Green = new CUInt8() { Value = (Byte)WaterColorShallow.Green }, Blue = new CUInt8() { Value = (Byte)WaterColorShallow.Blue }, Alpha = new CUInt8() { Value = (Byte)WaterColorShallow.Alpha } }; v.Variant = p;
            }
            if (WaterColorDeep != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaterColorDeep") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "WaterColorDeep") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)WaterColorDeep.Red }, Green = new CUInt8() { Value = (Byte)WaterColorDeep.Green }, Blue = new CUInt8() { Value = (Byte)WaterColorDeep.Blue }, Alpha = new CUInt8() { Value = (Byte)WaterColorDeep.Alpha } }; v.Variant = p;
            }
            if (WaveColor0 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveColor0") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "WaveColor0") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)WaveColor0.Red }, Green = new CUInt8() { Value = (Byte)WaveColor0.Green }, Blue = new CUInt8() { Value = (Byte)WaveColor0.Blue }, Alpha = new CUInt8() { Value = (Byte)WaveColor0.Alpha } }; v.Variant = p;
            }
            if (WaveColor1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveColor1") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "WaveColor1") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)WaveColor1.Red }, Green = new CUInt8() { Value = (Byte)WaveColor1.Green }, Blue = new CUInt8() { Value = (Byte)WaveColor1.Blue }, Alpha = new CUInt8() { Value = (Byte)WaveColor1.Alpha } }; v.Variant = p;
            }
            if (WaveNoiseTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveNoiseTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaveNoiseTiling") { IsSerialized = true, Value = (float)WaveNoiseTiling }; v.Variant = p;
            }
            if (WaveNoiseContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveNoiseContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaveNoiseContrast") { IsSerialized = true, Value = (float)WaveNoiseContrast }; v.Variant = p;
            }
            if (WaveNoiseContrastOut != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveNoiseContrastOut") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaveNoiseContrastOut") { IsSerialized = true, Value = (float)WaveNoiseContrastOut }; v.Variant = p;
            }
            if (RefractionStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionStrength") { IsSerialized = true, Value = (float)RefractionStrength }; v.Variant = p;
            }
            if (IceColor1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IceColor1") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "IceColor1") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)IceColor1.Red }, Green = new CUInt8() { Value = (Byte)IceColor1.Green }, Blue = new CUInt8() { Value = (Byte)IceColor1.Blue }, Alpha = new CUInt8() { Value = (Byte)IceColor1.Alpha } }; v.Variant = p;
            }
            if (IceColor2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IceColor2") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "IceColor2") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)IceColor2.Red }, Green = new CUInt8() { Value = (Byte)IceColor2.Green }, Blue = new CUInt8() { Value = (Byte)IceColor2.Blue }, Alpha = new CUInt8() { Value = (Byte)IceColor2.Alpha } }; v.Variant = p;
            }
            if (IceTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IceTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IceTiling") { IsSerialized = true, Value = (float)IceTiling }; v.Variant = p;
            }
            if (UVRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVRatio") { IsSerialized = true, Value = (float)UVRatio }; v.Variant = p;
            }
            if (IceDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IceDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IceDepth") { IsSerialized = true, Value = (float)IceDepth }; v.Variant = p;
            }
            if (IceNormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IceNormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IceNormalStrength") { IsSerialized = true, Value = (float)IceNormalStrength }; v.Variant = p;
            }
            if (BloodColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BloodColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BloodColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BloodColor.Red }, Green = new CUInt8() { Value = (Byte)BloodColor.Green }, Blue = new CUInt8() { Value = (Byte)BloodColor.Blue }, Alpha = new CUInt8() { Value = (Byte)BloodColor.Alpha } }; v.Variant = p;
            }
            if (BloodFadeStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BloodFadeStart") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BloodFadeStart") { IsSerialized = true, Value = (float)BloodFadeStart }; v.Variant = p;
            }
            if (BloodFadeEnd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BloodFadeEnd") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BloodFadeEnd") { IsSerialized = true, Value = (float)BloodFadeEnd }; v.Variant = p;
            }
            if (WaveNoiseMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveNoiseMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WaveNoiseMap") { IsSerialized = true, DepotPath = WaveNoiseMap }; v.Variant = p;
            }
            if (IceMasksMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IceMasksMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "IceMasksMap") { IsSerialized = true, DepotPath = IceMasksMap }; v.Variant = p;
            }
            if (IceNormalMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IceNormalMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "IceNormalMap") { IsSerialized = true, DepotPath = IceNormalMap }; v.Variant = p;
            }
        }
    }
    public partial class _ice_ver_mov_translucent
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (vertex_paint_tex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "vertex_paint_tex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "vertex_paint_tex") { IsSerialized = true, DepotPath = vertex_paint_tex }; v.Variant = p;
            }
            if (trans_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_min") { IsSerialized = true, Value = (float)trans_min }; v.Variant = p;
            }
            if (trans_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_max") { IsSerialized = true, Value = (float)trans_max }; v.Variant = p;
            }
            if (rot_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "rot_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "rot_min") { IsSerialized = true, Value = (float)rot_min }; v.Variant = p;
            }
            if (rot_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "rot_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "rot_max") { IsSerialized = true, Value = (float)rot_max }; v.Variant = p;
            }
            if (n_frames != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_frames") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_frames") { IsSerialized = true, Value = (float)n_frames }; v.Variant = p;
            }
            if (n_pieces != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_pieces") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_pieces") { IsSerialized = true, Value = (float)n_pieces }; v.Variant = p;
            }
            if (play_time != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "play_time") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "play_time") { IsSerialized = true, Value = (float)play_time }; v.Variant = p;
            }
            if (debug_familys != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "debug_familys") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "debug_familys") { IsSerialized = true, Value = (float)debug_familys }; v.Variant = p;
            }
            if (frame_rate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "frame_rate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "frame_rate") { IsSerialized = true, Value = (float)frame_rate }; v.Variant = p;
            }
            if (WaveIdleMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveIdleMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WaveIdleMap") { IsSerialized = true, DepotPath = WaveIdleMap }; v.Variant = p;
            }
            if (WaveIdleHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveIdleHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaveIdleHeight") { IsSerialized = true, Value = (float)WaveIdleHeight }; v.Variant = p;
            }
            if (WaveIdleTilingAndSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaveIdleTilingAndSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "WaveIdleTilingAndSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)WaveIdleTilingAndSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)WaveIdleTilingAndSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)WaveIdleTilingAndSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)WaveIdleTilingAndSpeed.W };
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (RefractionTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionTint") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "RefractionTint") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)RefractionTint.Red }, Green = new CUInt8() { Value = (Byte)RefractionTint.Green }, Blue = new CUInt8() { Value = (Byte)RefractionTint.Blue }, Alpha = new CUInt8() { Value = (Byte)RefractionTint.Alpha } }; v.Variant = p;
            }
            if (IOR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IOR") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IOR") { IsSerialized = true, Value = (float)IOR }; v.Variant = p;
            }
        }
    }
    public partial class _lights_interactive
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
            if (Zone0EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Zone0EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Zone0EmissiveEV") { IsSerialized = true, Value = (float)Zone0EmissiveEV }; v.Variant = p;
            }
            if (Zone1EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Zone1EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Zone1EmissiveEV") { IsSerialized = true, Value = (float)Zone1EmissiveEV }; v.Variant = p;
            }
            if (Zone2EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Zone2EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Zone2EmissiveEV") { IsSerialized = true, Value = (float)Zone2EmissiveEV }; v.Variant = p;
            }
            if (Zone3EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Zone3EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Zone3EmissiveEV") { IsSerialized = true, Value = (float)Zone3EmissiveEV }; v.Variant = p;
            }
            if (DebugLightsIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugLightsIntensity") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DebugLightsIntensity") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DebugLightsIntensity.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DebugLightsIntensity.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DebugLightsIntensity.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DebugLightsIntensity.W };
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _loot_drop_highlight
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (Mode != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mode") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Mode") { IsSerialized = true, Value = (float)Mode }; v.Variant = p;
            }
            if (HighlightColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HighlightColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "HighlightColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)HighlightColor.Red }, Green = new CUInt8() { Value = (Byte)HighlightColor.Green }, Blue = new CUInt8() { Value = (Byte)HighlightColor.Blue }, Alpha = new CUInt8() { Value = (Byte)HighlightColor.Alpha } }; v.Variant = p;
            }
            if (HighlightIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HighlightIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HighlightIntensity") { IsSerialized = true, Value = (float)HighlightIntensity }; v.Variant = p;
            }
            if (SolidBlendingDistanceStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SolidBlendingDistanceStart") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SolidBlendingDistanceStart") { IsSerialized = true, Value = (float)SolidBlendingDistanceStart }; v.Variant = p;
            }
            if (SolidBlendingDistanceEnd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SolidBlendingDistanceEnd") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SolidBlendingDistanceEnd") { IsSerialized = true, Value = (float)SolidBlendingDistanceEnd }; v.Variant = p;
            }
        }
    }
    public partial class _mesh_decal
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VertexOffsetFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexOffsetFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexOffsetFactor") { IsSerialized = true, Value = (float)VertexOffsetFactor }; v.Variant = p;
            }
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (DiffuseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseAlpha") { IsSerialized = true, Value = (float)DiffuseAlpha }; v.Variant = p;
            }
            if (UVOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVOffsetX") { IsSerialized = true, Value = (float)UVOffsetX }; v.Variant = p;
            }
            if (UVOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVOffsetY") { IsSerialized = true, Value = (float)UVOffsetY }; v.Variant = p;
            }
            if (UVRotation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVRotation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVRotation") { IsSerialized = true, Value = (float)UVRotation }; v.Variant = p;
            }
            if (UVScaleX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVScaleX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVScaleX") { IsSerialized = true, Value = (float)UVScaleX }; v.Variant = p;
            }
            if (UVScaleY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVScaleY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVScaleY") { IsSerialized = true, Value = (float)UVScaleY }; v.Variant = p;
            }
            if (SecondaryMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SecondaryMask") { IsSerialized = true, DepotPath = SecondaryMask }; v.Variant = p;
            }
            if (SecondaryMaskUVScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMaskUVScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryMaskUVScale") { IsSerialized = true, Value = (float)SecondaryMaskUVScale }; v.Variant = p;
            }
            if (SecondaryMaskInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMaskInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryMaskInfluence") { IsSerialized = true, Value = (float)SecondaryMaskInfluence }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (NormalAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalAlpha") { IsSerialized = true, Value = (float)NormalAlpha }; v.Variant = p;
            }
            if (NormalAlphaTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlphaTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalAlphaTex") { IsSerialized = true, DepotPath = NormalAlphaTex }; v.Variant = p;
            }
            if (UseNormalAlphaTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseNormalAlphaTex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseNormalAlphaTex") { IsSerialized = true, Value = (float)UseNormalAlphaTex }; v.Variant = p;
            }
            if (NormalsBlendingMode != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalsBlendingMode") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalsBlendingMode") { IsSerialized = true, Value = (float)NormalsBlendingMode }; v.Variant = p;
            }
            if (NormalsBlendingModeAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalsBlendingModeAlpha") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalsBlendingModeAlpha") { IsSerialized = true, DepotPath = NormalsBlendingModeAlpha }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (AnimationSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationSpeed") { IsSerialized = true, Value = (float)AnimationSpeed }; v.Variant = p;
            }
            if (AnimationFramesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesWidth") { IsSerialized = true, Value = (float)AnimationFramesWidth }; v.Variant = p;
            }
            if (AnimationFramesHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesHeight") { IsSerialized = true, Value = (float)AnimationFramesHeight }; v.Variant = p;
            }
            if (DepthThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthThreshold") { IsSerialized = true, Value = (float)DepthThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _mesh_decal_blendable
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VectorField != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField") { IsSerialized = true, DepotPath = VectorField }; v.Variant = p;
            }
            if (FadeOutDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutDistance") { IsSerialized = true, Value = (float)FadeOutDistance }; v.Variant = p;
            }
            if (FadeOutOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutOffset") { IsSerialized = true, Value = (float)FadeOutOffset }; v.Variant = p;
            }
            if (GlitchChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchChance") { IsSerialized = true, Value = (float)GlitchChance }; v.Variant = p;
            }
            if (GlitchOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchOffset") { IsSerialized = true, Value = (float)GlitchOffset }; v.Variant = p;
            }
            if (VertexOffsetFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexOffsetFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexOffsetFactor") { IsSerialized = true, Value = (float)VertexOffsetFactor }; v.Variant = p;
            }
            if (FresnelColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "FresnelColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)FresnelColor.Red }, Green = new CUInt8() { Value = (Byte)FresnelColor.Green }, Blue = new CUInt8() { Value = (Byte)FresnelColor.Blue }, Alpha = new CUInt8() { Value = (Byte)FresnelColor.Alpha } }; v.Variant = p;
            }
            if (FresnelColorIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColorIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelColorIntensity") { IsSerialized = true, Value = (float)FresnelColorIntensity }; v.Variant = p;
            }
            if (FresnelExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelExponent") { IsSerialized = true, Value = (float)FresnelExponent }; v.Variant = p;
            }
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (DiffuseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseAlpha") { IsSerialized = true, Value = (float)DiffuseAlpha }; v.Variant = p;
            }
            if (UVOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVOffsetX") { IsSerialized = true, Value = (float)UVOffsetX }; v.Variant = p;
            }
            if (UVOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVOffsetY") { IsSerialized = true, Value = (float)UVOffsetY }; v.Variant = p;
            }
            if (UVRotation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVRotation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVRotation") { IsSerialized = true, Value = (float)UVRotation }; v.Variant = p;
            }
            if (UVScaleX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVScaleX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVScaleX") { IsSerialized = true, Value = (float)UVScaleX }; v.Variant = p;
            }
            if (UVScaleY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVScaleY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVScaleY") { IsSerialized = true, Value = (float)UVScaleY }; v.Variant = p;
            }
            if (SecondaryMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SecondaryMask") { IsSerialized = true, DepotPath = SecondaryMask }; v.Variant = p;
            }
            if (SecondaryMaskUVScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMaskUVScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryMaskUVScale") { IsSerialized = true, Value = (float)SecondaryMaskUVScale }; v.Variant = p;
            }
            if (SecondaryMaskInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMaskInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryMaskInfluence") { IsSerialized = true, Value = (float)SecondaryMaskInfluence }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (NormalAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalAlpha") { IsSerialized = true, Value = (float)NormalAlpha }; v.Variant = p;
            }
            if (NormalAlphaTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlphaTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalAlphaTex") { IsSerialized = true, DepotPath = NormalAlphaTex }; v.Variant = p;
            }
            if (UseNormalAlphaTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseNormalAlphaTex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseNormalAlphaTex") { IsSerialized = true, Value = (float)UseNormalAlphaTex }; v.Variant = p;
            }
            if (NormalsBlendingMode != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalsBlendingMode") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalsBlendingMode") { IsSerialized = true, Value = (float)NormalsBlendingMode }; v.Variant = p;
            }
            if (NormalsBlendingModeAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalsBlendingModeAlpha") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalsBlendingModeAlpha") { IsSerialized = true, DepotPath = NormalsBlendingModeAlpha }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (AnimationSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationSpeed") { IsSerialized = true, Value = (float)AnimationSpeed }; v.Variant = p;
            }
            if (AnimationFramesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesWidth") { IsSerialized = true, Value = (float)AnimationFramesWidth }; v.Variant = p;
            }
            if (AnimationFramesHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesHeight") { IsSerialized = true, Value = (float)AnimationFramesHeight }; v.Variant = p;
            }
            if (DepthThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthThreshold") { IsSerialized = true, Value = (float)DepthThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _mesh_decal_double_diffuse
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VertexOffsetFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexOffsetFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexOffsetFactor") { IsSerialized = true, Value = (float)VertexOffsetFactor }; v.Variant = p;
            }
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (DiffuseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseAlpha") { IsSerialized = true, Value = (float)DiffuseAlpha }; v.Variant = p;
            }
            if (SecondaryDiffuseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryDiffuseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SecondaryDiffuseAlpha") { IsSerialized = true, DepotPath = SecondaryDiffuseAlpha }; v.Variant = p;
            }
            if (SecondaryDiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryDiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "SecondaryDiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)SecondaryDiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)SecondaryDiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)SecondaryDiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)SecondaryDiffuseColor.Alpha } }; v.Variant = p;
            }
            if (SecondaryDiffuseAlphaIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryDiffuseAlphaIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryDiffuseAlphaIntensity") { IsSerialized = true, Value = (float)SecondaryDiffuseAlphaIntensity }; v.Variant = p;
            }
            if (UVOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVOffsetX") { IsSerialized = true, Value = (float)UVOffsetX }; v.Variant = p;
            }
            if (UVOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVOffsetY") { IsSerialized = true, Value = (float)UVOffsetY }; v.Variant = p;
            }
            if (UVRotation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVRotation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVRotation") { IsSerialized = true, Value = (float)UVRotation }; v.Variant = p;
            }
            if (UVScaleX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVScaleX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVScaleX") { IsSerialized = true, Value = (float)UVScaleX }; v.Variant = p;
            }
            if (UVScaleY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVScaleY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVScaleY") { IsSerialized = true, Value = (float)UVScaleY }; v.Variant = p;
            }
            if (SecondaryMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SecondaryMask") { IsSerialized = true, DepotPath = SecondaryMask }; v.Variant = p;
            }
            if (SecondaryMaskUVScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMaskUVScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryMaskUVScale") { IsSerialized = true, Value = (float)SecondaryMaskUVScale }; v.Variant = p;
            }
            if (SecondaryMaskInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMaskInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryMaskInfluence") { IsSerialized = true, Value = (float)SecondaryMaskInfluence }; v.Variant = p;
            }
            if (NormalsBlendingModeAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalsBlendingModeAlpha") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalsBlendingModeAlpha") { IsSerialized = true, DepotPath = NormalsBlendingModeAlpha }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (NormalAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalAlpha") { IsSerialized = true, Value = (float)NormalAlpha }; v.Variant = p;
            }
            if (NormalAlphaTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlphaTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalAlphaTex") { IsSerialized = true, DepotPath = NormalAlphaTex }; v.Variant = p;
            }
            if (UseNormalAlphaTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseNormalAlphaTex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseNormalAlphaTex") { IsSerialized = true, Value = (float)UseNormalAlphaTex }; v.Variant = p;
            }
            if (NormalsBlendingMode != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalsBlendingMode") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalsBlendingMode") { IsSerialized = true, Value = (float)NormalsBlendingMode }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (AnimationSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationSpeed") { IsSerialized = true, Value = (float)AnimationSpeed }; v.Variant = p;
            }
            if (AnimationFramesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesWidth") { IsSerialized = true, Value = (float)AnimationFramesWidth }; v.Variant = p;
            }
            if (AnimationFramesHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesHeight") { IsSerialized = true, Value = (float)AnimationFramesHeight }; v.Variant = p;
            }
            if (DepthThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthThreshold") { IsSerialized = true, Value = (float)DepthThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _mesh_decal_emissive
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DamageInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DamageInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DamageInfluence") { IsSerialized = true, Value = (float)DamageInfluence }; v.Variant = p;
            }
            if (DamageInfluenceDebug != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DamageInfluenceDebug") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DamageInfluenceDebug") { IsSerialized = true, Value = (float)DamageInfluenceDebug }; v.Variant = p;
            }
            if (VertexOffsetFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexOffsetFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexOffsetFactor") { IsSerialized = true, Value = (float)VertexOffsetFactor }; v.Variant = p;
            }
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (DiffuseColor2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor2") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor2") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor2.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor2.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor2.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor2.Alpha } }; v.Variant = p;
            }
            if (DiffuseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseAlpha") { IsSerialized = true, Value = (float)DiffuseAlpha }; v.Variant = p;
            }
            if (UVOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVOffsetX") { IsSerialized = true, Value = (float)UVOffsetX }; v.Variant = p;
            }
            if (UVOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVOffsetY") { IsSerialized = true, Value = (float)UVOffsetY }; v.Variant = p;
            }
            if (UVRotation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVRotation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVRotation") { IsSerialized = true, Value = (float)UVRotation }; v.Variant = p;
            }
            if (UVScaleX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVScaleX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVScaleX") { IsSerialized = true, Value = (float)UVScaleX }; v.Variant = p;
            }
            if (UVScaleY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVScaleY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVScaleY") { IsSerialized = true, Value = (float)UVScaleY }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AnimationSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationSpeed") { IsSerialized = true, Value = (float)AnimationSpeed }; v.Variant = p;
            }
            if (AnimationFramesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesWidth") { IsSerialized = true, Value = (float)AnimationFramesWidth }; v.Variant = p;
            }
            if (AnimationFramesHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesHeight") { IsSerialized = true, Value = (float)AnimationFramesHeight }; v.Variant = p;
            }
            if (ScrollSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "ScrollSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)ScrollSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)ScrollSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)ScrollSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)ScrollSpeed.W };
            }
            if (HardOrSoftTransition != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HardOrSoftTransition") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HardOrSoftTransition") { IsSerialized = true, Value = (float)HardOrSoftTransition }; v.Variant = p;
            }
            if (FullVisibilityFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FullVisibilityFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FullVisibilityFactor") { IsSerialized = true, Value = (float)FullVisibilityFactor }; v.Variant = p;
            }
            if (EnableAlternateColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableAlternateColor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableAlternateColor") { IsSerialized = true, Value = (float)EnableAlternateColor }; v.Variant = p;
            }
            if (EnableAlternateUVcoord != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableAlternateUVcoord") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableAlternateUVcoord") { IsSerialized = true, Value = (float)EnableAlternateUVcoord }; v.Variant = p;
            }
            if (Preview2ndState != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Preview2ndState") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Preview2ndState") { IsSerialized = true, Value = (float)Preview2ndState }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
        }
    }
    public partial class _mesh_decal_emissive_subsurface
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VertexOffsetFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexOffsetFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexOffsetFactor") { IsSerialized = true, Value = (float)VertexOffsetFactor }; v.Variant = p;
            }
            if (EmissiveMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "EmissiveMask") { IsSerialized = true, DepotPath = EmissiveMask }; v.Variant = p;
            }
            if (SecondaryMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SecondaryMask") { IsSerialized = true, DepotPath = SecondaryMask }; v.Variant = p;
            }
            if (EmissiveMaskChannel != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveMaskChannel") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "EmissiveMaskChannel") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)EmissiveMaskChannel.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)EmissiveMaskChannel.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)EmissiveMaskChannel.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)EmissiveMaskChannel.W };
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _mesh_decal_gradientmap_recolor
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VertexOffsetFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexOffsetFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexOffsetFactor") { IsSerialized = true, Value = (float)VertexOffsetFactor }; v.Variant = p;
            }
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (DiffuseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseAlpha") { IsSerialized = true, Value = (float)DiffuseAlpha }; v.Variant = p;
            }
            if (GradientMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GradientMap") { IsSerialized = true, DepotPath = GradientMap }; v.Variant = p;
            }
            if (SecondaryMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SecondaryMask") { IsSerialized = true, DepotPath = SecondaryMask }; v.Variant = p;
            }
            if (SecondaryMaskUVScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMaskUVScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryMaskUVScale") { IsSerialized = true, Value = (float)SecondaryMaskUVScale }; v.Variant = p;
            }
            if (SecondaryMaskInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMaskInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryMaskInfluence") { IsSerialized = true, Value = (float)SecondaryMaskInfluence }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (NormalAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalAlpha") { IsSerialized = true, Value = (float)NormalAlpha }; v.Variant = p;
            }
            if (NormalsBlendingMode != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalsBlendingMode") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalsBlendingMode") { IsSerialized = true, Value = (float)NormalsBlendingMode }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (AnimationSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationSpeed") { IsSerialized = true, Value = (float)AnimationSpeed }; v.Variant = p;
            }
            if (AnimationFramesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesWidth") { IsSerialized = true, Value = (float)AnimationFramesWidth }; v.Variant = p;
            }
            if (AnimationFramesHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesHeight") { IsSerialized = true, Value = (float)AnimationFramesHeight }; v.Variant = p;
            }
            if (DepthThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthThreshold") { IsSerialized = true, Value = (float)DepthThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _mesh_decal_gradientmap_recolor_2
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VertexOffsetFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexOffsetFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexOffsetFactor") { IsSerialized = true, Value = (float)VertexOffsetFactor }; v.Variant = p;
            }
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (DiffuseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseAlpha") { IsSerialized = true, Value = (float)DiffuseAlpha }; v.Variant = p;
            }
            if (Gradient != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Gradient") { IsSerialized = true }; m.Add(v);
                var p = new rRef<CGradient>(cr2w, v, "Gradient") { IsSerialized = true, DepotPath = Gradient }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (NormalAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalAlpha") { IsSerialized = true, Value = (float)NormalAlpha }; v.Variant = p;
            }
            if (NormalsBlendingMode != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalsBlendingMode") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalsBlendingMode") { IsSerialized = true, Value = (float)NormalsBlendingMode }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (AnimationSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationSpeed") { IsSerialized = true, Value = (float)AnimationSpeed }; v.Variant = p;
            }
            if (AnimationFramesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesWidth") { IsSerialized = true, Value = (float)AnimationFramesWidth }; v.Variant = p;
            }
            if (AnimationFramesHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesHeight") { IsSerialized = true, Value = (float)AnimationFramesHeight }; v.Variant = p;
            }
            if (DepthThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthThreshold") { IsSerialized = true, Value = (float)DepthThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _mesh_decal_gradientmap_recolor_emissive
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VertexOffsetFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexOffsetFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexOffsetFactor") { IsSerialized = true, Value = (float)VertexOffsetFactor }; v.Variant = p;
            }
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (DiffuseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseAlpha") { IsSerialized = true, Value = (float)DiffuseAlpha }; v.Variant = p;
            }
            if (GradientMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GradientMap") { IsSerialized = true, DepotPath = GradientMap }; v.Variant = p;
            }
            if (EmissiveGradientMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveGradientMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "EmissiveGradientMap") { IsSerialized = true, DepotPath = EmissiveGradientMap }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (NormalAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalAlpha") { IsSerialized = true, Value = (float)NormalAlpha }; v.Variant = p;
            }
            if (NormalsBlendingMode != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalsBlendingMode") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalsBlendingMode") { IsSerialized = true, Value = (float)NormalsBlendingMode }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AnimationSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationSpeed") { IsSerialized = true, Value = (float)AnimationSpeed }; v.Variant = p;
            }
            if (AnimationFramesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesWidth") { IsSerialized = true, Value = (float)AnimationFramesWidth }; v.Variant = p;
            }
            if (AnimationFramesHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesHeight") { IsSerialized = true, Value = (float)AnimationFramesHeight }; v.Variant = p;
            }
            if (DepthThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthThreshold") { IsSerialized = true, Value = (float)DepthThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _mesh_decal_multitinted
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VertexOffsetFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexOffsetFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexOffsetFactor") { IsSerialized = true, Value = (float)VertexOffsetFactor }; v.Variant = p;
            }
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (DiffuseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseAlpha") { IsSerialized = true, Value = (float)DiffuseAlpha }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (NormalAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalAlpha") { IsSerialized = true, Value = (float)NormalAlpha }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (AnimationSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationSpeed") { IsSerialized = true, Value = (float)AnimationSpeed }; v.Variant = p;
            }
            if (AnimationFramesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesWidth") { IsSerialized = true, Value = (float)AnimationFramesWidth }; v.Variant = p;
            }
            if (AnimationFramesHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesHeight") { IsSerialized = true, Value = (float)AnimationFramesHeight }; v.Variant = p;
            }
            if (DepthThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthThreshold") { IsSerialized = true, Value = (float)DepthThreshold }; v.Variant = p;
            }
            if (TintMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "TintMaskTexture") { IsSerialized = true, DepotPath = TintMaskTexture }; v.Variant = p;
            }
            if (TintColor0 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor0") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor0") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor0.Red }, Green = new CUInt8() { Value = (Byte)TintColor0.Green }, Blue = new CUInt8() { Value = (Byte)TintColor0.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor0.Alpha } }; v.Variant = p;
            }
            if (TintColor1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor1") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor1") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor1.Red }, Green = new CUInt8() { Value = (Byte)TintColor1.Green }, Blue = new CUInt8() { Value = (Byte)TintColor1.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor1.Alpha } }; v.Variant = p;
            }
            if (TintColor2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor2") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor2") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor2.Red }, Green = new CUInt8() { Value = (Byte)TintColor2.Green }, Blue = new CUInt8() { Value = (Byte)TintColor2.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor2.Alpha } }; v.Variant = p;
            }
            if (TintColor3 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor3") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor3") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor3.Red }, Green = new CUInt8() { Value = (Byte)TintColor3.Green }, Blue = new CUInt8() { Value = (Byte)TintColor3.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor3.Alpha } }; v.Variant = p;
            }
            if (TintColor4 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor4") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor4") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor4.Red }, Green = new CUInt8() { Value = (Byte)TintColor4.Green }, Blue = new CUInt8() { Value = (Byte)TintColor4.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor4.Alpha } }; v.Variant = p;
            }
            if (TintColor5 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor5") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor5") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor5.Red }, Green = new CUInt8() { Value = (Byte)TintColor5.Green }, Blue = new CUInt8() { Value = (Byte)TintColor5.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor5.Alpha } }; v.Variant = p;
            }
            if (TintColor6 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor6") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor6") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor6.Red }, Green = new CUInt8() { Value = (Byte)TintColor6.Green }, Blue = new CUInt8() { Value = (Byte)TintColor6.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor6.Alpha } }; v.Variant = p;
            }
            if (TintColor7 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor7") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor7") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor7.Red }, Green = new CUInt8() { Value = (Byte)TintColor7.Green }, Blue = new CUInt8() { Value = (Byte)TintColor7.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor7.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _mesh_decal_parallax
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (DiffuseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseAlpha") { IsSerialized = true, Value = (float)DiffuseAlpha }; v.Variant = p;
            }
            if (UVOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVOffsetX") { IsSerialized = true, Value = (float)UVOffsetX }; v.Variant = p;
            }
            if (UVOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVOffsetY") { IsSerialized = true, Value = (float)UVOffsetY }; v.Variant = p;
            }
            if (UVRotation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVRotation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVRotation") { IsSerialized = true, Value = (float)UVRotation }; v.Variant = p;
            }
            if (UVScaleX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVScaleX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVScaleX") { IsSerialized = true, Value = (float)UVScaleX }; v.Variant = p;
            }
            if (UVScaleY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVScaleY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVScaleY") { IsSerialized = true, Value = (float)UVScaleY }; v.Variant = p;
            }
            if (SecondaryMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SecondaryMask") { IsSerialized = true, DepotPath = SecondaryMask }; v.Variant = p;
            }
            if (SecondaryMaskUVScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMaskUVScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryMaskUVScale") { IsSerialized = true, Value = (float)SecondaryMaskUVScale }; v.Variant = p;
            }
            if (SecondaryMaskInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMaskInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryMaskInfluence") { IsSerialized = true, Value = (float)SecondaryMaskInfluence }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (NormalAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalAlpha") { IsSerialized = true, Value = (float)NormalAlpha }; v.Variant = p;
            }
            if (NormalAlphaTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlphaTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalAlphaTex") { IsSerialized = true, DepotPath = NormalAlphaTex }; v.Variant = p;
            }
            if (UseNormalAlphaTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseNormalAlphaTex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseNormalAlphaTex") { IsSerialized = true, Value = (float)UseNormalAlphaTex }; v.Variant = p;
            }
            if (NormalsBlendingMode != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalsBlendingMode") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalsBlendingMode") { IsSerialized = true, Value = (float)NormalsBlendingMode }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (AnimationSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationSpeed") { IsSerialized = true, Value = (float)AnimationSpeed }; v.Variant = p;
            }
            if (AnimationFramesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesWidth") { IsSerialized = true, Value = (float)AnimationFramesWidth }; v.Variant = p;
            }
            if (AnimationFramesHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesHeight") { IsSerialized = true, Value = (float)AnimationFramesHeight }; v.Variant = p;
            }
            if (DepthThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthThreshold") { IsSerialized = true, Value = (float)DepthThreshold }; v.Variant = p;
            }
            if (HeightTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeightTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "HeightTexture") { IsSerialized = true, DepotPath = HeightTexture }; v.Variant = p;
            }
            if (HeightStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeightStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HeightStrength") { IsSerialized = true, Value = (float)HeightStrength }; v.Variant = p;
            }
        }
    }
    public partial class _mesh_decal_revealed
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VertexOffsetFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexOffsetFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexOffsetFactor") { IsSerialized = true, Value = (float)VertexOffsetFactor }; v.Variant = p;
            }
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (DiffuseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseAlpha") { IsSerialized = true, Value = (float)DiffuseAlpha }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (NormalAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalAlpha") { IsSerialized = true, Value = (float)NormalAlpha }; v.Variant = p;
            }
            if (NormalsBlendingMode != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalsBlendingMode") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalsBlendingMode") { IsSerialized = true, Value = (float)NormalsBlendingMode }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (AnimationSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationSpeed") { IsSerialized = true, Value = (float)AnimationSpeed }; v.Variant = p;
            }
            if (AnimationFramesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesWidth") { IsSerialized = true, Value = (float)AnimationFramesWidth }; v.Variant = p;
            }
            if (AnimationFramesHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesHeight") { IsSerialized = true, Value = (float)AnimationFramesHeight }; v.Variant = p;
            }
            if (TileNumber != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileNumber") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileNumber") { IsSerialized = true, Value = (float)TileNumber }; v.Variant = p;
            }
            if (DepthThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthThreshold") { IsSerialized = true, Value = (float)DepthThreshold }; v.Variant = p;
            }
            if (FlowTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlowTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FlowTexture") { IsSerialized = true, DepotPath = FlowTexture }; v.Variant = p;
            }
        }
    }
    public partial class _mesh_decal_wet_character
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VertexOffsetFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexOffsetFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexOffsetFactor") { IsSerialized = true, Value = (float)VertexOffsetFactor }; v.Variant = p;
            }
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (DiffuseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseAlpha") { IsSerialized = true, Value = (float)DiffuseAlpha }; v.Variant = p;
            }
            if (UVOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVOffsetX") { IsSerialized = true, Value = (float)UVOffsetX }; v.Variant = p;
            }
            if (UVOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVOffsetY") { IsSerialized = true, Value = (float)UVOffsetY }; v.Variant = p;
            }
            if (UVRotation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVRotation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVRotation") { IsSerialized = true, Value = (float)UVRotation }; v.Variant = p;
            }
            if (UVScaleX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVScaleX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVScaleX") { IsSerialized = true, Value = (float)UVScaleX }; v.Variant = p;
            }
            if (UVScaleY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVScaleY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVScaleY") { IsSerialized = true, Value = (float)UVScaleY }; v.Variant = p;
            }
            if (SecondaryMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SecondaryMask") { IsSerialized = true, DepotPath = SecondaryMask }; v.Variant = p;
            }
            if (SecondaryMaskUVScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMaskUVScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryMaskUVScale") { IsSerialized = true, Value = (float)SecondaryMaskUVScale }; v.Variant = p;
            }
            if (SecondaryMaskInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryMaskInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryMaskInfluence") { IsSerialized = true, Value = (float)SecondaryMaskInfluence }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (NormalAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalAlpha") { IsSerialized = true, Value = (float)NormalAlpha }; v.Variant = p;
            }
            if (NormalAlphaTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlphaTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalAlphaTex") { IsSerialized = true, DepotPath = NormalAlphaTex }; v.Variant = p;
            }
            if (UseNormalAlphaTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseNormalAlphaTex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseNormalAlphaTex") { IsSerialized = true, Value = (float)UseNormalAlphaTex }; v.Variant = p;
            }
            if (NormalsBlendingMode != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalsBlendingMode") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalsBlendingMode") { IsSerialized = true, Value = (float)NormalsBlendingMode }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (AnimationSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationSpeed") { IsSerialized = true, Value = (float)AnimationSpeed }; v.Variant = p;
            }
            if (AnimationFramesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesWidth") { IsSerialized = true, Value = (float)AnimationFramesWidth }; v.Variant = p;
            }
            if (AnimationFramesHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesHeight") { IsSerialized = true, Value = (float)AnimationFramesHeight }; v.Variant = p;
            }
            if (DepthThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthThreshold") { IsSerialized = true, Value = (float)DepthThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_bink
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (BinkY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BinkY") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BinkY") { IsSerialized = true, DepotPath = BinkY }; v.Variant = p;
            }
            if (BinkCR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BinkCR") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BinkCR") { IsSerialized = true, DepotPath = BinkCR }; v.Variant = p;
            }
            if (BinkCB != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BinkCB") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BinkCB") { IsSerialized = true, DepotPath = BinkCB }; v.Variant = p;
            }
            if (BinkA != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BinkA") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BinkA") { IsSerialized = true, DepotPath = BinkA }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_det
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (DetailColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DetailColor") { IsSerialized = true, DepotPath = DetailColor }; v.Variant = p;
            }
            if (DetailNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DetailNormal") { IsSerialized = true, DepotPath = DetailNormal }; v.Variant = p;
            }
            if (DetailU != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailU") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DetailU") { IsSerialized = true, Value = (float)DetailU }; v.Variant = p;
            }
            if (DetailV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DetailV") { IsSerialized = true, Value = (float)DetailV }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_det_dithered
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (DetailColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DetailColor") { IsSerialized = true, DepotPath = DetailColor }; v.Variant = p;
            }
            if (DetailNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DetailNormal") { IsSerialized = true, DepotPath = DetailNormal }; v.Variant = p;
            }
            if (DetailU != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailU") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DetailU") { IsSerialized = true, Value = (float)DetailU }; v.Variant = p;
            }
            if (DetailV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DetailV") { IsSerialized = true, Value = (float)DetailV }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_dithered
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VehicleDamageInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VehicleDamageInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VehicleDamageInfluence") { IsSerialized = true, Value = (float)VehicleDamageInfluence }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveLift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveLift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveLift") { IsSerialized = true, Value = (float)EmissiveLift }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_gradientmap_recolor
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VehicleDamageInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VehicleDamageInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VehicleDamageInfluence") { IsSerialized = true, Value = (float)VehicleDamageInfluence }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
            if (GradientMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GradientMap") { IsSerialized = true, DepotPath = GradientMap }; v.Variant = p;
            }
            if (EmissiveGradientMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveGradientMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "EmissiveGradientMap") { IsSerialized = true, DepotPath = EmissiveGradientMap }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_parallax
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveLift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveLift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveLift") { IsSerialized = true, Value = (float)EmissiveLift }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (HeightTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeightTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "HeightTexture") { IsSerialized = true, DepotPath = HeightTexture }; v.Variant = p;
            }
            if (HeightStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeightStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HeightStrength") { IsSerialized = true, Value = (float)HeightStrength }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_trafficlight_proxy
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (TrafficCellSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TrafficCellSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TrafficCellSize") { IsSerialized = true, Value = (float)TrafficCellSize }; v.Variant = p;
            }
            if (TrafficSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TrafficSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TrafficSpeed") { IsSerialized = true, Value = (float)TrafficSpeed }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveLift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveLift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveLift") { IsSerialized = true, Value = (float)EmissiveLift }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_ui
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (ScanlineTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ScanlineTexture") { IsSerialized = true, DepotPath = ScanlineTexture }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Metalness") { IsSerialized = true, Value = (float)Metalness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (FixToPbr != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FixToPbr") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FixToPbr") { IsSerialized = true, Value = (float)FixToPbr }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (LayersSeparation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersSeparation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersSeparation") { IsSerialized = true, Value = (float)LayersSeparation }; v.Variant = p;
            }
            if (IntensityPerLayer != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IntensityPerLayer") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "IntensityPerLayer") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)IntensityPerLayer.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)IntensityPerLayer.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)IntensityPerLayer.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)IntensityPerLayer.W };
            }
            if (ScanlinesDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlinesDensity") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "ScanlinesDensity") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)ScanlinesDensity.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)ScanlinesDensity.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)ScanlinesDensity.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)ScanlinesDensity.W };
            }
            if (ScanlinesIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlinesIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlinesIntensity") { IsSerialized = true, Value = (float)ScanlinesIntensity }; v.Variant = p;
            }
            if (IsBroken != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IsBroken") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IsBroken") { IsSerialized = true, Value = (float)IsBroken }; v.Variant = p;
            }
            if (ImageScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ImageScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ImageScale") { IsSerialized = true, Value = (float)ImageScale }; v.Variant = p;
            }
            if (UIRenderTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UIRenderTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "UIRenderTexture") { IsSerialized = true, DepotPath = UIRenderTexture }; v.Variant = p;
            }
            if (RenderTextureScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RenderTextureScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RenderTextureScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RenderTextureScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RenderTextureScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RenderTextureScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RenderTextureScale.W };
            }
            if (VerticalFlipEnabled != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VerticalFlipEnabled") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VerticalFlipEnabled") { IsSerialized = true, Value = (float)VerticalFlipEnabled }; v.Variant = p;
            }
            if (TexturePartUV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexturePartUV") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexturePartUV") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexturePartUV.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexturePartUV.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexturePartUV.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexturePartUV.W };
            }
            if (DirtTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DirtTexture") { IsSerialized = true, DepotPath = DirtTexture }; v.Variant = p;
            }
            if (DirtColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DirtColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DirtColor.Red }, Green = new CUInt8() { Value = (Byte)DirtColor.Green }, Blue = new CUInt8() { Value = (Byte)DirtColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DirtColor.Alpha } }; v.Variant = p;
            }
            if (DirtRoughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtRoughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DirtRoughness") { IsSerialized = true, Value = (float)DirtRoughness }; v.Variant = p;
            }
            if (DirtEmissiveAttenuation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtEmissiveAttenuation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DirtEmissiveAttenuation") { IsSerialized = true, Value = (float)DirtEmissiveAttenuation }; v.Variant = p;
            }
            if (DirtContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DirtContrast") { IsSerialized = true, Value = (float)DirtContrast }; v.Variant = p;
            }
            if (Tint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tint") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Tint") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Tint.Red }, Green = new CUInt8() { Value = (Byte)Tint.Green }, Blue = new CUInt8() { Value = (Byte)Tint.Blue }, Alpha = new CUInt8() { Value = (Byte)Tint.Alpha } }; v.Variant = p;
            }
            if (FixForBlack != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FixForBlack") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FixForBlack") { IsSerialized = true, Value = (float)FixForBlack }; v.Variant = p;
            }
            if (FixForVerticalSlide != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FixForVerticalSlide") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FixForVerticalSlide") { IsSerialized = true, Value = (float)FixForVerticalSlide }; v.Variant = p;
            }
            if (ForcedTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ForcedTint") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ForcedTint") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ForcedTint.Red }, Green = new CUInt8() { Value = (Byte)ForcedTint.Green }, Blue = new CUInt8() { Value = (Byte)ForcedTint.Blue }, Alpha = new CUInt8() { Value = (Byte)ForcedTint.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_vertexcolored
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _mikoshi_blocks_big
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (DataTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DataTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DataTex") { IsSerialized = true, DepotPath = DataTex }; v.Variant = p;
            }
            if (NoiseTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NoiseTex") { IsSerialized = true, DepotPath = NoiseTex }; v.Variant = p;
            }
            if (PcbTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PcbTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "PcbTex") { IsSerialized = true, DepotPath = PcbTex }; v.Variant = p;
            }
        }
    }
    public partial class _mikoshi_blocks_medium
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (RandomSeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RandomSeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RandomSeed") { IsSerialized = true, Value = (float)RandomSeed }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (DataTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DataTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DataTex") { IsSerialized = true, DepotPath = DataTex }; v.Variant = p;
            }
            if (NoiseTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NoiseTex") { IsSerialized = true, DepotPath = NoiseTex }; v.Variant = p;
            }
        }
    }
    public partial class _mikoshi_blocks_small
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (RandomSeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RandomSeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RandomSeed") { IsSerialized = true, Value = (float)RandomSeed }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (DataTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DataTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DataTex") { IsSerialized = true, DepotPath = DataTex }; v.Variant = p;
            }
            if (NoiseTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NoiseTex") { IsSerialized = true, DepotPath = NoiseTex }; v.Variant = p;
            }
        }
    }
    public partial class _mikoshi_parallax
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (RoomAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoomAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoomAtlas") { IsSerialized = true, DepotPath = RoomAtlas }; v.Variant = p;
            }
            if (LayerAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "LayerAtlas") { IsSerialized = true, DepotPath = LayerAtlas }; v.Variant = p;
            }
            if (AtlasGridUvRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AtlasGridUvRatio") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "AtlasGridUvRatio") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)AtlasGridUvRatio.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)AtlasGridUvRatio.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)AtlasGridUvRatio.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)AtlasGridUvRatio.W };
            }
            if (AtlasDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AtlasDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AtlasDepth") { IsSerialized = true, Value = (float)AtlasDepth }; v.Variant = p;
            }
            if (roomWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "roomWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "roomWidth") { IsSerialized = true, Value = (float)roomWidth }; v.Variant = p;
            }
            if (roomHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "roomHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "roomHeight") { IsSerialized = true, Value = (float)roomHeight }; v.Variant = p;
            }
            if (roomDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "roomDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "roomDepth") { IsSerialized = true, Value = (float)roomDepth }; v.Variant = p;
            }
            if (positionXoffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "positionXoffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "positionXoffset") { IsSerialized = true, Value = (float)positionXoffset }; v.Variant = p;
            }
            if (positionYoffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "positionYoffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "positionYoffset") { IsSerialized = true, Value = (float)positionYoffset }; v.Variant = p;
            }
            if (LayerDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerDepth") { IsSerialized = true, Value = (float)LayerDepth }; v.Variant = p;
            }
            if (Frostiness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frostiness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frostiness") { IsSerialized = true, Value = (float)Frostiness }; v.Variant = p;
            }
            if (WindowTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindowTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WindowTexture") { IsSerialized = true, DepotPath = WindowTexture }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
        }
    }
    public partial class _mikoshi_prison_cell
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (EdgeFalloff != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EdgeFalloff") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EdgeFalloff") { IsSerialized = true, Value = (float)EdgeFalloff }; v.Variant = p;
            }
            if (DepthAttenuation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthAttenuation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthAttenuation") { IsSerialized = true, Value = (float)DepthAttenuation }; v.Variant = p;
            }
            if (DepthAttenuationPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthAttenuationPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthAttenuationPower") { IsSerialized = true, Value = (float)DepthAttenuationPower }; v.Variant = p;
            }
            if (LightIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightIntensity") { IsSerialized = true, Value = (float)LightIntensity }; v.Variant = p;
            }
            if (LightColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "LightColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)LightColor.Red }, Green = new CUInt8() { Value = (Byte)LightColor.Green }, Blue = new CUInt8() { Value = (Byte)LightColor.Blue }, Alpha = new CUInt8() { Value = (Byte)LightColor.Alpha } }; v.Variant = p;
            }
            if (SilhouetteTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SilhouetteTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SilhouetteTex") { IsSerialized = true, DepotPath = SilhouetteTex }; v.Variant = p;
            }
        }
    }
    public partial class _multilayered_clear_coat
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (CoatTintFwd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatTintFwd") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "CoatTintFwd") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)CoatTintFwd.Red }, Green = new CUInt8() { Value = (Byte)CoatTintFwd.Green }, Blue = new CUInt8() { Value = (Byte)CoatTintFwd.Blue }, Alpha = new CUInt8() { Value = (Byte)CoatTintFwd.Alpha } }; v.Variant = p;
            }
            if (CoatTintSide != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatTintSide") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "CoatTintSide") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)CoatTintSide.Red }, Green = new CUInt8() { Value = (Byte)CoatTintSide.Green }, Blue = new CUInt8() { Value = (Byte)CoatTintSide.Blue }, Alpha = new CUInt8() { Value = (Byte)CoatTintSide.Alpha } }; v.Variant = p;
            }
            if (CoatTintFresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatTintFresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CoatTintFresnelBias") { IsSerialized = true, Value = (float)CoatTintFresnelBias }; v.Variant = p;
            }
            if (CoatSpecularColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatSpecularColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "CoatSpecularColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)CoatSpecularColor.Red }, Green = new CUInt8() { Value = (Byte)CoatSpecularColor.Green }, Blue = new CUInt8() { Value = (Byte)CoatSpecularColor.Blue }, Alpha = new CUInt8() { Value = (Byte)CoatSpecularColor.Alpha } }; v.Variant = p;
            }
            if (CoatNormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatNormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CoatNormalStrength") { IsSerialized = true, Value = (float)CoatNormalStrength }; v.Variant = p;
            }
            if (CoatRoughnessBase != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatRoughnessBase") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CoatRoughnessBase") { IsSerialized = true, Value = (float)CoatRoughnessBase }; v.Variant = p;
            }
            if (CoatReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CoatReflectionPower") { IsSerialized = true, Value = (float)CoatReflectionPower }; v.Variant = p;
            }
            if (CoatFresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatFresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CoatFresnelBias") { IsSerialized = true, Value = (float)CoatFresnelBias }; v.Variant = p;
            }
            if (CoatLayerMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatLayerMin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CoatLayerMin") { IsSerialized = true, Value = (float)CoatLayerMin }; v.Variant = p;
            }
            if (CoatLayerMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatLayerMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CoatLayerMax") { IsSerialized = true, Value = (float)CoatLayerMax }; v.Variant = p;
            }
            if (GlobalNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlobalNormal") { IsSerialized = true, DepotPath = GlobalNormal }; v.Variant = p;
            }
            if (MultilayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Mask>(cr2w, v, "MultilayerMask") { IsSerialized = true, DepotPath = MultilayerMask }; v.Variant = p;
            }
            if (MultilayerSetup != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerSetup") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Setup>(cr2w, v, "MultilayerSetup") { IsSerialized = true, DepotPath = MultilayerSetup }; v.Variant = p;
            }
            if (MaskAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskAtlas") { IsSerialized = true, DepotPath = MaskAtlas }; v.Variant = p;
            }
            if (LayersStartIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersStartIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersStartIndex") { IsSerialized = true, Value = (float)LayersStartIndex }; v.Variant = p;
            }
            if (SurfaceTexAspectRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceTexAspectRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceTexAspectRatio") { IsSerialized = true, Value = (float)SurfaceTexAspectRatio }; v.Variant = p;
            }
            if (MaskToTileScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskToTileScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskToTileScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskToTileScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskToTileScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskToTileScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskToTileScale.W };
            }
            if (MaskTileSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTileSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskTileSize") { IsSerialized = true, Value = (float)MaskTileSize }; v.Variant = p;
            }
            if (MaskAtlasDims != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlasDims") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskAtlasDims") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskAtlasDims.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskAtlasDims.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskAtlasDims.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskAtlasDims.W };
            }
            if (MaskBaseResolution != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskBaseResolution") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskBaseResolution") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskBaseResolution.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskBaseResolution.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskBaseResolution.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskBaseResolution.W };
            }
            if (SetupLayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SetupLayerMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SetupLayerMask") { IsSerialized = true, Value = (float)SetupLayerMask }; v.Variant = p;
            }
        }
    }
    public partial class _multilayered_terrain
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (UseOldVertexFormat != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseOldVertexFormat") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseOldVertexFormat") { IsSerialized = true, Value = (float)UseOldVertexFormat }; v.Variant = p;
            }
            if (UVGenScaleOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVGenScaleOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "UVGenScaleOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)UVGenScaleOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)UVGenScaleOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)UVGenScaleOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)UVGenScaleOffset.W };
            }
            if (DebugPreviewMasks != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugPreviewMasks") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DebugPreviewMasks") { IsSerialized = true, Value = (float)DebugPreviewMasks }; v.Variant = p;
            }
            if (UseGlobalNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseGlobalNormal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseGlobalNormal") { IsSerialized = true, Value = (float)UseGlobalNormal }; v.Variant = p;
            }
            if (MultilayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Mask>(cr2w, v, "MultilayerMask") { IsSerialized = true, DepotPath = MultilayerMask }; v.Variant = p;
            }
            if (GlobalNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlobalNormal") { IsSerialized = true, DepotPath = GlobalNormal }; v.Variant = p;
            }
            if (MultilayerSetup != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerSetup") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Setup>(cr2w, v, "MultilayerSetup") { IsSerialized = true, DepotPath = MultilayerSetup }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (TilingMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TilingMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "TilingMap") { IsSerialized = true, DepotPath = TilingMap }; v.Variant = p;
            }
            if (MaskAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskAtlas") { IsSerialized = true, DepotPath = MaskAtlas }; v.Variant = p;
            }
            if (LayersStartIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersStartIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersStartIndex") { IsSerialized = true, Value = (float)LayersStartIndex }; v.Variant = p;
            }
            if (SurfaceTexAspectRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceTexAspectRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceTexAspectRatio") { IsSerialized = true, Value = (float)SurfaceTexAspectRatio }; v.Variant = p;
            }
            if (MaskToTileScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskToTileScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskToTileScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskToTileScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskToTileScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskToTileScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskToTileScale.W };
            }
            if (MaskTileSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTileSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskTileSize") { IsSerialized = true, Value = (float)MaskTileSize }; v.Variant = p;
            }
            if (MaskAtlasDims != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlasDims") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskAtlasDims") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskAtlasDims.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskAtlasDims.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskAtlasDims.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskAtlasDims.W };
            }
            if (MaskBaseResolution != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskBaseResolution") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskBaseResolution") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskBaseResolution.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskBaseResolution.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskBaseResolution.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskBaseResolution.W };
            }
            if (SetupLayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SetupLayerMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SetupLayerMask") { IsSerialized = true, Value = (float)SetupLayerMask }; v.Variant = p;
            }
            if (TerrainSetup != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TerrainSetup") { IsSerialized = true }; m.Add(v);
                var p = new rRef<CTerrainSetup>(cr2w, v, "TerrainSetup") { IsSerialized = true, DepotPath = TerrainSetup }; v.Variant = p;
            }
            if (MaskFoliage != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskFoliage") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskFoliage") { IsSerialized = true, DepotPath = MaskFoliage }; v.Variant = p;
            }
        }
    }
    public partial class _neon_parallax
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (UvTilingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingX") { IsSerialized = true, Value = (float)UvTilingX }; v.Variant = p;
            }
            if (UvTilingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingY") { IsSerialized = true, Value = (float)UvTilingY }; v.Variant = p;
            }
            if (UvOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetX") { IsSerialized = true, Value = (float)UvOffsetX }; v.Variant = p;
            }
            if (UvOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetY") { IsSerialized = true, Value = (float)UvOffsetY }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (UseGradientMapMode != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseGradientMapMode") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseGradientMapMode") { IsSerialized = true, Value = (float)UseGradientMapMode }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (GradientMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GradientMap") { IsSerialized = true, DepotPath = GradientMap }; v.Variant = p;
            }
            if (BaseColorScaleEdgeStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScaleEdgeStart") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScaleEdgeStart") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScaleEdgeStart.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScaleEdgeStart.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScaleEdgeStart.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScaleEdgeStart.Alpha } }; v.Variant = p;
            }
            if (BaseColorScaleEdgeEnd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScaleEdgeEnd") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScaleEdgeEnd") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScaleEdgeEnd.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScaleEdgeEnd.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScaleEdgeEnd.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScaleEdgeEnd.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (ParallaxDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ParallaxDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ParallaxDepth") { IsSerialized = true, Value = (float)ParallaxDepth }; v.Variant = p;
            }
            if (ParallaxFlip != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ParallaxFlip") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ParallaxFlip") { IsSerialized = true, Value = (float)ParallaxFlip }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _presimulated_particles
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (vertex_paint_tex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "vertex_paint_tex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "vertex_paint_tex") { IsSerialized = true, DepotPath = vertex_paint_tex }; v.Variant = p;
            }
            if (trans_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_min") { IsSerialized = true, Value = (float)trans_min }; v.Variant = p;
            }
            if (trans_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_max") { IsSerialized = true, Value = (float)trans_max }; v.Variant = p;
            }
            if (n_frames != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_frames") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_frames") { IsSerialized = true, Value = (float)n_frames }; v.Variant = p;
            }
            if (n_pieces != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_pieces") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_pieces") { IsSerialized = true, Value = (float)n_pieces }; v.Variant = p;
            }
            if (play_time != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "play_time") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "play_time") { IsSerialized = true, Value = (float)play_time }; v.Variant = p;
            }
            if (frame_rate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "frame_rate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "frame_rate") { IsSerialized = true, Value = (float)frame_rate }; v.Variant = p;
            }
            if (ParticleScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ParticleScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ParticleScale") { IsSerialized = true, Value = (float)ParticleScale }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Translucency != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Translucency") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Translucency") { IsSerialized = true, Value = (float)Translucency }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _proxy_ad
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Translucency != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Translucency") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Translucency") { IsSerialized = true, Value = (float)Translucency }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _proxy_crowd
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Atlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Atlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Atlas") { IsSerialized = true, DepotPath = Atlas }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (Color1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color1") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color1") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color1.Red }, Green = new CUInt8() { Value = (Byte)Color1.Green }, Blue = new CUInt8() { Value = (Byte)Color1.Blue }, Alpha = new CUInt8() { Value = (Byte)Color1.Alpha } }; v.Variant = p;
            }
            if (Color2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color2") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color2") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color2.Red }, Green = new CUInt8() { Value = (Byte)Color2.Green }, Blue = new CUInt8() { Value = (Byte)Color2.Blue }, Alpha = new CUInt8() { Value = (Byte)Color2.Alpha } }; v.Variant = p;
            }
            if (Color3 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color3") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color3") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color3.Red }, Green = new CUInt8() { Value = (Byte)Color3.Green }, Blue = new CUInt8() { Value = (Byte)Color3.Blue }, Alpha = new CUInt8() { Value = (Byte)Color3.Alpha } }; v.Variant = p;
            }
            if (Color4 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color4") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color4") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color4.Red }, Green = new CUInt8() { Value = (Byte)Color4.Green }, Blue = new CUInt8() { Value = (Byte)Color4.Blue }, Alpha = new CUInt8() { Value = (Byte)Color4.Alpha } }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Translucency != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Translucency") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Translucency") { IsSerialized = true, Value = (float)Translucency }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (AtlasSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AtlasSize") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "AtlasSize") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)AtlasSize.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)AtlasSize.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)AtlasSize.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)AtlasSize.W };
            }
        }
    }
    public partial class _q116_mikoshi_cubes
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (PointCloudTextureHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PointCloudTextureHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "PointCloudTextureHeight") { IsSerialized = true, Value = (float)PointCloudTextureHeight }; v.Variant = p;
            }
            if (TransMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TransMin") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TransMin") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TransMin.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TransMin.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TransMin.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TransMin.W };
            }
            if (TransMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TransMax") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TransMax") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TransMax.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TransMax.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TransMax.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TransMax.W };
            }
            if (WorldPosTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldPosTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldPosTex") { IsSerialized = true, DepotPath = WorldPosTex }; v.Variant = p;
            }
            if (CubeSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CubeSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CubeSize") { IsSerialized = true, Value = (float)CubeSize }; v.Variant = p;
            }
            if (Tiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Tiling") { IsSerialized = true, Value = (float)Tiling }; v.Variant = p;
            }
            if (DiffuseVariationUvScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseVariationUvScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseVariationUvScale") { IsSerialized = true, Value = (float)DiffuseVariationUvScale }; v.Variant = p;
            }
            if (ParallaxHeightScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ParallaxHeightScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ParallaxHeightScale") { IsSerialized = true, Value = (float)ParallaxHeightScale }; v.Variant = p;
            }
            if (ParallaxFlip != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ParallaxFlip") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ParallaxFlip") { IsSerialized = true, Value = (float)ParallaxFlip }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (ExtraMasks != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ExtraMasks") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ExtraMasks") { IsSerialized = true, DepotPath = ExtraMasks }; v.Variant = p;
            }
            if (EdgeMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EdgeMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "EdgeMask") { IsSerialized = true, DepotPath = EdgeMask }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _q116_mikoshi_floor
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (FalloffDistanceStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FalloffDistanceStart") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FalloffDistanceStart") { IsSerialized = true, Value = (float)FalloffDistanceStart }; v.Variant = p;
            }
            if (FalloffDistanceEnd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FalloffDistanceEnd") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FalloffDistanceEnd") { IsSerialized = true, Value = (float)FalloffDistanceEnd }; v.Variant = p;
            }
            if (GlowBrightnessStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlowBrightnessStart") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlowBrightnessStart") { IsSerialized = true, Value = (float)GlowBrightnessStart }; v.Variant = p;
            }
            if (GlowBrightnessEnd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlowBrightnessEnd") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlowBrightnessEnd") { IsSerialized = true, Value = (float)GlowBrightnessEnd }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (VectorField1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField1") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField1") { IsSerialized = true, DepotPath = VectorField1 }; v.Variant = p;
            }
            if (VectorField2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField2") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField2") { IsSerialized = true, DepotPath = VectorField2 }; v.Variant = p;
            }
            if (VectorFieldSliceCount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldSliceCount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VectorFieldSliceCount") { IsSerialized = true, Value = (float)VectorFieldSliceCount }; v.Variant = p;
            }
            if (Grain != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Grain") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Grain") { IsSerialized = true, DepotPath = Grain }; v.Variant = p;
            }
        }
    }
    public partial class _q202_lake_surface
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Starmap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Starmap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Starmap") { IsSerialized = true, DepotPath = Starmap }; v.Variant = p;
            }
            if (Galaxy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Galaxy") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Galaxy") { IsSerialized = true, DepotPath = Galaxy }; v.Variant = p;
            }
            if (GalaxyIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GalaxyIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GalaxyIntensity") { IsSerialized = true, Value = (float)GalaxyIntensity }; v.Variant = p;
            }
            if (StarmapIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "StarmapIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "StarmapIntensity") { IsSerialized = true, Value = (float)StarmapIntensity }; v.Variant = p;
            }
            if (DimScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DimScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DimScale") { IsSerialized = true, Value = (float)DimScale }; v.Variant = p;
            }
            if (BrightScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BrightScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BrightScale") { IsSerialized = true, Value = (float)BrightScale }; v.Variant = p;
            }
            if (ConstelationScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ConstelationScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ConstelationScale") { IsSerialized = true, Value = (float)ConstelationScale }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _rain
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (RainType != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RainType") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RainType") { IsSerialized = true, Value = (float)RainType }; v.Variant = p;
            }
            if (WindNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindNoise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WindNoise") { IsSerialized = true, DepotPath = WindNoise }; v.Variant = p;
            }
            if (Speed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Speed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Speed") { IsSerialized = true, Value = (float)Speed }; v.Variant = p;
            }
            if (Scale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Scale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Scale") { IsSerialized = true, Value = (float)Scale }; v.Variant = p;
            }
            if (WindSkew != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindSkew") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WindSkew") { IsSerialized = true, Value = (float)WindSkew }; v.Variant = p;
            }
            if (WindStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WindStrength") { IsSerialized = true, Value = (float)WindStrength }; v.Variant = p;
            }
            if (WindDirectionMovement != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindDirectionMovement") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WindDirectionMovement") { IsSerialized = true, Value = (float)WindDirectionMovement }; v.Variant = p;
            }
            if (WindFrequency != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindFrequency") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WindFrequency") { IsSerialized = true, Value = (float)WindFrequency }; v.Variant = p;
            }
            if (Height != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Height") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Height") { IsSerialized = true, Value = (float)Height }; v.Variant = p;
            }
            if (Distance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Distance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Distance") { IsSerialized = true, Value = (float)Distance }; v.Variant = p;
            }
            if (Radius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Radius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Radius") { IsSerialized = true, Value = (float)Radius }; v.Variant = p;
            }
            if (BrightnessCards != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BrightnessCards") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BrightnessCards") { IsSerialized = true, Value = (float)BrightnessCards }; v.Variant = p;
            }
            if (BrightnessDrops != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BrightnessDrops") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BrightnessDrops") { IsSerialized = true, Value = (float)BrightnessDrops }; v.Variant = p;
            }
            if (MovementStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MovementStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MovementStrength") { IsSerialized = true, Value = (float)MovementStrength }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (UvSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvSpeed") { IsSerialized = true, Value = (float)UvSpeed }; v.Variant = p;
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
        }
    }
    public partial class _road_debug_grid
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (TransitionSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TransitionSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TransitionSize") { IsSerialized = true, Value = (float)TransitionSize }; v.Variant = p;
            }
            if (GridScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GridScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GridScale") { IsSerialized = true, Value = (float)GridScale }; v.Variant = p;
            }
            if (EnableWorldSpace != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableWorldSpace") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableWorldSpace") { IsSerialized = true, Value = (float)EnableWorldSpace }; v.Variant = p;
            }
        }
    }
    public partial class _set_stencil_3
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (ExtraThickness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ExtraThickness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ExtraThickness") { IsSerialized = true, Value = (float)ExtraThickness }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
        }
    }
    public partial class _silverhand_overlay
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DepthOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthOffset") { IsSerialized = true, Value = (float)DepthOffset }; v.Variant = p;
            }
            if (VectorField != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField") { IsSerialized = true, DepotPath = VectorField }; v.Variant = p;
            }
            if (GlitchChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchChance") { IsSerialized = true, Value = (float)GlitchChance }; v.Variant = p;
            }
            if (GlitchOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchOffset") { IsSerialized = true, Value = (float)GlitchOffset }; v.Variant = p;
            }
            if (GlitchTimeSeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchTimeSeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchTimeSeed") { IsSerialized = true, Value = (float)GlitchTimeSeed }; v.Variant = p;
            }
            if (FresnelMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FresnelMask") { IsSerialized = true, DepotPath = FresnelMask }; v.Variant = p;
            }
            if (FresnelMaskIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelMaskIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelMaskIntensity") { IsSerialized = true, Value = (float)FresnelMaskIntensity }; v.Variant = p;
            }
            if (GlobalNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlobalNormal") { IsSerialized = true, DepotPath = GlobalNormal }; v.Variant = p;
            }
            if (MultilayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Mask>(cr2w, v, "MultilayerMask") { IsSerialized = true, DepotPath = MultilayerMask }; v.Variant = p;
            }
            if (MultilayerSetup != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerSetup") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Setup>(cr2w, v, "MultilayerSetup") { IsSerialized = true, DepotPath = MultilayerSetup }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Emissive") { IsSerialized = true, Value = (float)Emissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (BayerScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BayerScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BayerScale") { IsSerialized = true, Value = (float)BayerScale }; v.Variant = p;
            }
            if (BayerIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BayerIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BayerIntensity") { IsSerialized = true, Value = (float)BayerIntensity }; v.Variant = p;
            }
            if (VertexColorSelection != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexColorSelection") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "VertexColorSelection") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)VertexColorSelection.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)VertexColorSelection.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)VertexColorSelection.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)VertexColorSelection.W };
            }
            if (VectorFieldTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VectorFieldTiling") { IsSerialized = true, Value = (float)VectorFieldTiling }; v.Variant = p;
            }
            if (VectorFieldIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VectorFieldIntensity") { IsSerialized = true, Value = (float)VectorFieldIntensity }; v.Variant = p;
            }
            if (VectorFieldAnim != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldAnim") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "VectorFieldAnim") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)VectorFieldAnim.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)VectorFieldAnim.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)VectorFieldAnim.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)VectorFieldAnim.W };
            }
            if (FresnelColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "FresnelColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)FresnelColor.Red }, Green = new CUInt8() { Value = (Byte)FresnelColor.Green }, Blue = new CUInt8() { Value = (Byte)FresnelColor.Blue }, Alpha = new CUInt8() { Value = (Byte)FresnelColor.Alpha } }; v.Variant = p;
            }
            if (FresnelColorIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColorIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelColorIntensity") { IsSerialized = true, Value = (float)FresnelColorIntensity }; v.Variant = p;
            }
            if (FresnelExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelExponent") { IsSerialized = true, Value = (float)FresnelExponent }; v.Variant = p;
            }
            if (MaskAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskAtlas") { IsSerialized = true, DepotPath = MaskAtlas }; v.Variant = p;
            }
            if (LayersStartIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersStartIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersStartIndex") { IsSerialized = true, Value = (float)LayersStartIndex }; v.Variant = p;
            }
            if (SurfaceTexAspectRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceTexAspectRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceTexAspectRatio") { IsSerialized = true, Value = (float)SurfaceTexAspectRatio }; v.Variant = p;
            }
            if (MaskToTileScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskToTileScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskToTileScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskToTileScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskToTileScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskToTileScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskToTileScale.W };
            }
            if (MaskTileSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTileSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskTileSize") { IsSerialized = true, Value = (float)MaskTileSize }; v.Variant = p;
            }
            if (MaskAtlasDims != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlasDims") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskAtlasDims") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskAtlasDims.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskAtlasDims.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskAtlasDims.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskAtlasDims.W };
            }
            if (MaskBaseResolution != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskBaseResolution") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskBaseResolution") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskBaseResolution.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskBaseResolution.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskBaseResolution.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskBaseResolution.W };
            }
            if (SetupLayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SetupLayerMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SetupLayerMask") { IsSerialized = true, Value = (float)SetupLayerMask }; v.Variant = p;
            }
        }
    }
    public partial class _silverhand_overlay_blendable
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (FadeOutDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutDistance") { IsSerialized = true, Value = (float)FadeOutDistance }; v.Variant = p;
            }
            if (FadeOutOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutOffset") { IsSerialized = true, Value = (float)FadeOutOffset }; v.Variant = p;
            }
            if (VectorField != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField") { IsSerialized = true, DepotPath = VectorField }; v.Variant = p;
            }
            if (GlitchChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchChance") { IsSerialized = true, Value = (float)GlitchChance }; v.Variant = p;
            }
            if (GlitchOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchOffset") { IsSerialized = true, Value = (float)GlitchOffset }; v.Variant = p;
            }
            if (GlitchTimeSeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchTimeSeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchTimeSeed") { IsSerialized = true, Value = (float)GlitchTimeSeed }; v.Variant = p;
            }
            if (FresnelMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FresnelMask") { IsSerialized = true, DepotPath = FresnelMask }; v.Variant = p;
            }
            if (FresnelMaskIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelMaskIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelMaskIntensity") { IsSerialized = true, Value = (float)FresnelMaskIntensity }; v.Variant = p;
            }
            if (FresnelColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "FresnelColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)FresnelColor.Red }, Green = new CUInt8() { Value = (Byte)FresnelColor.Green }, Blue = new CUInt8() { Value = (Byte)FresnelColor.Blue }, Alpha = new CUInt8() { Value = (Byte)FresnelColor.Alpha } }; v.Variant = p;
            }
            if (FresnelColorIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColorIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelColorIntensity") { IsSerialized = true, Value = (float)FresnelColorIntensity }; v.Variant = p;
            }
            if (FresnelExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelExponent") { IsSerialized = true, Value = (float)FresnelExponent }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Emissive") { IsSerialized = true, Value = (float)Emissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (BayerScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BayerScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BayerScale") { IsSerialized = true, Value = (float)BayerScale }; v.Variant = p;
            }
            if (BayerIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BayerIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BayerIntensity") { IsSerialized = true, Value = (float)BayerIntensity }; v.Variant = p;
            }
            if (VertexColorSelection != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexColorSelection") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "VertexColorSelection") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)VertexColorSelection.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)VertexColorSelection.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)VertexColorSelection.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)VertexColorSelection.W };
            }
            if (VectorFieldTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VectorFieldTiling") { IsSerialized = true, Value = (float)VectorFieldTiling }; v.Variant = p;
            }
            if (VectorFieldIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VectorFieldIntensity") { IsSerialized = true, Value = (float)VectorFieldIntensity }; v.Variant = p;
            }
            if (VectorFieldAnim != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldAnim") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "VectorFieldAnim") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)VectorFieldAnim.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)VectorFieldAnim.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)VectorFieldAnim.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)VectorFieldAnim.W };
            }
            if (GlobalNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlobalNormal") { IsSerialized = true, DepotPath = GlobalNormal }; v.Variant = p;
            }
            if (MultilayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Mask>(cr2w, v, "MultilayerMask") { IsSerialized = true, DepotPath = MultilayerMask }; v.Variant = p;
            }
            if (MultilayerSetup != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerSetup") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Setup>(cr2w, v, "MultilayerSetup") { IsSerialized = true, DepotPath = MultilayerSetup }; v.Variant = p;
            }
            if (MaskAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskAtlas") { IsSerialized = true, DepotPath = MaskAtlas }; v.Variant = p;
            }
            if (LayersStartIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersStartIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersStartIndex") { IsSerialized = true, Value = (float)LayersStartIndex }; v.Variant = p;
            }
            if (SurfaceTexAspectRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceTexAspectRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceTexAspectRatio") { IsSerialized = true, Value = (float)SurfaceTexAspectRatio }; v.Variant = p;
            }
            if (MaskToTileScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskToTileScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskToTileScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskToTileScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskToTileScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskToTileScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskToTileScale.W };
            }
            if (MaskTileSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTileSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskTileSize") { IsSerialized = true, Value = (float)MaskTileSize }; v.Variant = p;
            }
            if (MaskAtlasDims != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlasDims") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskAtlasDims") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskAtlasDims.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskAtlasDims.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskAtlasDims.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskAtlasDims.W };
            }
            if (MaskBaseResolution != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskBaseResolution") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskBaseResolution") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskBaseResolution.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskBaseResolution.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskBaseResolution.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskBaseResolution.W };
            }
            if (SetupLayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SetupLayerMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SetupLayerMask") { IsSerialized = true, Value = (float)SetupLayerMask }; v.Variant = p;
            }
        }
    }
    public partial class _skin
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Albedo != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Albedo") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Albedo") { IsSerialized = true, DepotPath = Albedo }; v.Variant = p;
            }
            if (SecondaryAlbedo != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryAlbedo") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SecondaryAlbedo") { IsSerialized = true, DepotPath = SecondaryAlbedo }; v.Variant = p;
            }
            if (SecondaryAlbedoInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryAlbedoInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryAlbedoInfluence") { IsSerialized = true, Value = (float)SecondaryAlbedoInfluence }; v.Variant = p;
            }
            if (SecondaryAlbedoTintColorInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryAlbedoTintColorInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryAlbedoTintColorInfluence") { IsSerialized = true, Value = (float)SecondaryAlbedoTintColorInfluence }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (DetailNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DetailNormal") { IsSerialized = true, DepotPath = DetailNormal }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (DetailRoughnessBiasMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailRoughnessBiasMin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DetailRoughnessBiasMin") { IsSerialized = true, Value = (float)DetailRoughnessBiasMin }; v.Variant = p;
            }
            if (DetailRoughnessBiasMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailRoughnessBiasMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DetailRoughnessBiasMax") { IsSerialized = true, Value = (float)DetailRoughnessBiasMax }; v.Variant = p;
            }
            if (MicroDetailUVScale01 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MicroDetailUVScale01") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MicroDetailUVScale01") { IsSerialized = true, Value = (float)MicroDetailUVScale01 }; v.Variant = p;
            }
            if (MicroDetailUVScale02 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MicroDetailUVScale02") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MicroDetailUVScale02") { IsSerialized = true, Value = (float)MicroDetailUVScale02 }; v.Variant = p;
            }
            if (MicroDetail != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MicroDetail") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MicroDetail") { IsSerialized = true, DepotPath = MicroDetail }; v.Variant = p;
            }
            if (MicroDetailInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MicroDetailInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MicroDetailInfluence") { IsSerialized = true, Value = (float)MicroDetailInfluence }; v.Variant = p;
            }
            if (TintColorMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColorMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "TintColorMask") { IsSerialized = true, DepotPath = TintColorMask }; v.Variant = p;
            }
            if (TintColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor.Red }, Green = new CUInt8() { Value = (Byte)TintColor.Green }, Blue = new CUInt8() { Value = (Byte)TintColor.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor.Alpha } }; v.Variant = p;
            }
            if (TintScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TintScale") { IsSerialized = true, Value = (float)TintScale }; v.Variant = p;
            }
            if (SkinProfile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SkinProfile") { IsSerialized = true }; m.Add(v);
                var p = new rRef<CSkinProfile>(cr2w, v, "SkinProfile") { IsSerialized = true, DepotPath = SkinProfile }; v.Variant = p;
            }
            if (Detailmap_Stretch != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Detailmap_Stretch") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Detailmap_Stretch") { IsSerialized = true, DepotPath = Detailmap_Stretch }; v.Variant = p;
            }
            if (EmissiveMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "EmissiveMask") { IsSerialized = true, DepotPath = EmissiveMask }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (Detailmap_Squash != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Detailmap_Squash") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Detailmap_Squash") { IsSerialized = true, DepotPath = Detailmap_Squash }; v.Variant = p;
            }
            if (CavityIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CavityIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CavityIntensity") { IsSerialized = true, Value = (float)CavityIntensity }; v.Variant = p;
            }
            if (Bloodflow != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Bloodflow") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Bloodflow") { IsSerialized = true, DepotPath = Bloodflow }; v.Variant = p;
            }
            if (BloodColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BloodColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BloodColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BloodColor.Red }, Green = new CUInt8() { Value = (Byte)BloodColor.Green }, Blue = new CUInt8() { Value = (Byte)BloodColor.Blue }, Alpha = new CUInt8() { Value = (Byte)BloodColor.Alpha } }; v.Variant = p;
            }
            if (DetailNormalInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailNormalInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DetailNormalInfluence") { IsSerialized = true, Value = (float)DetailNormalInfluence }; v.Variant = p;
            }
        }
    }
    public partial class _skin_blendable
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VectorField != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField") { IsSerialized = true, DepotPath = VectorField }; v.Variant = p;
            }
            if (FadeOutDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutDistance") { IsSerialized = true, Value = (float)FadeOutDistance }; v.Variant = p;
            }
            if (FadeOutOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutOffset") { IsSerialized = true, Value = (float)FadeOutOffset }; v.Variant = p;
            }
            if (GlitchChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchChance") { IsSerialized = true, Value = (float)GlitchChance }; v.Variant = p;
            }
            if (GlitchOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchOffset") { IsSerialized = true, Value = (float)GlitchOffset }; v.Variant = p;
            }
            if (FresnelColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "FresnelColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)FresnelColor.Red }, Green = new CUInt8() { Value = (Byte)FresnelColor.Green }, Blue = new CUInt8() { Value = (Byte)FresnelColor.Blue }, Alpha = new CUInt8() { Value = (Byte)FresnelColor.Alpha } }; v.Variant = p;
            }
            if (FresnelColorIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColorIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelColorIntensity") { IsSerialized = true, Value = (float)FresnelColorIntensity }; v.Variant = p;
            }
            if (FresnelExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelExponent") { IsSerialized = true, Value = (float)FresnelExponent }; v.Variant = p;
            }
            if (Albedo != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Albedo") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Albedo") { IsSerialized = true, DepotPath = Albedo }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (DetailNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DetailNormal") { IsSerialized = true, DepotPath = DetailNormal }; v.Variant = p;
            }
            if (DetailNormalInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailNormalInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DetailNormalInfluence") { IsSerialized = true, Value = (float)DetailNormalInfluence }; v.Variant = p;
            }
            if (CavityIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CavityIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CavityIntensity") { IsSerialized = true, Value = (float)CavityIntensity }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (DetailRoughnessBiasMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailRoughnessBiasMin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DetailRoughnessBiasMin") { IsSerialized = true, Value = (float)DetailRoughnessBiasMin }; v.Variant = p;
            }
            if (DetailRoughnessBiasMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailRoughnessBiasMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DetailRoughnessBiasMax") { IsSerialized = true, Value = (float)DetailRoughnessBiasMax }; v.Variant = p;
            }
            if (MicroDetail != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MicroDetail") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MicroDetail") { IsSerialized = true, DepotPath = MicroDetail }; v.Variant = p;
            }
            if (MicroDetailUVScale01 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MicroDetailUVScale01") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MicroDetailUVScale01") { IsSerialized = true, Value = (float)MicroDetailUVScale01 }; v.Variant = p;
            }
            if (MicroDetailUVScale02 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MicroDetailUVScale02") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MicroDetailUVScale02") { IsSerialized = true, Value = (float)MicroDetailUVScale02 }; v.Variant = p;
            }
            if (MicroDetailInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MicroDetailInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MicroDetailInfluence") { IsSerialized = true, Value = (float)MicroDetailInfluence }; v.Variant = p;
            }
            if (TintColorMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColorMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "TintColorMask") { IsSerialized = true, DepotPath = TintColorMask }; v.Variant = p;
            }
            if (TintColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor.Red }, Green = new CUInt8() { Value = (Byte)TintColor.Green }, Blue = new CUInt8() { Value = (Byte)TintColor.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor.Alpha } }; v.Variant = p;
            }
            if (TintScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TintScale") { IsSerialized = true, Value = (float)TintScale }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (Detailmap_Stretch != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Detailmap_Stretch") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Detailmap_Stretch") { IsSerialized = true, DepotPath = Detailmap_Stretch }; v.Variant = p;
            }
            if (Detailmap_Squash != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Detailmap_Squash") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Detailmap_Squash") { IsSerialized = true, DepotPath = Detailmap_Squash }; v.Variant = p;
            }
            if (Bloodflow != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Bloodflow") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Bloodflow") { IsSerialized = true, DepotPath = Bloodflow }; v.Variant = p;
            }
            if (BloodColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BloodColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BloodColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BloodColor.Red }, Green = new CUInt8() { Value = (Byte)BloodColor.Green }, Blue = new CUInt8() { Value = (Byte)BloodColor.Blue }, Alpha = new CUInt8() { Value = (Byte)BloodColor.Alpha } }; v.Variant = p;
            }
            if (SkinProfile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SkinProfile") { IsSerialized = true }; m.Add(v);
                var p = new rRef<CSkinProfile>(cr2w, v, "SkinProfile") { IsSerialized = true, DepotPath = SkinProfile }; v.Variant = p;
            }
        }
    }
    public partial class _skybox
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (DiffuseDayTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseDayTime") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseDayTime") { IsSerialized = true, DepotPath = DiffuseDayTime }; v.Variant = p;
            }
            if (DiffuseNightTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseNightTime") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseNightTime") { IsSerialized = true, DepotPath = DiffuseNightTime }; v.Variant = p;
            }
        }
    }
    public partial class _speedtree_3d_v8_billboard
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (WindNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindNoise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WindNoise") { IsSerialized = true, DepotPath = WindNoise }; v.Variant = p;
            }
            if (WindLodFlags != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindLodFlags") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WindLodFlags") { IsSerialized = true, Value = (float)WindLodFlags }; v.Variant = p;
            }
            if (WindDataAvailable != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindDataAvailable") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WindDataAvailable") { IsSerialized = true, Value = (float)WindDataAvailable }; v.Variant = p;
            }
            if (HorizontalBillboardsCount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HorizontalBillboardsCount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HorizontalBillboardsCount") { IsSerialized = true, Value = (float)HorizontalBillboardsCount }; v.Variant = p;
            }
            if (ContainsTopBillboard != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ContainsTopBillboard") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ContainsTopBillboard") { IsSerialized = true, Value = (float)ContainsTopBillboard }; v.Variant = p;
            }
            if (TreeCrownRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TreeCrownRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TreeCrownRadius") { IsSerialized = true, Value = (float)TreeCrownRadius }; v.Variant = p;
            }
            if (DiffuseMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseMap") { IsSerialized = true, DepotPath = DiffuseMap }; v.Variant = p;
            }
            if (NormalMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalMap") { IsSerialized = true, DepotPath = NormalMap }; v.Variant = p;
            }
            if (TransGlossMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TransGlossMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "TransGlossMap") { IsSerialized = true, DepotPath = TransGlossMap }; v.Variant = p;
            }
            if (FoliageProfileMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FoliageProfileMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FoliageProfileMap") { IsSerialized = true, DepotPath = FoliageProfileMap }; v.Variant = p;
            }
            if (FoliageProfile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FoliageProfile") { IsSerialized = true }; m.Add(v);
                var p = new rRef<CFoliageProfile>(cr2w, v, "FoliageProfile") { IsSerialized = true, DepotPath = FoliageProfile }; v.Variant = p;
            }
            if (MeshTotalHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MeshTotalHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MeshTotalHeight") { IsSerialized = true, Value = (float)MeshTotalHeight }; v.Variant = p;
            }
            if (ForceTerrainBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ForceTerrainBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ForceTerrainBlend") { IsSerialized = true, Value = (float)ForceTerrainBlend }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
        }
    }
    public partial class _speedtree_3d_v8_onesided
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (WindNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindNoise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WindNoise") { IsSerialized = true, DepotPath = WindNoise }; v.Variant = p;
            }
            if (BonesPositionsMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BonesPositionsMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BonesPositionsMap") { IsSerialized = true, DepotPath = BonesPositionsMap }; v.Variant = p;
            }
            if (BonesAdditionalDataMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BonesAdditionalDataMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BonesAdditionalDataMap") { IsSerialized = true, DepotPath = BonesAdditionalDataMap }; v.Variant = p;
            }
            if (BoneMapData != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BoneMapData") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BoneMapData") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BoneMapData.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BoneMapData.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BoneMapData.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BoneMapData.W };
            }
            if (WindLodFlags != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindLodFlags") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WindLodFlags") { IsSerialized = true, Value = (float)WindLodFlags }; v.Variant = p;
            }
            if (WindDataAvailable != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindDataAvailable") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WindDataAvailable") { IsSerialized = true, Value = (float)WindDataAvailable }; v.Variant = p;
            }
            if (DiffuseMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseMap") { IsSerialized = true, DepotPath = DiffuseMap }; v.Variant = p;
            }
            if (NormalMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalMap") { IsSerialized = true, DepotPath = NormalMap }; v.Variant = p;
            }
            if (TransGlossMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TransGlossMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "TransGlossMap") { IsSerialized = true, DepotPath = TransGlossMap }; v.Variant = p;
            }
            if (FoliageProfileMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FoliageProfileMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FoliageProfileMap") { IsSerialized = true, DepotPath = FoliageProfileMap }; v.Variant = p;
            }
            if (FoliageProfile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FoliageProfile") { IsSerialized = true }; m.Add(v);
                var p = new rRef<CFoliageProfile>(cr2w, v, "FoliageProfile") { IsSerialized = true, DepotPath = FoliageProfile }; v.Variant = p;
            }
            if (MeshTotalHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MeshTotalHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MeshTotalHeight") { IsSerialized = true, Value = (float)MeshTotalHeight }; v.Variant = p;
            }
            if (ForceTerrainBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ForceTerrainBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ForceTerrainBlend") { IsSerialized = true, Value = (float)ForceTerrainBlend }; v.Variant = p;
            }
        }
    }
    public partial class _speedtree_3d_v8_onesided_gradient_recolor
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
            if (GradientMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GradientMap") { IsSerialized = true, DepotPath = GradientMap }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
        }
    }
    public partial class _speedtree_3d_v8_seams
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (WindNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindNoise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WindNoise") { IsSerialized = true, DepotPath = WindNoise }; v.Variant = p;
            }
            if (BoneMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BoneMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BoneMap") { IsSerialized = true, DepotPath = BoneMap }; v.Variant = p;
            }
            if (BonesPositionsMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BonesPositionsMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BonesPositionsMap") { IsSerialized = true, DepotPath = BonesPositionsMap }; v.Variant = p;
            }
            if (BonesAdditionalDataMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BonesAdditionalDataMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BonesAdditionalDataMap") { IsSerialized = true, DepotPath = BonesAdditionalDataMap }; v.Variant = p;
            }
            if (BoneMapData != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BoneMapData") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BoneMapData") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BoneMapData.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BoneMapData.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BoneMapData.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BoneMapData.W };
            }
            if (WindLodFlags != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindLodFlags") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WindLodFlags") { IsSerialized = true, Value = (float)WindLodFlags }; v.Variant = p;
            }
            if (WindDataAvailable != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindDataAvailable") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WindDataAvailable") { IsSerialized = true, Value = (float)WindDataAvailable }; v.Variant = p;
            }
            if (DiffuseMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseMap") { IsSerialized = true, DepotPath = DiffuseMap }; v.Variant = p;
            }
            if (NormalMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalMap") { IsSerialized = true, DepotPath = NormalMap }; v.Variant = p;
            }
            if (TransGlossMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TransGlossMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "TransGlossMap") { IsSerialized = true, DepotPath = TransGlossMap }; v.Variant = p;
            }
            if (FoliageProfileMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FoliageProfileMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FoliageProfileMap") { IsSerialized = true, DepotPath = FoliageProfileMap }; v.Variant = p;
            }
            if (FoliageProfile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FoliageProfile") { IsSerialized = true }; m.Add(v);
                var p = new rRef<CFoliageProfile>(cr2w, v, "FoliageProfile") { IsSerialized = true, DepotPath = FoliageProfile }; v.Variant = p;
            }
            if (MeshTotalHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MeshTotalHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MeshTotalHeight") { IsSerialized = true, Value = (float)MeshTotalHeight }; v.Variant = p;
            }
            if (ForceTerrainBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ForceTerrainBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ForceTerrainBlend") { IsSerialized = true, Value = (float)ForceTerrainBlend }; v.Variant = p;
            }
        }
    }
    public partial class _speedtree_3d_v8_twosided
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (WindNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindNoise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WindNoise") { IsSerialized = true, DepotPath = WindNoise }; v.Variant = p;
            }
            if (BoneMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BoneMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BoneMap") { IsSerialized = true, DepotPath = BoneMap }; v.Variant = p;
            }
            if (BonesPositionsMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BonesPositionsMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BonesPositionsMap") { IsSerialized = true, DepotPath = BonesPositionsMap }; v.Variant = p;
            }
            if (BonesAdditionalDataMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BonesAdditionalDataMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BonesAdditionalDataMap") { IsSerialized = true, DepotPath = BonesAdditionalDataMap }; v.Variant = p;
            }
            if (BoneMapData != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BoneMapData") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BoneMapData") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BoneMapData.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BoneMapData.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BoneMapData.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BoneMapData.W };
            }
            if (WindLodFlags != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindLodFlags") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WindLodFlags") { IsSerialized = true, Value = (float)WindLodFlags }; v.Variant = p;
            }
            if (WindDataAvailable != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindDataAvailable") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WindDataAvailable") { IsSerialized = true, Value = (float)WindDataAvailable }; v.Variant = p;
            }
            if (TwosidedFlipN != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TwosidedFlipN") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TwosidedFlipN") { IsSerialized = true, Value = (float)TwosidedFlipN }; v.Variant = p;
            }
            if (DiffuseMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseMap") { IsSerialized = true, DepotPath = DiffuseMap }; v.Variant = p;
            }
            if (NormalMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalMap") { IsSerialized = true, DepotPath = NormalMap }; v.Variant = p;
            }
            if (TransGlossMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TransGlossMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "TransGlossMap") { IsSerialized = true, DepotPath = TransGlossMap }; v.Variant = p;
            }
            if (FoliageProfileMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FoliageProfileMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FoliageProfileMap") { IsSerialized = true, DepotPath = FoliageProfileMap }; v.Variant = p;
            }
            if (FoliageProfile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FoliageProfile") { IsSerialized = true }; m.Add(v);
                var p = new rRef<CFoliageProfile>(cr2w, v, "FoliageProfile") { IsSerialized = true, DepotPath = FoliageProfile }; v.Variant = p;
            }
            if (MeshTotalHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MeshTotalHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MeshTotalHeight") { IsSerialized = true, Value = (float)MeshTotalHeight }; v.Variant = p;
            }
            if (ForceTerrainBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ForceTerrainBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ForceTerrainBlend") { IsSerialized = true, Value = (float)ForceTerrainBlend }; v.Variant = p;
            }
        }
    }
    public partial class _spline_deformed_metal_base
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (SplineLength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SplineLength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SplineLength") { IsSerialized = true, Value = (float)SplineLength }; v.Variant = p;
            }
            if (SpanCount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SpanCount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SpanCount") { IsSerialized = true, Value = (float)SpanCount }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Translucency != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Translucency") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Translucency") { IsSerialized = true, Value = (float)Translucency }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _terrain_simple
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (UVGenScaleOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVGenScaleOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "UVGenScaleOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)UVGenScaleOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)UVGenScaleOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)UVGenScaleOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)UVGenScaleOffset.W };
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (GlobalNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlobalNormal") { IsSerialized = true, DepotPath = GlobalNormal }; v.Variant = p;
            }
            if (MaskFoliage != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskFoliage") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskFoliage") { IsSerialized = true, DepotPath = MaskFoliage }; v.Variant = p;
            }
        }
    }
    public partial class _top_down_car_proxy_depth
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _trail_decal
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DepthOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthOffset") { IsSerialized = true, Value = (float)DepthOffset }; v.Variant = p;
            }
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
        }
    }
    public partial class _trail_decal_normal
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DepthOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthOffset") { IsSerialized = true, Value = (float)DepthOffset }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
        }
    }
    public partial class _trail_decal_normal_color
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DepthOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthOffset") { IsSerialized = true, Value = (float)DepthOffset }; v.Variant = p;
            }
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
        }
    }
    public partial class _transparent_liquid
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (SurfaceMetalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceMetalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceMetalness") { IsSerialized = true, Value = (float)SurfaceMetalness }; v.Variant = p;
            }
            if (ScatteringColorThin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatteringColorThin") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ScatteringColorThin") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ScatteringColorThin.Red }, Green = new CUInt8() { Value = (Byte)ScatteringColorThin.Green }, Blue = new CUInt8() { Value = (Byte)ScatteringColorThin.Blue }, Alpha = new CUInt8() { Value = (Byte)ScatteringColorThin.Alpha } }; v.Variant = p;
            }
            if (ScatteringColorThick != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatteringColorThick") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ScatteringColorThick") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ScatteringColorThick.Red }, Green = new CUInt8() { Value = (Byte)ScatteringColorThick.Green }, Blue = new CUInt8() { Value = (Byte)ScatteringColorThick.Blue }, Alpha = new CUInt8() { Value = (Byte)ScatteringColorThick.Alpha } }; v.Variant = p;
            }
            if (Albedo != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Albedo") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Albedo") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Albedo.Red }, Green = new CUInt8() { Value = (Byte)Albedo.Green }, Blue = new CUInt8() { Value = (Byte)Albedo.Blue }, Alpha = new CUInt8() { Value = (Byte)Albedo.Alpha } }; v.Variant = p;
            }
            if (IOR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IOR") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IOR") { IsSerialized = true, Value = (float)IOR }; v.Variant = p;
            }
            if (FresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelBias") { IsSerialized = true, Value = (float)FresnelBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (SpecularStrengthMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SpecularStrengthMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SpecularStrengthMultiplier") { IsSerialized = true, Value = (float)SpecularStrengthMultiplier }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (MaskOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskOpacity") { IsSerialized = true, Value = (float)MaskOpacity }; v.Variant = p;
            }
            if (ThicknessMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ThicknessMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ThicknessMultiplier") { IsSerialized = true, Value = (float)ThicknessMultiplier }; v.Variant = p;
            }
            if (SubUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVWidth") { IsSerialized = true, Value = (float)SubUVWidth }; v.Variant = p;
            }
            if (SubUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVHeight") { IsSerialized = true, Value = (float)SubUVHeight }; v.Variant = p;
            }
            if (InterpolateFrames != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InterpolateFrames") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InterpolateFrames") { IsSerialized = true, Value = (float)InterpolateFrames }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (NormalTilingAndScrolling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTilingAndScrolling") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NormalTilingAndScrolling") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NormalTilingAndScrolling.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NormalTilingAndScrolling.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NormalTilingAndScrolling.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NormalTilingAndScrolling.W };
            }
            if (Distort != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Distort") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Distort") { IsSerialized = true, DepotPath = Distort }; v.Variant = p;
            }
            if (DistortAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortAmount") { IsSerialized = true, Value = (float)DistortAmount }; v.Variant = p;
            }
            if (DistortTilingAndScrolling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortTilingAndScrolling") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DistortTilingAndScrolling") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DistortTilingAndScrolling.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DistortTilingAndScrolling.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DistortTilingAndScrolling.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DistortTilingAndScrolling.W };
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
            if (EnableRowAnimation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRowAnimation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRowAnimation") { IsSerialized = true, Value = (float)EnableRowAnimation }; v.Variant = p;
            }
            if (UseOnStaticMeshes != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseOnStaticMeshes") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseOnStaticMeshes") { IsSerialized = true, Value = (float)UseOnStaticMeshes }; v.Variant = p;
            }
        }
    }
    public partial class _underwater_blood
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (DebugTimeOverride != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugTimeOverride") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DebugTimeOverride") { IsSerialized = true, Value = (float)DebugTimeOverride }; v.Variant = p;
            }
            if (n_frames != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_frames") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_frames") { IsSerialized = true, Value = (float)n_frames }; v.Variant = p;
            }
            if (frame_rate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "frame_rate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "frame_rate") { IsSerialized = true, Value = (float)frame_rate }; v.Variant = p;
            }
            if (StartDelayFrames != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "StartDelayFrames") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "StartDelayFrames") { IsSerialized = true, Value = (float)StartDelayFrames }; v.Variant = p;
            }
            if (SimulationAtlasFrameCountX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SimulationAtlasFrameCountX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SimulationAtlasFrameCountX") { IsSerialized = true, Value = (float)SimulationAtlasFrameCountX }; v.Variant = p;
            }
            if (SimulationAtlasFrameCountY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SimulationAtlasFrameCountY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SimulationAtlasFrameCountY") { IsSerialized = true, Value = (float)SimulationAtlasFrameCountY }; v.Variant = p;
            }
            if (SimulationAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SimulationAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SimulationAtlas") { IsSerialized = true, DepotPath = SimulationAtlas }; v.Variant = p;
            }
            if (SpeedExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SpeedExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SpeedExponent") { IsSerialized = true, Value = (float)SpeedExponent }; v.Variant = p;
            }
            if (ColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorScale.Red }, Green = new CUInt8() { Value = (Byte)ColorScale.Green }, Blue = new CUInt8() { Value = (Byte)ColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorScale.Alpha } }; v.Variant = p;
            }
            if (ColorScale1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorScale1") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorScale1") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorScale1.Red }, Green = new CUInt8() { Value = (Byte)ColorScale1.Green }, Blue = new CUInt8() { Value = (Byte)ColorScale1.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorScale1.Alpha } }; v.Variant = p;
            }
            if (ColorScale2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorScale2") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorScale2") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorScale2.Red }, Green = new CUInt8() { Value = (Byte)ColorScale2.Green }, Blue = new CUInt8() { Value = (Byte)ColorScale2.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorScale2.Alpha } }; v.Variant = p;
            }
            if (ColorGradientPositions != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorGradientPositions") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "ColorGradientPositions") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)ColorGradientPositions.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)ColorGradientPositions.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)ColorGradientPositions.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)ColorGradientPositions.W };
            }
            if (ColorMode != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMode") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMode") { IsSerialized = true, Value = (float)ColorMode }; v.Variant = p;
            }
        }
    }
    public partial class _vehicle_destr_blendshape
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DamageInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DamageInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DamageInfluence") { IsSerialized = true, Value = (float)DamageInfluence }; v.Variant = p;
            }
            if (DamageInfluenceDebug != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DamageInfluenceDebug") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DamageInfluenceDebug") { IsSerialized = true, Value = (float)DamageInfluenceDebug }; v.Variant = p;
            }
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (TextureTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TextureTiling") { IsSerialized = true, Value = (float)TextureTiling }; v.Variant = p;
            }
            if (BakedNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BakedNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BakedNormal") { IsSerialized = true, DepotPath = BakedNormal }; v.Variant = p;
            }
            if (ScratchMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScratchMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ScratchMask") { IsSerialized = true, DepotPath = ScratchMask }; v.Variant = p;
            }
            if (DirtMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DirtMap") { IsSerialized = true, DepotPath = DirtMap }; v.Variant = p;
            }
            if (MultilayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Mask>(cr2w, v, "MultilayerMask") { IsSerialized = true, DepotPath = MultilayerMask }; v.Variant = p;
            }
            if (MultilayerSetup != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerSetup") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Setup>(cr2w, v, "MultilayerSetup") { IsSerialized = true, DepotPath = MultilayerSetup }; v.Variant = p;
            }
            if (GlobalNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlobalNormal") { IsSerialized = true, DepotPath = GlobalNormal }; v.Variant = p;
            }
            if (ScratchResistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScratchResistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScratchResistance") { IsSerialized = true, Value = (float)ScratchResistance }; v.Variant = p;
            }
            if (DirtOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DirtOpacity") { IsSerialized = true, Value = (float)DirtOpacity }; v.Variant = p;
            }
            if (DirtColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DirtColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DirtColor.Red }, Green = new CUInt8() { Value = (Byte)DirtColor.Green }, Blue = new CUInt8() { Value = (Byte)DirtColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DirtColor.Alpha } }; v.Variant = p;
            }
            if (DirtMaskOffsets != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtMaskOffsets") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DirtMaskOffsets") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DirtMaskOffsets.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DirtMaskOffsets.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DirtMaskOffsets.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DirtMaskOffsets.W };
            }
            if (CoatTintFwd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatTintFwd") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "CoatTintFwd") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)CoatTintFwd.Red }, Green = new CUInt8() { Value = (Byte)CoatTintFwd.Green }, Blue = new CUInt8() { Value = (Byte)CoatTintFwd.Blue }, Alpha = new CUInt8() { Value = (Byte)CoatTintFwd.Alpha } }; v.Variant = p;
            }
            if (CoatTintSide != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatTintSide") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "CoatTintSide") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)CoatTintSide.Red }, Green = new CUInt8() { Value = (Byte)CoatTintSide.Green }, Blue = new CUInt8() { Value = (Byte)CoatTintSide.Blue }, Alpha = new CUInt8() { Value = (Byte)CoatTintSide.Alpha } }; v.Variant = p;
            }
            if (CoatTintFresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatTintFresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CoatTintFresnelBias") { IsSerialized = true, Value = (float)CoatTintFresnelBias }; v.Variant = p;
            }
            if (CoatSpecularColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatSpecularColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "CoatSpecularColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)CoatSpecularColor.Red }, Green = new CUInt8() { Value = (Byte)CoatSpecularColor.Green }, Blue = new CUInt8() { Value = (Byte)CoatSpecularColor.Blue }, Alpha = new CUInt8() { Value = (Byte)CoatSpecularColor.Alpha } }; v.Variant = p;
            }
            if (CoatFresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatFresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CoatFresnelBias") { IsSerialized = true, Value = (float)CoatFresnelBias }; v.Variant = p;
            }
            if (CoatLayerMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatLayerMin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CoatLayerMin") { IsSerialized = true, Value = (float)CoatLayerMin }; v.Variant = p;
            }
            if (CoatLayerMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CoatLayerMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CoatLayerMax") { IsSerialized = true, Value = (float)CoatLayerMax }; v.Variant = p;
            }
            if (MaskAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskAtlas") { IsSerialized = true, DepotPath = MaskAtlas }; v.Variant = p;
            }
            if (LayersStartIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersStartIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersStartIndex") { IsSerialized = true, Value = (float)LayersStartIndex }; v.Variant = p;
            }
            if (SurfaceTexAspectRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceTexAspectRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceTexAspectRatio") { IsSerialized = true, Value = (float)SurfaceTexAspectRatio }; v.Variant = p;
            }
            if (MaskToTileScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskToTileScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskToTileScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskToTileScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskToTileScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskToTileScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskToTileScale.W };
            }
            if (MaskTileSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTileSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskTileSize") { IsSerialized = true, Value = (float)MaskTileSize }; v.Variant = p;
            }
            if (MaskAtlasDims != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlasDims") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskAtlasDims") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskAtlasDims.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskAtlasDims.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskAtlasDims.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskAtlasDims.W };
            }
            if (MaskBaseResolution != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskBaseResolution") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskBaseResolution") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskBaseResolution.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskBaseResolution.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskBaseResolution.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskBaseResolution.W };
            }
            if (SetupLayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SetupLayerMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SetupLayerMask") { IsSerialized = true, Value = (float)SetupLayerMask }; v.Variant = p;
            }
        }
    }
    public partial class _vehicle_glass
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (UvTilingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingX") { IsSerialized = true, Value = (float)UvTilingX }; v.Variant = p;
            }
            if (UvTilingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingY") { IsSerialized = true, Value = (float)UvTilingY }; v.Variant = p;
            }
            if (UvOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetX") { IsSerialized = true, Value = (float)UvOffsetX }; v.Variant = p;
            }
            if (UvOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetY") { IsSerialized = true, Value = (float)UvOffsetY }; v.Variant = p;
            }
            if (DamageInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DamageInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DamageInfluence") { IsSerialized = true, Value = (float)DamageInfluence }; v.Variant = p;
            }
            if (DamageInfluenceDebug != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DamageInfluenceDebug") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DamageInfluenceDebug") { IsSerialized = true, Value = (float)DamageInfluenceDebug }; v.Variant = p;
            }
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (OpacityBackFace != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OpacityBackFace") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OpacityBackFace") { IsSerialized = true, Value = (float)OpacityBackFace }; v.Variant = p;
            }
            if (GlassTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTint") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlassTint") { IsSerialized = true, DepotPath = GlassTint }; v.Variant = p;
            }
            if (TintColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor.Red }, Green = new CUInt8() { Value = (Byte)TintColor.Green }, Blue = new CUInt8() { Value = (Byte)TintColor.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor.Alpha } }; v.Variant = p;
            }
            if (TintSurface != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintSurface") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintSurface") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintSurface.Red }, Green = new CUInt8() { Value = (Byte)TintSurface.Green }, Blue = new CUInt8() { Value = (Byte)TintSurface.Blue }, Alpha = new CUInt8() { Value = (Byte)TintSurface.Alpha } }; v.Variant = p;
            }
            if (FrontFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FrontFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FrontFacesReflectionPower") { IsSerialized = true, Value = (float)FrontFacesReflectionPower }; v.Variant = p;
            }
            if (BackFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BackFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BackFacesReflectionPower") { IsSerialized = true, Value = (float)BackFacesReflectionPower }; v.Variant = p;
            }
            if (FresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelBias") { IsSerialized = true, Value = (float)FresnelBias }; v.Variant = p;
            }
            if (GlassSpecularColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassSpecularColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "GlassSpecularColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)GlassSpecularColor.Red }, Green = new CUInt8() { Value = (Byte)GlassSpecularColor.Green }, Blue = new CUInt8() { Value = (Byte)GlassSpecularColor.Blue }, Alpha = new CUInt8() { Value = (Byte)GlassSpecularColor.Alpha } }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (SurfaceMetalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceMetalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceMetalness") { IsSerialized = true, Value = (float)SurfaceMetalness }; v.Variant = p;
            }
            if (MaskOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskOpacity") { IsSerialized = true, Value = (float)MaskOpacity }; v.Variant = p;
            }
            if (MaskRoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskRoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskRoughnessBias") { IsSerialized = true, Value = (float)MaskRoughnessBias }; v.Variant = p;
            }
            if (UseDamageGrid != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseDamageGrid") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseDamageGrid") { IsSerialized = true, Value = (float)UseDamageGrid }; v.Variant = p;
            }
            if (UseShatterPoints != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseShatterPoints") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseShatterPoints") { IsSerialized = true, Value = (float)UseShatterPoints }; v.Variant = p;
            }
            if (ShatterColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShatterColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ShatterColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ShatterColor.Red }, Green = new CUInt8() { Value = (Byte)ShatterColor.Green }, Blue = new CUInt8() { Value = (Byte)ShatterColor.Blue }, Alpha = new CUInt8() { Value = (Byte)ShatterColor.Alpha } }; v.Variant = p;
            }
            if (ShatterTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShatterTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ShatterTexture") { IsSerialized = true, DepotPath = ShatterTexture }; v.Variant = p;
            }
            if (ShatterNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShatterNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ShatterNormal") { IsSerialized = true, DepotPath = ShatterNormal }; v.Variant = p;
            }
            if (ShatterNormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShatterNormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ShatterNormalStrength") { IsSerialized = true, Value = (float)ShatterNormalStrength }; v.Variant = p;
            }
            if (ShatterRadiusScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShatterRadiusScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ShatterRadiusScale") { IsSerialized = true, Value = (float)ShatterRadiusScale }; v.Variant = p;
            }
            if (ShatterAspectRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShatterAspectRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ShatterAspectRatio") { IsSerialized = true, Value = (float)ShatterAspectRatio }; v.Variant = p;
            }
            if (ShatterCutout != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShatterCutout") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ShatterCutout") { IsSerialized = true, Value = (float)ShatterCutout }; v.Variant = p;
            }
            if (DamageGridCutout != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DamageGridCutout") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DamageGridCutout") { IsSerialized = true, Value = (float)DamageGridCutout }; v.Variant = p;
            }
            if (DebugShatterPoint0 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugShatterPoint0") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DebugShatterPoint0") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DebugShatterPoint0.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DebugShatterPoint0.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DebugShatterPoint0.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DebugShatterPoint0.W };
            }
            if (Cracks != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Cracks") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Cracks") { IsSerialized = true, DepotPath = Cracks }; v.Variant = p;
            }
            if (CracksTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CracksTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CracksTiling") { IsSerialized = true, Value = (float)CracksTiling }; v.Variant = p;
            }
            if (DotsNormalTxt != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsNormalTxt") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DotsNormalTxt") { IsSerialized = true, DepotPath = DotsNormalTxt }; v.Variant = p;
            }
            if (DotsTxt != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsTxt") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DotsTxt") { IsSerialized = true, DepotPath = DotsTxt }; v.Variant = p;
            }
            if (FlowTxt != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlowTxt") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FlowTxt") { IsSerialized = true, DepotPath = FlowTxt }; v.Variant = p;
            }
            if (WiperMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WiperMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WiperMask") { IsSerialized = true, DepotPath = WiperMask }; v.Variant = p;
            }
        }
    }
    public partial class _vehicle_glass_proxy
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (UvTilingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingX") { IsSerialized = true, Value = (float)UvTilingX }; v.Variant = p;
            }
            if (UvTilingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingY") { IsSerialized = true, Value = (float)UvTilingY }; v.Variant = p;
            }
            if (UvOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetX") { IsSerialized = true, Value = (float)UvOffsetX }; v.Variant = p;
            }
            if (UvOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetY") { IsSerialized = true, Value = (float)UvOffsetY }; v.Variant = p;
            }
            if (GlassTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTint") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlassTint") { IsSerialized = true, DepotPath = GlassTint }; v.Variant = p;
            }
            if (TintColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor.Red }, Green = new CUInt8() { Value = (Byte)TintColor.Green }, Blue = new CUInt8() { Value = (Byte)TintColor.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor.Alpha } }; v.Variant = p;
            }
            if (FrontFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FrontFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FrontFacesReflectionPower") { IsSerialized = true, Value = (float)FrontFacesReflectionPower }; v.Variant = p;
            }
            if (GlassSpecularColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassSpecularColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "GlassSpecularColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)GlassSpecularColor.Red }, Green = new CUInt8() { Value = (Byte)GlassSpecularColor.Green }, Blue = new CUInt8() { Value = (Byte)GlassSpecularColor.Blue }, Alpha = new CUInt8() { Value = (Byte)GlassSpecularColor.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _vehicle_lights
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (UvTilingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingX") { IsSerialized = true, Value = (float)UvTilingX }; v.Variant = p;
            }
            if (UvTilingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingY") { IsSerialized = true, Value = (float)UvTilingY }; v.Variant = p;
            }
            if (UvOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetX") { IsSerialized = true, Value = (float)UvOffsetX }; v.Variant = p;
            }
            if (UvOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetY") { IsSerialized = true, Value = (float)UvOffsetY }; v.Variant = p;
            }
            if (DamageInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DamageInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DamageInfluence") { IsSerialized = true, Value = (float)DamageInfluence }; v.Variant = p;
            }
            if (DamageInfluenceDebug != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DamageInfluenceDebug") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DamageInfluenceDebug") { IsSerialized = true, Value = (float)DamageInfluenceDebug }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissionTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissionTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissionTiling") { IsSerialized = true, Value = (float)EmissionTiling }; v.Variant = p;
            }
            if (EmissionParallax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissionParallax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissionParallax") { IsSerialized = true, Value = (float)EmissionParallax }; v.Variant = p;
            }
            if (Zone0EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Zone0EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Zone0EmissiveEV") { IsSerialized = true, Value = (float)Zone0EmissiveEV }; v.Variant = p;
            }
            if (Zone1EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Zone1EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Zone1EmissiveEV") { IsSerialized = true, Value = (float)Zone1EmissiveEV }; v.Variant = p;
            }
            if (Zone2EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Zone2EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Zone2EmissiveEV") { IsSerialized = true, Value = (float)Zone2EmissiveEV }; v.Variant = p;
            }
            if (Zone3EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Zone3EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Zone3EmissiveEV") { IsSerialized = true, Value = (float)Zone3EmissiveEV }; v.Variant = p;
            }
            if (DebugLightsIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugLightsIntensity") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DebugLightsIntensity") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DebugLightsIntensity.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DebugLightsIntensity.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DebugLightsIntensity.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DebugLightsIntensity.W };
            }
            if (DebugLightsColor0 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugLightsColor0") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DebugLightsColor0") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DebugLightsColor0.Red }, Green = new CUInt8() { Value = (Byte)DebugLightsColor0.Green }, Blue = new CUInt8() { Value = (Byte)DebugLightsColor0.Blue }, Alpha = new CUInt8() { Value = (Byte)DebugLightsColor0.Alpha } }; v.Variant = p;
            }
            if (DebugLightsColor1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugLightsColor1") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DebugLightsColor1") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DebugLightsColor1.Red }, Green = new CUInt8() { Value = (Byte)DebugLightsColor1.Green }, Blue = new CUInt8() { Value = (Byte)DebugLightsColor1.Blue }, Alpha = new CUInt8() { Value = (Byte)DebugLightsColor1.Alpha } }; v.Variant = p;
            }
            if (DebugLightsColor2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugLightsColor2") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DebugLightsColor2") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DebugLightsColor2.Red }, Green = new CUInt8() { Value = (Byte)DebugLightsColor2.Green }, Blue = new CUInt8() { Value = (Byte)DebugLightsColor2.Blue }, Alpha = new CUInt8() { Value = (Byte)DebugLightsColor2.Alpha } }; v.Variant = p;
            }
            if (DebugLightsColor3 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugLightsColor3") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DebugLightsColor3") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DebugLightsColor3.Red }, Green = new CUInt8() { Value = (Byte)DebugLightsColor3.Green }, Blue = new CUInt8() { Value = (Byte)DebugLightsColor3.Blue }, Alpha = new CUInt8() { Value = (Byte)DebugLightsColor3.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _vehicle_mesh_decal
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DamageInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DamageInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DamageInfluence") { IsSerialized = true, Value = (float)DamageInfluence }; v.Variant = p;
            }
            if (DamageInfluenceDebug != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DamageInfluenceDebug") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DamageInfluenceDebug") { IsSerialized = true, Value = (float)DamageInfluenceDebug }; v.Variant = p;
            }
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (DiffuseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseAlpha") { IsSerialized = true, Value = (float)DiffuseAlpha }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (GradientMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GradientMap") { IsSerialized = true, DepotPath = GradientMap }; v.Variant = p;
            }
            if (UseGradientMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseGradientMap") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseGradientMap") { IsSerialized = true, Value = (float)UseGradientMap }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (NormalAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalAlpha") { IsSerialized = true, Value = (float)NormalAlpha }; v.Variant = p;
            }
            if (NormalsBlendingMode != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalsBlendingMode") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalsBlendingMode") { IsSerialized = true, Value = (float)NormalsBlendingMode }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (DepthThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthThreshold") { IsSerialized = true, Value = (float)DepthThreshold }; v.Variant = p;
            }
            if (DirtMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DirtMap") { IsSerialized = true, DepotPath = DirtMap }; v.Variant = p;
            }
            if (DirtOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DirtOpacity") { IsSerialized = true, Value = (float)DirtOpacity }; v.Variant = p;
            }
            if (DirtMaskOffsets != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtMaskOffsets") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DirtMaskOffsets") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DirtMaskOffsets.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DirtMaskOffsets.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DirtMaskOffsets.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DirtMaskOffsets.W };
            }
        }
    }
    public partial class _ver_mov
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (IsControlledByDestruction != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IsControlledByDestruction") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IsControlledByDestruction") { IsSerialized = true, Value = (float)IsControlledByDestruction }; v.Variant = p;
            }
            if (vertex_paint_tex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "vertex_paint_tex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "vertex_paint_tex") { IsSerialized = true, DepotPath = vertex_paint_tex }; v.Variant = p;
            }
            if (trans_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_min") { IsSerialized = true, Value = (float)trans_min }; v.Variant = p;
            }
            if (trans_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_max") { IsSerialized = true, Value = (float)trans_max }; v.Variant = p;
            }
            if (rot_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "rot_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "rot_min") { IsSerialized = true, Value = (float)rot_min }; v.Variant = p;
            }
            if (rot_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "rot_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "rot_max") { IsSerialized = true, Value = (float)rot_max }; v.Variant = p;
            }
            if (n_frames != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_frames") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_frames") { IsSerialized = true, Value = (float)n_frames }; v.Variant = p;
            }
            if (n_pieces != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_pieces") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_pieces") { IsSerialized = true, Value = (float)n_pieces }; v.Variant = p;
            }
            if (play_time != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "play_time") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "play_time") { IsSerialized = true, Value = (float)play_time }; v.Variant = p;
            }
            if (debug_familys != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "debug_familys") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "debug_familys") { IsSerialized = true, Value = (float)debug_familys }; v.Variant = p;
            }
            if (frame_rate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "frame_rate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "frame_rate") { IsSerialized = true, Value = (float)frame_rate }; v.Variant = p;
            }
            if (YAxisUp != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "YAxisUp") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "YAxisUp") { IsSerialized = true, Value = (float)YAxisUp }; v.Variant = p;
            }
            if (z_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "z_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "z_min") { IsSerialized = true, Value = (float)z_min }; v.Variant = p;
            }
            if (ground_offset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ground_offset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ground_offset") { IsSerialized = true, Value = (float)ground_offset }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _ver_mov_glass
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (OpacityBackFace != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OpacityBackFace") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OpacityBackFace") { IsSerialized = true, Value = (float)OpacityBackFace }; v.Variant = p;
            }
            if (UvTilingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingX") { IsSerialized = true, Value = (float)UvTilingX }; v.Variant = p;
            }
            if (UvTilingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvTilingY") { IsSerialized = true, Value = (float)UvTilingY }; v.Variant = p;
            }
            if (UvOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetX") { IsSerialized = true, Value = (float)UvOffsetX }; v.Variant = p;
            }
            if (UvOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvOffsetY") { IsSerialized = true, Value = (float)UvOffsetY }; v.Variant = p;
            }
            if (RoughnessTileAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTileAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RoughnessTileAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RoughnessTileAndOffset.W };
            }
            if (NormalTileAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTileAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NormalTileAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NormalTileAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NormalTileAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NormalTileAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NormalTileAndOffset.W };
            }
            if (GlassTintTileAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTintTileAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "GlassTintTileAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)GlassTintTileAndOffset.W };
            }
            if (vertex_paint_tex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "vertex_paint_tex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "vertex_paint_tex") { IsSerialized = true, DepotPath = vertex_paint_tex }; v.Variant = p;
            }
            if (IsControlledByDestruction != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IsControlledByDestruction") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IsControlledByDestruction") { IsSerialized = true, Value = (float)IsControlledByDestruction }; v.Variant = p;
            }
            if (trans_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_min") { IsSerialized = true, Value = (float)trans_min }; v.Variant = p;
            }
            if (trans_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_max") { IsSerialized = true, Value = (float)trans_max }; v.Variant = p;
            }
            if (rot_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "rot_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "rot_min") { IsSerialized = true, Value = (float)rot_min }; v.Variant = p;
            }
            if (rot_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "rot_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "rot_max") { IsSerialized = true, Value = (float)rot_max }; v.Variant = p;
            }
            if (n_frames != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_frames") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_frames") { IsSerialized = true, Value = (float)n_frames }; v.Variant = p;
            }
            if (n_pieces != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_pieces") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_pieces") { IsSerialized = true, Value = (float)n_pieces }; v.Variant = p;
            }
            if (play_time != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "play_time") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "play_time") { IsSerialized = true, Value = (float)play_time }; v.Variant = p;
            }
            if (debug_familys != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "debug_familys") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "debug_familys") { IsSerialized = true, Value = (float)debug_familys }; v.Variant = p;
            }
            if (frame_rate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "frame_rate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "frame_rate") { IsSerialized = true, Value = (float)frame_rate }; v.Variant = p;
            }
            if (YAxisUp != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "YAxisUp") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "YAxisUp") { IsSerialized = true, Value = (float)YAxisUp }; v.Variant = p;
            }
            if (z_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "z_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "z_min") { IsSerialized = true, Value = (float)z_min }; v.Variant = p;
            }
            if (ground_offset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ground_offset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ground_offset") { IsSerialized = true, Value = (float)ground_offset }; v.Variant = p;
            }
            if (GlassTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassTint") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlassTint") { IsSerialized = true, DepotPath = GlassTint }; v.Variant = p;
            }
            if (TintColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor.Red }, Green = new CUInt8() { Value = (Byte)TintColor.Green }, Blue = new CUInt8() { Value = (Byte)TintColor.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor.Alpha } }; v.Variant = p;
            }
            if (TintFromVertexPaint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintFromVertexPaint") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TintFromVertexPaint") { IsSerialized = true, Value = (float)TintFromVertexPaint }; v.Variant = p;
            }
            if (FrontFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FrontFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FrontFacesReflectionPower") { IsSerialized = true, Value = (float)FrontFacesReflectionPower }; v.Variant = p;
            }
            if (BackFacesReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BackFacesReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BackFacesReflectionPower") { IsSerialized = true, Value = (float)BackFacesReflectionPower }; v.Variant = p;
            }
            if (IOR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IOR") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IOR") { IsSerialized = true, Value = (float)IOR }; v.Variant = p;
            }
            if (RefractionDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionDepth") { IsSerialized = true, Value = (float)RefractionDepth }; v.Variant = p;
            }
            if (FresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelBias") { IsSerialized = true, Value = (float)FresnelBias }; v.Variant = p;
            }
            if (GlassSpecularColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassSpecularColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "GlassSpecularColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)GlassSpecularColor.Red }, Green = new CUInt8() { Value = (Byte)GlassSpecularColor.Green }, Blue = new CUInt8() { Value = (Byte)GlassSpecularColor.Blue }, Alpha = new CUInt8() { Value = (Byte)GlassSpecularColor.Alpha } }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (NormalMapAffectsSpecular != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalMapAffectsSpecular") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalMapAffectsSpecular") { IsSerialized = true, Value = (float)NormalMapAffectsSpecular }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (SurfaceMetalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceMetalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceMetalness") { IsSerialized = true, Value = (float)SurfaceMetalness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (MaskOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskOpacity") { IsSerialized = true, Value = (float)MaskOpacity }; v.Variant = p;
            }
            if (GlassRoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassRoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlassRoughnessBias") { IsSerialized = true, Value = (float)GlassRoughnessBias }; v.Variant = p;
            }
            if (MaskRoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskRoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskRoughnessBias") { IsSerialized = true, Value = (float)MaskRoughnessBias }; v.Variant = p;
            }
            if (BlurRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurRadius") { IsSerialized = true, Value = (float)BlurRadius }; v.Variant = p;
            }
            if (BlurByRoughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurByRoughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurByRoughness") { IsSerialized = true, Value = (float)BlurByRoughness }; v.Variant = p;
            }
        }
    }
    public partial class _ver_mov_multilayered
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (vertex_paint_tex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "vertex_paint_tex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "vertex_paint_tex") { IsSerialized = true, DepotPath = vertex_paint_tex }; v.Variant = p;
            }
            if (IsControlledByDestruction != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IsControlledByDestruction") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IsControlledByDestruction") { IsSerialized = true, Value = (float)IsControlledByDestruction }; v.Variant = p;
            }
            if (trans_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_min") { IsSerialized = true, Value = (float)trans_min }; v.Variant = p;
            }
            if (trans_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_max") { IsSerialized = true, Value = (float)trans_max }; v.Variant = p;
            }
            if (rot_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "rot_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "rot_min") { IsSerialized = true, Value = (float)rot_min }; v.Variant = p;
            }
            if (rot_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "rot_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "rot_max") { IsSerialized = true, Value = (float)rot_max }; v.Variant = p;
            }
            if (n_frames != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_frames") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_frames") { IsSerialized = true, Value = (float)n_frames }; v.Variant = p;
            }
            if (n_pieces != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_pieces") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_pieces") { IsSerialized = true, Value = (float)n_pieces }; v.Variant = p;
            }
            if (play_time != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "play_time") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "play_time") { IsSerialized = true, Value = (float)play_time }; v.Variant = p;
            }
            if (frame_rate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "frame_rate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "frame_rate") { IsSerialized = true, Value = (float)frame_rate }; v.Variant = p;
            }
            if (z_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "z_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "z_min") { IsSerialized = true, Value = (float)z_min }; v.Variant = p;
            }
            if (ground_offset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ground_offset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ground_offset") { IsSerialized = true, Value = (float)ground_offset }; v.Variant = p;
            }
            if (GlobalNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlobalNormal") { IsSerialized = true, DepotPath = GlobalNormal }; v.Variant = p;
            }
            if (MultilayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Mask>(cr2w, v, "MultilayerMask") { IsSerialized = true, DepotPath = MultilayerMask }; v.Variant = p;
            }
            if (MultilayerSetup != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerSetup") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Setup>(cr2w, v, "MultilayerSetup") { IsSerialized = true, DepotPath = MultilayerSetup }; v.Variant = p;
            }
            if (MaskAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskAtlas") { IsSerialized = true, DepotPath = MaskAtlas }; v.Variant = p;
            }
            if (LayersStartIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersStartIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersStartIndex") { IsSerialized = true, Value = (float)LayersStartIndex }; v.Variant = p;
            }
            if (SurfaceTexAspectRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceTexAspectRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceTexAspectRatio") { IsSerialized = true, Value = (float)SurfaceTexAspectRatio }; v.Variant = p;
            }
            if (MaskToTileScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskToTileScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskToTileScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskToTileScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskToTileScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskToTileScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskToTileScale.W };
            }
            if (MaskTileSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTileSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskTileSize") { IsSerialized = true, Value = (float)MaskTileSize }; v.Variant = p;
            }
            if (MaskAtlasDims != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlasDims") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskAtlasDims") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskAtlasDims.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskAtlasDims.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskAtlasDims.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskAtlasDims.W };
            }
            if (MaskBaseResolution != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskBaseResolution") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskBaseResolution") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskBaseResolution.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskBaseResolution.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskBaseResolution.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskBaseResolution.W };
            }
            if (SetupLayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SetupLayerMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SetupLayerMask") { IsSerialized = true, Value = (float)SetupLayerMask }; v.Variant = p;
            }
        }
    }
    public partial class _ver_skinned_mov
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (vertex_paint_tex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "vertex_paint_tex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "vertex_paint_tex") { IsSerialized = true, DepotPath = vertex_paint_tex }; v.Variant = p;
            }
            if (vertex_paint_tex_z != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "vertex_paint_tex_z") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "vertex_paint_tex_z") { IsSerialized = true, DepotPath = vertex_paint_tex_z }; v.Variant = p;
            }
            if (trans_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_min") { IsSerialized = true, Value = (float)trans_min }; v.Variant = p;
            }
            if (trans_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_max") { IsSerialized = true, Value = (float)trans_max }; v.Variant = p;
            }
            if (rot_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "rot_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "rot_min") { IsSerialized = true, Value = (float)rot_min }; v.Variant = p;
            }
            if (rot_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "rot_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "rot_max") { IsSerialized = true, Value = (float)rot_max }; v.Variant = p;
            }
            if (buffer_offset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "buffer_offset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "buffer_offset") { IsSerialized = true, Value = (float)buffer_offset }; v.Variant = p;
            }
            if (n_frames != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_frames") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_frames") { IsSerialized = true, Value = (float)n_frames }; v.Variant = p;
            }
            if (n_pieces != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_pieces") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_pieces") { IsSerialized = true, Value = (float)n_pieces }; v.Variant = p;
            }
            if (play_time != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "play_time") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "play_time") { IsSerialized = true, Value = (float)play_time }; v.Variant = p;
            }
            if (debug_familys != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "debug_familys") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "debug_familys") { IsSerialized = true, Value = (float)debug_familys }; v.Variant = p;
            }
            if (frame_rate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "frame_rate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "frame_rate") { IsSerialized = true, Value = (float)frame_rate }; v.Variant = p;
            }
            if (YAxisUp != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "YAxisUp") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "YAxisUp") { IsSerialized = true, Value = (float)YAxisUp }; v.Variant = p;
            }
            if (z_multiply != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "z_multiply") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "z_multiply") { IsSerialized = true, Value = (float)z_multiply }; v.Variant = p;
            }
            if (ground_offset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ground_offset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ground_offset") { IsSerialized = true, Value = (float)ground_offset }; v.Variant = p;
            }
            if (bounds_and_pivot != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "bounds_and_pivot") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "bounds_and_pivot") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)bounds_and_pivot.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)bounds_and_pivot.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)bounds_and_pivot.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)bounds_and_pivot.W };
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (FoliageProfileMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FoliageProfileMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FoliageProfileMap") { IsSerialized = true, DepotPath = FoliageProfileMap }; v.Variant = p;
            }
            if (FoliageProfile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FoliageProfile") { IsSerialized = true }; m.Add(v);
                var p = new rRef<CFoliageProfile>(cr2w, v, "FoliageProfile") { IsSerialized = true, DepotPath = FoliageProfile }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _ver_skinned_mov_parade
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (vertex_paint_tex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "vertex_paint_tex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "vertex_paint_tex") { IsSerialized = true, DepotPath = vertex_paint_tex }; v.Variant = p;
            }
            if (trans_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_min") { IsSerialized = true, Value = (float)trans_min }; v.Variant = p;
            }
            if (trans_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "trans_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "trans_max") { IsSerialized = true, Value = (float)trans_max }; v.Variant = p;
            }
            if (rot_min != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "rot_min") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "rot_min") { IsSerialized = true, Value = (float)rot_min }; v.Variant = p;
            }
            if (rot_max != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "rot_max") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "rot_max") { IsSerialized = true, Value = (float)rot_max }; v.Variant = p;
            }
            if (n_frames != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_frames") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_frames") { IsSerialized = true, Value = (float)n_frames }; v.Variant = p;
            }
            if (n_pieces != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "n_pieces") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "n_pieces") { IsSerialized = true, Value = (float)n_pieces }; v.Variant = p;
            }
            if (frame_rate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "frame_rate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "frame_rate") { IsSerialized = true, Value = (float)frame_rate }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _window_interior_uv
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Glass != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Glass") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Glass") { IsSerialized = true, DepotPath = Glass }; v.Variant = p;
            }
            if (LightIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightIntensity") { IsSerialized = true, Value = (float)LightIntensity }; v.Variant = p;
            }
            if (LightColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "LightColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)LightColor.Red }, Green = new CUInt8() { Value = (Byte)LightColor.Green }, Blue = new CUInt8() { Value = (Byte)LightColor.Blue }, Alpha = new CUInt8() { Value = (Byte)LightColor.Alpha } }; v.Variant = p;
            }
            if (GlassColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlassColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "GlassColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)GlassColor.Red }, Green = new CUInt8() { Value = (Byte)GlassColor.Green }, Blue = new CUInt8() { Value = (Byte)GlassColor.Blue }, Alpha = new CUInt8() { Value = (Byte)GlassColor.Alpha } }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalScale") { IsSerialized = true, Value = (float)NormalScale }; v.Variant = p;
            }
            if (RoomHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoomHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoomHeight") { IsSerialized = true, Value = (float)RoomHeight }; v.Variant = p;
            }
            if (RoomWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoomWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoomWidth") { IsSerialized = true, Value = (float)RoomWidth }; v.Variant = p;
            }
            if (TextureTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureTiling") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TextureTiling") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TextureTiling.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TextureTiling.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TextureTiling.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TextureTiling.W };
            }
            if (CeilFloorColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CeilFloorColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "CeilFloorColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)CeilFloorColor.Red }, Green = new CUInt8() { Value = (Byte)CeilFloorColor.Green }, Blue = new CUInt8() { Value = (Byte)CeilFloorColor.Blue }, Alpha = new CUInt8() { Value = (Byte)CeilFloorColor.Alpha } }; v.Variant = p;
            }
            if (WallColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WallColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "WallColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)WallColor.Red }, Green = new CUInt8() { Value = (Byte)WallColor.Green }, Blue = new CUInt8() { Value = (Byte)WallColor.Blue }, Alpha = new CUInt8() { Value = (Byte)WallColor.Alpha } }; v.Variant = p;
            }
            if (Ceiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Ceiling") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Ceiling") { IsSerialized = true, DepotPath = Ceiling }; v.Variant = p;
            }
            if (WallsXY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WallsXY") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WallsXY") { IsSerialized = true, DepotPath = WallsXY }; v.Variant = p;
            }
            if (WallsZY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WallsZY") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WallsZY") { IsSerialized = true, DepotPath = WallsZY }; v.Variant = p;
            }
            if (Floor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Floor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Floor") { IsSerialized = true, DepotPath = Floor }; v.Variant = p;
            }
        }
    }
    public partial class _window_parallax_interior
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (RoomAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoomAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoomAtlas") { IsSerialized = true, DepotPath = RoomAtlas }; v.Variant = p;
            }
            if (LayerAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "LayerAtlas") { IsSerialized = true, DepotPath = LayerAtlas }; v.Variant = p;
            }
            if (Curtain != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Curtain") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Curtain") { IsSerialized = true, DepotPath = Curtain }; v.Variant = p;
            }
            if (ColorOverlayTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorOverlayTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ColorOverlayTexture") { IsSerialized = true, DepotPath = ColorOverlayTexture }; v.Variant = p;
            }
            if (AtlasGridUvRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AtlasGridUvRatio") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "AtlasGridUvRatio") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)AtlasGridUvRatio.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)AtlasGridUvRatio.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)AtlasGridUvRatio.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)AtlasGridUvRatio.W };
            }
            if (AtlasDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AtlasDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AtlasDepth") { IsSerialized = true, Value = (float)AtlasDepth }; v.Variant = p;
            }
            if (roomWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "roomWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "roomWidth") { IsSerialized = true, Value = (float)roomWidth }; v.Variant = p;
            }
            if (roomHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "roomHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "roomHeight") { IsSerialized = true, Value = (float)roomHeight }; v.Variant = p;
            }
            if (roomDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "roomDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "roomDepth") { IsSerialized = true, Value = (float)roomDepth }; v.Variant = p;
            }
            if (positionXoffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "positionXoffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "positionXoffset") { IsSerialized = true, Value = (float)positionXoffset }; v.Variant = p;
            }
            if (positionYoffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "positionYoffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "positionYoffset") { IsSerialized = true, Value = (float)positionYoffset }; v.Variant = p;
            }
            if (scaleXrandomization != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "scaleXrandomization") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "scaleXrandomization") { IsSerialized = true, Value = (float)scaleXrandomization }; v.Variant = p;
            }
            if (positionXrandomization != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "positionXrandomization") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "positionXrandomization") { IsSerialized = true, Value = (float)positionXrandomization }; v.Variant = p;
            }
            if (LayerDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerDepth") { IsSerialized = true, Value = (float)LayerDepth }; v.Variant = p;
            }
            if (CurtainDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CurtainDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CurtainDepth") { IsSerialized = true, Value = (float)CurtainDepth }; v.Variant = p;
            }
            if (CurtainMaxCover != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CurtainMaxCover") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CurtainMaxCover") { IsSerialized = true, Value = (float)CurtainMaxCover }; v.Variant = p;
            }
            if (CurtainCoverRandomize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CurtainCoverRandomize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CurtainCoverRandomize") { IsSerialized = true, Value = (float)CurtainCoverRandomize }; v.Variant = p;
            }
            if (CurtainAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CurtainAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CurtainAlpha") { IsSerialized = true, Value = (float)CurtainAlpha }; v.Variant = p;
            }
            if (LightsTempVariationAtNight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightsTempVariationAtNight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightsTempVariationAtNight") { IsSerialized = true, Value = (float)LightsTempVariationAtNight }; v.Variant = p;
            }
            if (AmountTurnOffAtNight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AmountTurnOffAtNight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AmountTurnOffAtNight") { IsSerialized = true, Value = (float)AmountTurnOffAtNight }; v.Variant = p;
            }
            if (WindowTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindowTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WindowTexture") { IsSerialized = true, DepotPath = WindowTexture }; v.Variant = p;
            }
            if (TintColorAtNight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColorAtNight") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColorAtNight") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColorAtNight.Red }, Green = new CUInt8() { Value = (Byte)TintColorAtNight.Green }, Blue = new CUInt8() { Value = (Byte)TintColorAtNight.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColorAtNight.Alpha } }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _window_parallax_interior_proxy
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (RoomAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoomAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoomAtlas") { IsSerialized = true, DepotPath = RoomAtlas }; v.Variant = p;
            }
            if (Curtain != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Curtain") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Curtain") { IsSerialized = true, DepotPath = Curtain }; v.Variant = p;
            }
            if (ColorOverlayTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorOverlayTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ColorOverlayTexture") { IsSerialized = true, DepotPath = ColorOverlayTexture }; v.Variant = p;
            }
            if (AtlasGridUvRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AtlasGridUvRatio") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "AtlasGridUvRatio") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)AtlasGridUvRatio.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)AtlasGridUvRatio.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)AtlasGridUvRatio.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)AtlasGridUvRatio.W };
            }
            if (AtlasDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AtlasDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AtlasDepth") { IsSerialized = true, Value = (float)AtlasDepth }; v.Variant = p;
            }
            if (roomWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "roomWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "roomWidth") { IsSerialized = true, Value = (float)roomWidth }; v.Variant = p;
            }
            if (roomHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "roomHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "roomHeight") { IsSerialized = true, Value = (float)roomHeight }; v.Variant = p;
            }
            if (roomDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "roomDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "roomDepth") { IsSerialized = true, Value = (float)roomDepth }; v.Variant = p;
            }
            if (positionXoffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "positionXoffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "positionXoffset") { IsSerialized = true, Value = (float)positionXoffset }; v.Variant = p;
            }
            if (positionYoffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "positionYoffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "positionYoffset") { IsSerialized = true, Value = (float)positionYoffset }; v.Variant = p;
            }
            if (scaleXrandomization != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "scaleXrandomization") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "scaleXrandomization") { IsSerialized = true, Value = (float)scaleXrandomization }; v.Variant = p;
            }
            if (positionXrandomization != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "positionXrandomization") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "positionXrandomization") { IsSerialized = true, Value = (float)positionXrandomization }; v.Variant = p;
            }
            if (LightsTempVariationAtNight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightsTempVariationAtNight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightsTempVariationAtNight") { IsSerialized = true, Value = (float)LightsTempVariationAtNight }; v.Variant = p;
            }
            if (CurtainDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CurtainDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CurtainDepth") { IsSerialized = true, Value = (float)CurtainDepth }; v.Variant = p;
            }
            if (CurtainMaxCover != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CurtainMaxCover") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CurtainMaxCover") { IsSerialized = true, Value = (float)CurtainMaxCover }; v.Variant = p;
            }
            if (CurtainCoverRandomize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CurtainCoverRandomize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CurtainCoverRandomize") { IsSerialized = true, Value = (float)CurtainCoverRandomize }; v.Variant = p;
            }
            if (CurtainAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CurtainAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CurtainAlpha") { IsSerialized = true, Value = (float)CurtainAlpha }; v.Variant = p;
            }
            if (AmountTurnOffAtNight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AmountTurnOffAtNight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AmountTurnOffAtNight") { IsSerialized = true, Value = (float)AmountTurnOffAtNight }; v.Variant = p;
            }
            if (TintColorAtNight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColorAtNight") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColorAtNight") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColorAtNight.Red }, Green = new CUInt8() { Value = (Byte)TintColorAtNight.Green }, Blue = new CUInt8() { Value = (Byte)TintColorAtNight.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColorAtNight.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
        }
    }
    public partial class _window_parallax_interior_proxy_buffer
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Translucency != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Translucency") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Translucency") { IsSerialized = true, Value = (float)Translucency }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _window_very_long_distance
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
            if (ColorOverlayTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorOverlayTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ColorOverlayTexture") { IsSerialized = true, DepotPath = ColorOverlayTexture }; v.Variant = p;
            }
            if (WorldHeightMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldHeightMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldHeightMap") { IsSerialized = true, DepotPath = WorldHeightMap }; v.Variant = p;
            }
            if (WorldColorMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldColorMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldColorMap") { IsSerialized = true, DepotPath = WorldColorMap }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (WindowsSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WindowsSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WindowsSize") { IsSerialized = true, Value = (float)WindowsSize }; v.Variant = p;
            }
            if (Saturation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Saturation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Saturation") { IsSerialized = true, Value = (float)Saturation }; v.Variant = p;
            }
            if (TurnedOff != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TurnedOff") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TurnedOff") { IsSerialized = true, Value = (float)TurnedOff }; v.Variant = p;
            }
            if (FadeStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeStart") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeStart") { IsSerialized = true, Value = (float)FadeStart }; v.Variant = p;
            }
            if (FadeEnd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeEnd") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeEnd") { IsSerialized = true, Value = (float)FadeEnd }; v.Variant = p;
            }
            if (LightsFadeStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightsFadeStart") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightsFadeStart") { IsSerialized = true, Value = (float)LightsFadeStart }; v.Variant = p;
            }
            if (LightsFadeEnd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightsFadeEnd") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightsFadeEnd") { IsSerialized = true, Value = (float)LightsFadeEnd }; v.Variant = p;
            }
            if (LightsIntensityMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightsIntensityMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightsIntensityMultiplier") { IsSerialized = true, Value = (float)LightsIntensityMultiplier }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
        }
    }
    public partial class _worldspace_grid
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (GridScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GridScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GridScale") { IsSerialized = true, Value = (float)GridScale }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (EnableWorldSpace != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableWorldSpace") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableWorldSpace") { IsSerialized = true, Value = (float)EnableWorldSpace }; v.Variant = p;
            }
            if (AbsoluteWorldSpace != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AbsoluteWorldSpace") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AbsoluteWorldSpace") { IsSerialized = true, Value = (float)AbsoluteWorldSpace }; v.Variant = p;
            }
        }
    }
    public partial class _bink_simple
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (ColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorScale.Red }, Green = new CUInt8() { Value = (Byte)ColorScale.Green }, Blue = new CUInt8() { Value = (Byte)ColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorScale.Alpha } }; v.Variant = p;
            }
            if (BinkY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BinkY") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BinkY") { IsSerialized = true, DepotPath = BinkY }; v.Variant = p;
            }
            if (BinkCR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BinkCR") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BinkCR") { IsSerialized = true, DepotPath = BinkCR }; v.Variant = p;
            }
            if (BinkCB != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BinkCB") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BinkCB") { IsSerialized = true, DepotPath = BinkCB }; v.Variant = p;
            }
            if (BinkA != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BinkA") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BinkA") { IsSerialized = true, DepotPath = BinkA }; v.Variant = p;
            }
        }
    }
    public partial class _cable_strip
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (CableWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CableWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CableWidth") { IsSerialized = true, Value = (float)CableWidth }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Translucency != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Translucency") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Translucency") { IsSerialized = true, Value = (float)Translucency }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _debugdraw_bias
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _debugdraw_wireframe
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _debugdraw_wireframe_bias
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _debug_coloring
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _font
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _global_water_patch
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (WaterFFT != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaterFFT") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WaterFFT") { IsSerialized = true, DepotPath = WaterFFT }; v.Variant = p;
            }
            if (WaterMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaterMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WaterMap") { IsSerialized = true, DepotPath = WaterMap }; v.Variant = p;
            }
            if (WaterMapWeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaterMapWeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaterMapWeight") { IsSerialized = true, Value = (float)WaterMapWeight }; v.Variant = p;
            }
            if (WaterSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaterSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaterSize") { IsSerialized = true, Value = (float)WaterSize }; v.Variant = p;
            }
            if (ShoreThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShoreThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ShoreThreshold") { IsSerialized = true, Value = (float)ShoreThreshold }; v.Variant = p;
            }
            if (ShoreOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ShoreOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ShoreOffset") { IsSerialized = true, Value = (float)ShoreOffset }; v.Variant = p;
            }
            if (Choppiness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Choppiness") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Choppiness") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Choppiness.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Choppiness.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Choppiness.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Choppiness.W };
            }
            if (ScatteringDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatteringDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScatteringDepth") { IsSerialized = true, Value = (float)ScatteringDepth }; v.Variant = p;
            }
            if (NormalDetailScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalDetailScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalDetailScale") { IsSerialized = true, Value = (float)NormalDetailScale }; v.Variant = p;
            }
            if (NormalDetailIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalDetailIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalDetailIntensity") { IsSerialized = true, Value = (float)NormalDetailIntensity }; v.Variant = p;
            }
            if (ScatteringSunRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatteringSunRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScatteringSunRadius") { IsSerialized = true, Value = (float)ScatteringSunRadius }; v.Variant = p;
            }
            if (ScatteringSunIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatteringSunIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScatteringSunIntensity") { IsSerialized = true, Value = (float)ScatteringSunIntensity }; v.Variant = p;
            }
            if (ScatteringColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatteringColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ScatteringColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ScatteringColor.Red }, Green = new CUInt8() { Value = (Byte)ScatteringColor.Green }, Blue = new CUInt8() { Value = (Byte)ScatteringColor.Blue }, Alpha = new CUInt8() { Value = (Byte)ScatteringColor.Alpha } }; v.Variant = p;
            }
            if (BlurRadius != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurRadius") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurRadius") { IsSerialized = true, Value = (float)BlurRadius }; v.Variant = p;
            }
            if (ScatteringSlopeThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatteringSlopeThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScatteringSlopeThreshold") { IsSerialized = true, Value = (float)ScatteringSlopeThreshold }; v.Variant = p;
            }
            if (ScatteringSlopeIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatteringSlopeIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScatteringSlopeIntensity") { IsSerialized = true, Value = (float)ScatteringSlopeIntensity }; v.Variant = p;
            }
            if (WaterOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WaterOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WaterOpacity") { IsSerialized = true, Value = (float)WaterOpacity }; v.Variant = p;
            }
            if (IndexOfRefraction != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IndexOfRefraction") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IndexOfRefraction") { IsSerialized = true, Value = (float)IndexOfRefraction }; v.Variant = p;
            }
            if (RefractionNormalIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionNormalIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionNormalIntensity") { IsSerialized = true, Value = (float)RefractionNormalIntensity }; v.Variant = p;
            }
            if (BlurStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurStrength") { IsSerialized = true, Value = (float)BlurStrength }; v.Variant = p;
            }
            if (FoamTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FoamTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FoamTexture") { IsSerialized = true, DepotPath = FoamTexture }; v.Variant = p;
            }
            if (FoamColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FoamColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "FoamColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)FoamColor.Red }, Green = new CUInt8() { Value = (Byte)FoamColor.Green }, Blue = new CUInt8() { Value = (Byte)FoamColor.Blue }, Alpha = new CUInt8() { Value = (Byte)FoamColor.Alpha } }; v.Variant = p;
            }
            if (FoamSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FoamSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FoamSize") { IsSerialized = true, Value = (float)FoamSize }; v.Variant = p;
            }
            if (FoamThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FoamThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FoamThreshold") { IsSerialized = true, Value = (float)FoamThreshold }; v.Variant = p;
            }
            if (FoamIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FoamIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FoamIntensity") { IsSerialized = true, Value = (float)FoamIntensity }; v.Variant = p;
            }
            if (EdgeBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EdgeBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EdgeBlend") { IsSerialized = true, Value = (float)EdgeBlend }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_animated_uv
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (UvPanningSpeedX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvPanningSpeedX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvPanningSpeedX") { IsSerialized = true, Value = (float)UvPanningSpeedX }; v.Variant = p;
            }
            if (UvPanningSpeedY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvPanningSpeedY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UvPanningSpeedY") { IsSerialized = true, Value = (float)UvPanningSpeedY }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveLift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveLift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveLift") { IsSerialized = true, Value = (float)EmissiveLift }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_blendable
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VectorField != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField") { IsSerialized = true, DepotPath = VectorField }; v.Variant = p;
            }
            if (FadeOutDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutDistance") { IsSerialized = true, Value = (float)FadeOutDistance }; v.Variant = p;
            }
            if (FadeOutOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutOffset") { IsSerialized = true, Value = (float)FadeOutOffset }; v.Variant = p;
            }
            if (GlitchChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchChance") { IsSerialized = true, Value = (float)GlitchChance }; v.Variant = p;
            }
            if (GlitchOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchOffset") { IsSerialized = true, Value = (float)GlitchOffset }; v.Variant = p;
            }
            if (FresnelColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "FresnelColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)FresnelColor.Red }, Green = new CUInt8() { Value = (Byte)FresnelColor.Green }, Blue = new CUInt8() { Value = (Byte)FresnelColor.Blue }, Alpha = new CUInt8() { Value = (Byte)FresnelColor.Alpha } }; v.Variant = p;
            }
            if (FresnelColorIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColorIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelColorIntensity") { IsSerialized = true, Value = (float)FresnelColorIntensity }; v.Variant = p;
            }
            if (FresnelExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelExponent") { IsSerialized = true, Value = (float)FresnelExponent }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveLift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveLift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveLift") { IsSerialized = true, Value = (float)EmissiveLift }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_fence
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_garment
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_packed
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (RoughMetal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughMetal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughMetal") { IsSerialized = true, DepotPath = RoughMetal }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_proxy
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (WorldColorMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldColorMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldColorMap") { IsSerialized = true, DepotPath = WorldColorMap }; v.Variant = p;
            }
            if (WorldHeightMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldHeightMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldHeightMap") { IsSerialized = true, DepotPath = WorldHeightMap }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (FadeStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeStart") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeStart") { IsSerialized = true, Value = (float)FadeStart }; v.Variant = p;
            }
            if (FadeEnd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeEnd") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeEnd") { IsSerialized = true, Value = (float)FadeEnd }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveLift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveLift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveLift") { IsSerialized = true, Value = (float)EmissiveLift }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
        }
    }
    public partial class _multilayered
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (GlobalNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlobalNormal") { IsSerialized = true, DepotPath = GlobalNormal }; v.Variant = p;
            }
            if (MultilayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Mask>(cr2w, v, "MultilayerMask") { IsSerialized = true, DepotPath = MultilayerMask }; v.Variant = p;
            }
            if (MultilayerSetup != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerSetup") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Setup>(cr2w, v, "MultilayerSetup") { IsSerialized = true, DepotPath = MultilayerSetup }; v.Variant = p;
            }
            if (GlobalNormalIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalNormalIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlobalNormalIntensity") { IsSerialized = true, Value = (float)GlobalNormalIntensity }; v.Variant = p;
            }
            if (GlobalNormalUVScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalNormalUVScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "GlobalNormalUVScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)GlobalNormalUVScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)GlobalNormalUVScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)GlobalNormalUVScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)GlobalNormalUVScale.W };
            }
            if (GlobalNormalUVBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalNormalUVBias") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "GlobalNormalUVBias") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)GlobalNormalUVBias.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)GlobalNormalUVBias.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)GlobalNormalUVBias.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)GlobalNormalUVBias.W };
            }
            if (MaskAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskAtlas") { IsSerialized = true, DepotPath = MaskAtlas }; v.Variant = p;
            }
            if (LayersStartIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersStartIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersStartIndex") { IsSerialized = true, Value = (float)LayersStartIndex }; v.Variant = p;
            }
            if (SurfaceTexAspectRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceTexAspectRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceTexAspectRatio") { IsSerialized = true, Value = (float)SurfaceTexAspectRatio }; v.Variant = p;
            }
            if (MaskToTileScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskToTileScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskToTileScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskToTileScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskToTileScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskToTileScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskToTileScale.W };
            }
            if (MaskTileSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTileSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskTileSize") { IsSerialized = true, Value = (float)MaskTileSize }; v.Variant = p;
            }
            if (MaskAtlasDims != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlasDims") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskAtlasDims") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskAtlasDims.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskAtlasDims.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskAtlasDims.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskAtlasDims.W };
            }
            if (MaskBaseResolution != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskBaseResolution") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskBaseResolution") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskBaseResolution.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskBaseResolution.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskBaseResolution.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskBaseResolution.W };
            }
            if (SetupLayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SetupLayerMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SetupLayerMask") { IsSerialized = true, Value = (float)SetupLayerMask }; v.Variant = p;
            }
        }
    }
    public partial class _multilayered_debug
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _pbr_simple
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Metalness") { IsSerialized = true, Value = (float)Metalness }; v.Variant = p;
            }
        }
    }
    public partial class _shadows_debug
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Translucency != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Translucency") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Translucency") { IsSerialized = true, Value = (float)Translucency }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _transparent_notxaa_2
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
        }
    }
    public partial class _ui_default_element
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_default_nine_slice_element
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_default_tile_element
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_effect_box_blur
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_effect_color_correction
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_effect_color_fill
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_effect_glitch
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_effect_inner_glow
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_effect_light_sweep
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_effect_linear_wipe
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_effect_mask
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_effect_point_cloud
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_effect_radial_wipe
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_effect_swipe
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_element_depth_texture
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_panel
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _ui_text_element
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (hackParameterForUiBatcher != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "hackParameterForUiBatcher") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "hackParameterForUiBatcher") { IsSerialized = true, Value = (float)hackParameterForUiBatcher }; v.Variant = p;
            }
        }
    }
    public partial class _alphablend_glass
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (TextureScaling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureScaling") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TextureScaling") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TextureScaling.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TextureScaling.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TextureScaling.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TextureScaling.W };
            }
            if (InterlaceScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InterlaceScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InterlaceScale") { IsSerialized = true, Value = (float)InterlaceScale }; v.Variant = p;
            }
            if (InterlaceIntensityLow != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InterlaceIntensityLow") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InterlaceIntensityLow") { IsSerialized = true, Value = (float)InterlaceIntensityLow }; v.Variant = p;
            }
            if (InterlaceIntensityHigh != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InterlaceIntensityHigh") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InterlaceIntensityHigh") { IsSerialized = true, Value = (float)InterlaceIntensityHigh }; v.Variant = p;
            }
            if (UVdivisions != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVdivisions") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVdivisions") { IsSerialized = true, Value = (float)UVdivisions }; v.Variant = p;
            }
            if (UVoffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVoffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVoffset") { IsSerialized = true, Value = (float)UVoffset }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Emissive") { IsSerialized = true, Value = (float)Emissive }; v.Variant = p;
            }
        }
    }
    public partial class _alpha_control_refraction
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (RefractionMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RefractionMap") { IsSerialized = true, DepotPath = RefractionMap }; v.Variant = p;
            }
            if (RecolorMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RecolorMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RecolorMap") { IsSerialized = true, DepotPath = RecolorMap }; v.Variant = p;
            }
            if (RefractionAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionAmount") { IsSerialized = true, Value = (float)RefractionAmount }; v.Variant = p;
            }
            if (RefractionSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionSpeed") { IsSerialized = true, Value = (float)RefractionSpeed }; v.Variant = p;
            }
            if (JerkingSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "JerkingSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "JerkingSpeed") { IsSerialized = true, Value = (float)JerkingSpeed }; v.Variant = p;
            }
            if (JerkingAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "JerkingAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "JerkingAmount") { IsSerialized = true, Value = (float)JerkingAmount }; v.Variant = p;
            }
            if (MaxAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxAlpha") { IsSerialized = true, Value = (float)MaxAlpha }; v.Variant = p;
            }
            if (RecolorAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RecolorAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RecolorAmount") { IsSerialized = true, Value = (float)RecolorAmount }; v.Variant = p;
            }
            if (RecolorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RecolorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RecolorMultiplier") { IsSerialized = true, Value = (float)RecolorMultiplier }; v.Variant = p;
            }
            if (SpecularColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SpecularColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "SpecularColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)SpecularColor.Red }, Green = new CUInt8() { Value = (Byte)SpecularColor.Green }, Blue = new CUInt8() { Value = (Byte)SpecularColor.Blue }, Alpha = new CUInt8() { Value = (Byte)SpecularColor.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _animated_decal
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseAlpha") { IsSerialized = true, Value = (float)DiffuseAlpha }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (NormalAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalAlpha") { IsSerialized = true, Value = (float)NormalAlpha }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (RevealMasks != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RevealMasks") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RevealMasks") { IsSerialized = true, DepotPath = RevealMasks }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (AnimationFramesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesWidth") { IsSerialized = true, Value = (float)AnimationFramesWidth }; v.Variant = p;
            }
            if (AnimationFramesHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimationFramesHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AnimationFramesHeight") { IsSerialized = true, Value = (float)AnimationFramesHeight }; v.Variant = p;
            }
            if (FloatParam != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FloatParam") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FloatParam") { IsSerialized = true, Value = (float)FloatParam }; v.Variant = p;
            }
        }
    }
    public partial class _beam_particles
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (MainTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MainTexture") { IsSerialized = true, DepotPath = MainTexture }; v.Variant = p;
            }
            if (AdditionalMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditionalMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "AdditionalMask") { IsSerialized = true, DepotPath = AdditionalMask }; v.Variant = p;
            }
            if (UseMaskROrA != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseMaskROrA") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseMaskROrA") { IsSerialized = true, Value = (float)UseMaskROrA }; v.Variant = p;
            }
            if (AdditionalMaskFlowmap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditionalMaskFlowmap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "AdditionalMaskFlowmap") { IsSerialized = true, DepotPath = AdditionalMaskFlowmap }; v.Variant = p;
            }
            if (MainColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "MainColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)MainColor.Red }, Green = new CUInt8() { Value = (Byte)MainColor.Green }, Blue = new CUInt8() { Value = (Byte)MainColor.Blue }, Alpha = new CUInt8() { Value = (Byte)MainColor.Alpha } }; v.Variant = p;
            }
            if (ColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMultiplier") { IsSerialized = true, Value = (float)ColorMultiplier }; v.Variant = p;
            }
            if (TextureScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TextureScale") { IsSerialized = true, Value = (float)TextureScale }; v.Variant = p;
            }
            if (TextureStretch != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureStretch") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TextureStretch") { IsSerialized = true, Value = (float)TextureStretch }; v.Variant = p;
            }
            if (TextureHasNoAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureHasNoAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TextureHasNoAlpha") { IsSerialized = true, Value = (float)TextureHasNoAlpha }; v.Variant = p;
            }
            if (BlackbodyOrColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlackbodyOrColor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlackbodyOrColor") { IsSerialized = true, Value = (float)BlackbodyOrColor }; v.Variant = p;
            }
            if (FlowmapControl != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlowmapControl") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "FlowmapControl") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)FlowmapControl.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)FlowmapControl.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)FlowmapControl.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)FlowmapControl.W };
            }
            if (AdditionalMaskControl != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditionalMaskControl") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "AdditionalMaskControl") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)AdditionalMaskControl.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)AdditionalMaskControl.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)AdditionalMaskControl.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)AdditionalMaskControl.W };
            }
            if (FlowmapMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlowmapMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlowmapMultiplier") { IsSerialized = true, Value = (float)FlowmapMultiplier }; v.Variant = p;
            }
            if (TextureHasAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureHasAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TextureHasAlpha") { IsSerialized = true, Value = (float)TextureHasAlpha }; v.Variant = p;
            }
        }
    }
    public partial class _blackbodyradiation
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Temperature != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Temperature") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Temperature") { IsSerialized = true, Value = (float)Temperature }; v.Variant = p;
            }
            if (subUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "subUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "subUVWidth") { IsSerialized = true, Value = (float)subUVWidth }; v.Variant = p;
            }
            if (AlphaExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaExponent") { IsSerialized = true, Value = (float)AlphaExponent }; v.Variant = p;
            }
            if (subUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "subUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "subUVHeight") { IsSerialized = true, Value = (float)subUVHeight }; v.Variant = p;
            }
            if (ScatterAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatterAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScatterAmount") { IsSerialized = true, Value = (float)ScatterAmount }; v.Variant = p;
            }
            if (ScatterPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatterPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScatterPower") { IsSerialized = true, Value = (float)ScatterPower }; v.Variant = p;
            }
            if (FireScatterAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FireScatterAlpha") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FireScatterAlpha") { IsSerialized = true, DepotPath = FireScatterAlpha }; v.Variant = p;
            }
            if (HueShift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HueShift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HueShift") { IsSerialized = true, Value = (float)HueShift }; v.Variant = p;
            }
            if (HueSpread != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HueSpread") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HueSpread") { IsSerialized = true, Value = (float)HueSpread }; v.Variant = p;
            }
            if (maxAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "maxAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "maxAlpha") { IsSerialized = true, Value = (float)maxAlpha }; v.Variant = p;
            }
            if (LightSmoke != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightSmoke") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "LightSmoke") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)LightSmoke.Red }, Green = new CUInt8() { Value = (Byte)LightSmoke.Green }, Blue = new CUInt8() { Value = (Byte)LightSmoke.Blue }, Alpha = new CUInt8() { Value = (Byte)LightSmoke.Alpha } }; v.Variant = p;
            }
            if (DarkSmoke != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DarkSmoke") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DarkSmoke") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DarkSmoke.Red }, Green = new CUInt8() { Value = (Byte)DarkSmoke.Green }, Blue = new CUInt8() { Value = (Byte)DarkSmoke.Blue }, Alpha = new CUInt8() { Value = (Byte)DarkSmoke.Alpha } }; v.Variant = p;
            }
            if (ExpensiveBlending != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ExpensiveBlending") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ExpensiveBlending") { IsSerialized = true, Value = (float)ExpensiveBlending }; v.Variant = p;
            }
            if (Saturation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Saturation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Saturation") { IsSerialized = true, Value = (float)Saturation }; v.Variant = p;
            }
            if (SoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftAlpha") { IsSerialized = true, Value = (float)SoftAlpha }; v.Variant = p;
            }
            if (MultiplierExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultiplierExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MultiplierExponent") { IsSerialized = true, Value = (float)MultiplierExponent }; v.Variant = p;
            }
            if (TexCoordDtortScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDtortScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDtortScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDtortScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDtortScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDtortScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDtortScale.W };
            }
            if (TexCoordDtortSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDtortSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDtortSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDtortSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDtortSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDtortSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDtortSpeed.W };
            }
            if (Distort != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Distort") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Distort") { IsSerialized = true, DepotPath = Distort }; v.Variant = p;
            }
            if (NoAlphaOnTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoAlphaOnTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoAlphaOnTexture") { IsSerialized = true, Value = (float)NoAlphaOnTexture }; v.Variant = p;
            }
            if (EatUpOrStraightAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EatUpOrStraightAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EatUpOrStraightAlpha") { IsSerialized = true, Value = (float)EatUpOrStraightAlpha }; v.Variant = p;
            }
            if (DistortAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortAmount") { IsSerialized = true, Value = (float)DistortAmount }; v.Variant = p;
            }
            if (EnableRowAnimation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRowAnimation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRowAnimation") { IsSerialized = true, Value = (float)EnableRowAnimation }; v.Variant = p;
            }
            if (DoNotApplyLighting != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DoNotApplyLighting") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DoNotApplyLighting") { IsSerialized = true, Value = (float)DoNotApplyLighting }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (InvertMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InvertMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InvertMask") { IsSerialized = true, Value = (float)InvertMask }; v.Variant = p;
            }
            if (MaskTilingAndSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTilingAndSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskTilingAndSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskTilingAndSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskTilingAndSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskTilingAndSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskTilingAndSpeed.W };
            }
            if (MaskIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskIntensity") { IsSerialized = true, Value = (float)MaskIntensity }; v.Variant = p;
            }
            if (UseVertexAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseVertexAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseVertexAlpha") { IsSerialized = true, Value = (float)UseVertexAlpha }; v.Variant = p;
            }
            if (DotWithLookAt != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotWithLookAt") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotWithLookAt") { IsSerialized = true, Value = (float)DotWithLookAt }; v.Variant = p;
            }
        }
    }
    public partial class _blackbody_simple
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (TemperatureTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TemperatureTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "TemperatureTexture") { IsSerialized = true, DepotPath = TemperatureTexture }; v.Variant = p;
            }
            if (Temperature != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Temperature") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Temperature") { IsSerialized = true, Value = (float)Temperature }; v.Variant = p;
            }
            if (SubUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVWidth") { IsSerialized = true, Value = (float)SubUVWidth }; v.Variant = p;
            }
            if (SubUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVHeight") { IsSerialized = true, Value = (float)SubUVHeight }; v.Variant = p;
            }
            if (SoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftAlpha") { IsSerialized = true, Value = (float)SoftAlpha }; v.Variant = p;
            }
        }
    }
    public partial class _blood_transparent
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (ColorThin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorThin") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorThin") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorThin.Red }, Green = new CUInt8() { Value = (Byte)ColorThin.Green }, Blue = new CUInt8() { Value = (Byte)ColorThin.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorThin.Alpha } }; v.Variant = p;
            }
            if (ColorThick != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorThick") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorThick") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorThick.Red }, Green = new CUInt8() { Value = (Byte)ColorThick.Green }, Blue = new CUInt8() { Value = (Byte)ColorThick.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorThick.Alpha } }; v.Variant = p;
            }
            if (BloodThickness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BloodThickness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BloodThickness") { IsSerialized = true, Value = (float)BloodThickness }; v.Variant = p;
            }
            if (LightingBleeding != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightingBleeding") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightingBleeding") { IsSerialized = true, Value = (float)LightingBleeding }; v.Variant = p;
            }
            if (SpecularPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SpecularPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SpecularPower") { IsSerialized = true, Value = (float)SpecularPower }; v.Variant = p;
            }
            if (SpecularMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SpecularMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SpecularMultiplier") { IsSerialized = true, Value = (float)SpecularMultiplier }; v.Variant = p;
            }
            if (SubUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVWidth") { IsSerialized = true, Value = (float)SubUVWidth }; v.Variant = p;
            }
            if (SubUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVHeight") { IsSerialized = true, Value = (float)SubUVHeight }; v.Variant = p;
            }
            if (CurrentFrame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CurrentFrame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CurrentFrame") { IsSerialized = true, Value = (float)CurrentFrame }; v.Variant = p;
            }
            if (NormalAndDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAndDensity") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalAndDensity") { IsSerialized = true, DepotPath = NormalAndDensity }; v.Variant = p;
            }
            if (VelocityMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VelocityMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VelocityMap") { IsSerialized = true, DepotPath = VelocityMap }; v.Variant = p;
            }
            if (SpecularMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SpecularMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SpecularMap") { IsSerialized = true, DepotPath = SpecularMap }; v.Variant = p;
            }
            if (FlowmapStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlowmapStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlowmapStrength") { IsSerialized = true, Value = (float)FlowmapStrength }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (NormalPow != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalPow") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalPow") { IsSerialized = true, Value = (float)NormalPow }; v.Variant = p;
            }
            if (EVCompensation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EVCompensation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EVCompensation") { IsSerialized = true, Value = (float)EVCompensation }; v.Variant = p;
            }
        }
    }
    public partial class _braindance_fog
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BrightnessNear != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BrightnessNear") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BrightnessNear") { IsSerialized = true, Value = (float)BrightnessNear }; v.Variant = p;
            }
            if (BrightnessFar != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BrightnessFar") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BrightnessFar") { IsSerialized = true, Value = (float)BrightnessFar }; v.Variant = p;
            }
            if (RevealMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RevealMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RevealMask") { IsSerialized = true, DepotPath = RevealMask }; v.Variant = p;
            }
            if (RevealMaskFramesY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RevealMaskFramesY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RevealMaskFramesY") { IsSerialized = true, Value = (float)RevealMaskFramesY }; v.Variant = p;
            }
            if (RevealMaskBoundsMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RevealMaskBoundsMin") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RevealMaskBoundsMin") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RevealMaskBoundsMin.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RevealMaskBoundsMin.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RevealMaskBoundsMin.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RevealMaskBoundsMin.W };
            }
            if (RevealMaskBoundsMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RevealMaskBoundsMax") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RevealMaskBoundsMax") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RevealMaskBoundsMax.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RevealMaskBoundsMax.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RevealMaskBoundsMax.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RevealMaskBoundsMax.W };
            }
            if (TonemapExposure != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TonemapExposure") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TonemapExposure") { IsSerialized = true, Value = (float)TonemapExposure }; v.Variant = p;
            }
            if (FarFogBrightness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FarFogBrightness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FarFogBrightness") { IsSerialized = true, Value = (float)FarFogBrightness }; v.Variant = p;
            }
            if (FarFogDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FarFogDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FarFogDistance") { IsSerialized = true, Value = (float)FarFogDistance }; v.Variant = p;
            }
            if (UseHack_SQ021 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseHack_SQ021") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseHack_SQ021") { IsSerialized = true, Value = (float)UseHack_SQ021 }; v.Variant = p;
            }
            if (CluesMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CluesMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "CluesMap") { IsSerialized = true, DepotPath = CluesMap }; v.Variant = p;
            }
            if (CluesBrightness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CluesBrightness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CluesBrightness") { IsSerialized = true, Value = (float)CluesBrightness }; v.Variant = p;
            }
            if (UseClueDepthClipping != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseClueDepthClipping") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseClueDepthClipping") { IsSerialized = true, Value = (float)UseClueDepthClipping }; v.Variant = p;
            }
            if (VectorField != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField") { IsSerialized = true, DepotPath = VectorField }; v.Variant = p;
            }
            if (VectorFieldSliceCount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldSliceCount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VectorFieldSliceCount") { IsSerialized = true, Value = (float)VectorFieldSliceCount }; v.Variant = p;
            }
            if (VectorFieldTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VectorFieldTiling") { IsSerialized = true, Value = (float)VectorFieldTiling }; v.Variant = p;
            }
            if (VectorFieldAnimSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldAnimSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VectorFieldAnimSpeed") { IsSerialized = true, Value = (float)VectorFieldAnimSpeed }; v.Variant = p;
            }
            if (VectorFieldStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VectorFieldStrength") { IsSerialized = true, Value = (float)VectorFieldStrength }; v.Variant = p;
            }
        }
    }
    public partial class _braindance_particle_thermal
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Brightness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Brightness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Brightness") { IsSerialized = true, Value = (float)Brightness }; v.Variant = p;
            }
            if (FireScatterAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FireScatterAlpha") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FireScatterAlpha") { IsSerialized = true, DepotPath = FireScatterAlpha }; v.Variant = p;
            }
            if (subUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "subUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "subUVWidth") { IsSerialized = true, Value = (float)subUVWidth }; v.Variant = p;
            }
            if (subUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "subUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "subUVHeight") { IsSerialized = true, Value = (float)subUVHeight }; v.Variant = p;
            }
            if (AlphaExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaExponent") { IsSerialized = true, Value = (float)AlphaExponent }; v.Variant = p;
            }
            if (maxAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "maxAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "maxAlpha") { IsSerialized = true, Value = (float)maxAlpha }; v.Variant = p;
            }
            if (EatUpOrStraightAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EatUpOrStraightAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EatUpOrStraightAlpha") { IsSerialized = true, Value = (float)EatUpOrStraightAlpha }; v.Variant = p;
            }
            if (SoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftAlpha") { IsSerialized = true, Value = (float)SoftAlpha }; v.Variant = p;
            }
            if (UseVertexAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseVertexAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseVertexAlpha") { IsSerialized = true, Value = (float)UseVertexAlpha }; v.Variant = p;
            }
        }
    }
    public partial class _cloak
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Distortion != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Distortion") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Distortion") { IsSerialized = true, DepotPath = Distortion }; v.Variant = p;
            }
            if (DistortionUVScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortionUVScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DistortionUVScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DistortionUVScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DistortionUVScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DistortionUVScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DistortionUVScale.W };
            }
            if (DistortionVisibility != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortionVisibility") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortionVisibility") { IsSerialized = true, Value = (float)DistortionVisibility }; v.Variant = p;
            }
            if (IridescenceMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IridescenceMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "IridescenceMask") { IsSerialized = true, DepotPath = IridescenceMask }; v.Variant = p;
            }
            if (IridescenceSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IridescenceSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IridescenceSpeed") { IsSerialized = true, Value = (float)IridescenceSpeed }; v.Variant = p;
            }
            if (IridescenceDim != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IridescenceDim") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IridescenceDim") { IsSerialized = true, Value = (float)IridescenceDim }; v.Variant = p;
            }
            if (Tinge != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tinge") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Tinge") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Tinge.Red }, Green = new CUInt8() { Value = (Byte)Tinge.Green }, Blue = new CUInt8() { Value = (Byte)Tinge.Blue }, Alpha = new CUInt8() { Value = (Byte)Tinge.Alpha } }; v.Variant = p;
            }
            if (DirtMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DirtMask") { IsSerialized = true, DepotPath = DirtMask }; v.Variant = p;
            }
            if (DirtMaskScaleAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtMaskScaleAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DirtMaskScaleAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DirtMaskScaleAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DirtMaskScaleAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DirtMaskScaleAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DirtMaskScaleAndOffset.W };
            }
            if (DirtMaskPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtMaskPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DirtMaskPower") { IsSerialized = true, Value = (float)DirtMaskPower }; v.Variant = p;
            }
            if (DirtMaskMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtMaskMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DirtMaskMultiplier") { IsSerialized = true, Value = (float)DirtMaskMultiplier }; v.Variant = p;
            }
            if (DirtColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DirtColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DirtColor.Red }, Green = new CUInt8() { Value = (Byte)DirtColor.Green }, Blue = new CUInt8() { Value = (Byte)DirtColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DirtColor.Alpha } }; v.Variant = p;
            }
            if (UseOutline != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseOutline") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseOutline") { IsSerialized = true, Value = (float)UseOutline }; v.Variant = p;
            }
            if (OutlineOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OutlineOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OutlineOpacity") { IsSerialized = true, Value = (float)OutlineOpacity }; v.Variant = p;
            }
            if (OutlineSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OutlineSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OutlineSize") { IsSerialized = true, Value = (float)OutlineSize }; v.Variant = p;
            }
        }
    }
    public partial class _cyberspace_pixelsort_stencil
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (CameraOffsetZ != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CameraOffsetZ") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "CameraOffsetZ") { IsSerialized = true, Value = (float)CameraOffsetZ }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
        }
    }
    public partial class _cyberspace_pixelsort_stencil_0
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
        }
    }
    public partial class _cyberware_animation
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (EmissiveMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "EmissiveMask") { IsSerialized = true, DepotPath = EmissiveMask }; v.Variant = p;
            }
            if (UseTimeOrFloatParam != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseTimeOrFloatParam") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseTimeOrFloatParam") { IsSerialized = true, Value = (float)UseTimeOrFloatParam }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
        }
    }
    public partial class _damage_indicator
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
            if (Noise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Noise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Noise") { IsSerialized = true, DepotPath = Noise }; v.Variant = p;
            }
            if (DoubleDistortWithNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DoubleDistortWithNoise") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DoubleDistortWithNoise") { IsSerialized = true, Value = (float)DoubleDistortWithNoise }; v.Variant = p;
            }
            if (Scanline != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Scanline") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Scanline") { IsSerialized = true, DepotPath = Scanline }; v.Variant = p;
            }
            if (NoiseScailingAndSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseScailingAndSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NoiseScailingAndSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NoiseScailingAndSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NoiseScailingAndSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NoiseScailingAndSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NoiseScailingAndSpeed.W };
            }
            if (MinMaskExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MinMaskExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MinMaskExponent") { IsSerialized = true, Value = (float)MinMaskExponent }; v.Variant = p;
            }
            if (MaxMaskExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxMaskExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxMaskExponent") { IsSerialized = true, Value = (float)MaxMaskExponent }; v.Variant = p;
            }
            if (MaskMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskMultiplier") { IsSerialized = true, Value = (float)MaskMultiplier }; v.Variant = p;
            }
            if (ThickScanlinesColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ThickScanlinesColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ThickScanlinesColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ThickScanlinesColor.Red }, Green = new CUInt8() { Value = (Byte)ThickScanlinesColor.Green }, Blue = new CUInt8() { Value = (Byte)ThickScanlinesColor.Blue }, Alpha = new CUInt8() { Value = (Byte)ThickScanlinesColor.Alpha } }; v.Variant = p;
            }
            if (ThinScanlinesColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ThinScanlinesColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ThinScanlinesColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ThinScanlinesColor.Red }, Green = new CUInt8() { Value = (Byte)ThinScanlinesColor.Green }, Blue = new CUInt8() { Value = (Byte)ThinScanlinesColor.Blue }, Alpha = new CUInt8() { Value = (Byte)ThinScanlinesColor.Alpha } }; v.Variant = p;
            }
            if (ScanlineDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineDensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlineDensity") { IsSerialized = true, Value = (float)ScanlineDensity }; v.Variant = p;
            }
            if (ScanlineMinimumValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineMinimumValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlineMinimumValue") { IsSerialized = true, Value = (float)ScanlineMinimumValue }; v.Variant = p;
            }
            if (ThickScanlineMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ThickScanlineMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ThickScanlineMultiplier") { IsSerialized = true, Value = (float)ThickScanlineMultiplier }; v.Variant = p;
            }
            if (ThinScanlineExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ThinScanlineExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ThinScanlineExponent") { IsSerialized = true, Value = (float)ThinScanlineExponent }; v.Variant = p;
            }
            if (ThinScanlineMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ThinScanlineMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ThinScanlineMultiplier") { IsSerialized = true, Value = (float)ThinScanlineMultiplier }; v.Variant = p;
            }
            if (RefractionOffsetStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionOffsetStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionOffsetStrength") { IsSerialized = true, Value = (float)RefractionOffsetStrength }; v.Variant = p;
            }
        }
    }
    public partial class _device_diode
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (NormalOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalOffset") { IsSerialized = true, Value = (float)NormalOffset }; v.Variant = p;
            }
            if (VehicleDamageInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VehicleDamageInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VehicleDamageInfluence") { IsSerialized = true, Value = (float)VehicleDamageInfluence }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (Blinking != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Blinking") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Blinking") { IsSerialized = true, Value = (float)Blinking }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (BlinkingSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkingSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkingSpeed") { IsSerialized = true, Value = (float)BlinkingSpeed }; v.Variant = p;
            }
            if (UseMaterialParameter != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseMaterialParameter") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseMaterialParameter") { IsSerialized = true, Value = (float)UseMaterialParameter }; v.Variant = p;
            }
            if (EmissiveColor1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor1") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor1") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor1.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor1.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor1.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor1.Alpha } }; v.Variant = p;
            }
            if (EmissiveColor2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor2") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor2") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor2.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor2.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor2.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor2.Alpha } }; v.Variant = p;
            }
            if (EmissiveInitialState != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveInitialState") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveInitialState") { IsSerialized = true, Value = (float)EmissiveInitialState }; v.Variant = p;
            }
            if (UseTwoEmissiveColors != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseTwoEmissiveColors") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseTwoEmissiveColors") { IsSerialized = true, Value = (float)UseTwoEmissiveColors }; v.Variant = p;
            }
            if (SwitchingTwoEmissiveColorsSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SwitchingTwoEmissiveColorsSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SwitchingTwoEmissiveColorsSpeed") { IsSerialized = true, Value = (float)SwitchingTwoEmissiveColorsSpeed }; v.Variant = p;
            }
            if (UseFresnel != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseFresnel") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseFresnel") { IsSerialized = true, Value = (float)UseFresnel }; v.Variant = p;
            }
        }
    }
    public partial class _device_diode_multi_state
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (NormalOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalOffset") { IsSerialized = true, Value = (float)NormalOffset }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveColor1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor1") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor1") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor1.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor1.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor1.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor1.Alpha } }; v.Variant = p;
            }
            if (EmissiveColor2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor2") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor2") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor2.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor2.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor2.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor2.Alpha } }; v.Variant = p;
            }
            if (EmissiveColor3 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor3") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor3") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor3.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor3.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor3.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor3.Alpha } }; v.Variant = p;
            }
            if (EmissiveColor4 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor4") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor4") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor4.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor4.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor4.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor4.Alpha } }; v.Variant = p;
            }
            if (EmissiveColorSelector != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColorSelector") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveColorSelector") { IsSerialized = true, Value = (float)EmissiveColorSelector }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (Blinking != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Blinking") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Blinking") { IsSerialized = true, Value = (float)Blinking }; v.Variant = p;
            }
            if (BlinkingSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkingSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkingSpeed") { IsSerialized = true, Value = (float)BlinkingSpeed }; v.Variant = p;
            }
            if (UseMaterialParameter != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseMaterialParameter") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseMaterialParameter") { IsSerialized = true, Value = (float)UseMaterialParameter }; v.Variant = p;
            }
            if (EmissiveInitialState != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveInitialState") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveInitialState") { IsSerialized = true, Value = (float)EmissiveInitialState }; v.Variant = p;
            }
        }
    }
    public partial class _diode_pavements
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Metalness") { IsSerialized = true, Value = (float)Metalness }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (DiodesMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiodesMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiodesMask") { IsSerialized = true, DepotPath = DiodesMask }; v.Variant = p;
            }
            if (SignTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SignTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SignTexture") { IsSerialized = true, DepotPath = SignTexture }; v.Variant = p;
            }
            if (DiodesTilingAndScrollSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiodesTilingAndScrollSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DiodesTilingAndScrollSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DiodesTilingAndScrollSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DiodesTilingAndScrollSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DiodesTilingAndScrollSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DiodesTilingAndScrollSpeed.W };
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (UseMaskAsAlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseMaskAsAlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseMaskAsAlphaThreshold") { IsSerialized = true, Value = (float)UseMaskAsAlphaThreshold }; v.Variant = p;
            }
            if (AmountOfGlitch != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AmountOfGlitch") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AmountOfGlitch") { IsSerialized = true, Value = (float)AmountOfGlitch }; v.Variant = p;
            }
            if (GlitchSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchSpeed") { IsSerialized = true, Value = (float)GlitchSpeed }; v.Variant = p;
            }
            if (NumberOfRows != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NumberOfRows") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NumberOfRows") { IsSerialized = true, Value = (float)NumberOfRows }; v.Variant = p;
            }
            if (DisplayRow != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisplayRow") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisplayRow") { IsSerialized = true, Value = (float)DisplayRow }; v.Variant = p;
            }
            if (BaseColorRoughnessTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorRoughnessTiling") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorRoughnessTiling") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorRoughnessTiling.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorRoughnessTiling.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorRoughnessTiling.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorRoughnessTiling.W };
            }
        }
    }
    public partial class _drugged_sobel
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (DarkColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DarkColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DarkColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DarkColor.Red }, Green = new CUInt8() { Value = (Byte)DarkColor.Green }, Blue = new CUInt8() { Value = (Byte)DarkColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DarkColor.Alpha } }; v.Variant = p;
            }
            if (BrightColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BrightColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BrightColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BrightColor.Red }, Green = new CUInt8() { Value = (Byte)BrightColor.Green }, Blue = new CUInt8() { Value = (Byte)BrightColor.Blue }, Alpha = new CUInt8() { Value = (Byte)BrightColor.Alpha } }; v.Variant = p;
            }
            if (DarkColorPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DarkColorPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DarkColorPower") { IsSerialized = true, Value = (float)DarkColorPower }; v.Variant = p;
            }
            if (KernelOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "KernelOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "KernelOffset") { IsSerialized = true, Value = (float)KernelOffset }; v.Variant = p;
            }
            if (UseInEngineSobel != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseInEngineSobel") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseInEngineSobel") { IsSerialized = true, Value = (float)UseInEngineSobel }; v.Variant = p;
            }
        }
    }
    public partial class _emissive_basic_transparent
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
            if (AnimMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AnimMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "AnimMask") { IsSerialized = true, DepotPath = AnimMask }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _fog_laser
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditionalThicnkess != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditionalThicnkess") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditionalThicnkess") { IsSerialized = true, Value = (float)AdditionalThicnkess }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (TimeScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TimeScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TimeScale") { IsSerialized = true, Value = (float)TimeScale }; v.Variant = p;
            }
            if (NoiseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NoiseTexture") { IsSerialized = true, DepotPath = NoiseTexture }; v.Variant = p;
            }
            if (DetailNoiseScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailNoiseScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DetailNoiseScale") { IsSerialized = true, Value = (float)DetailNoiseScale }; v.Variant = p;
            }
            if (DetailNoiseBrighten != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DetailNoiseBrighten") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DetailNoiseBrighten") { IsSerialized = true, Value = (float)DetailNoiseBrighten }; v.Variant = p;
            }
            if (GeneralNoiseScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GeneralNoiseScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GeneralNoiseScale") { IsSerialized = true, Value = (float)GeneralNoiseScale }; v.Variant = p;
            }
            if (LaserColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LaserColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "LaserColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)LaserColor.Red }, Green = new CUInt8() { Value = (Byte)LaserColor.Green }, Blue = new CUInt8() { Value = (Byte)LaserColor.Blue }, Alpha = new CUInt8() { Value = (Byte)LaserColor.Alpha } }; v.Variant = p;
            }
            if (SmokeExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SmokeExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SmokeExponent") { IsSerialized = true, Value = (float)SmokeExponent }; v.Variant = p;
            }
            if (SmokeMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SmokeMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SmokeMultiplier") { IsSerialized = true, Value = (float)SmokeMultiplier }; v.Variant = p;
            }
            if (LineThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LineThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LineThreshold") { IsSerialized = true, Value = (float)LineThreshold }; v.Variant = p;
            }
            if (LineMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LineMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LineMultiplier") { IsSerialized = true, Value = (float)LineMultiplier }; v.Variant = p;
            }
            if (LineAddOrSubtract != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LineAddOrSubtract") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LineAddOrSubtract") { IsSerialized = true, Value = (float)LineAddOrSubtract }; v.Variant = p;
            }
            if (UseSoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseSoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseSoftAlpha") { IsSerialized = true, Value = (float)UseSoftAlpha }; v.Variant = p;
            }
            if (SoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftAlpha") { IsSerialized = true, Value = (float)SoftAlpha }; v.Variant = p;
            }
            if (SoftAlphaMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftAlphaMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftAlphaMultiplier") { IsSerialized = true, Value = (float)SoftAlphaMultiplier }; v.Variant = p;
            }
            if (HorizontalGradientMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HorizontalGradientMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HorizontalGradientMultiplier") { IsSerialized = true, Value = (float)HorizontalGradientMultiplier }; v.Variant = p;
            }
            if (FlipEdgeFade != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlipEdgeFade") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlipEdgeFade") { IsSerialized = true, Value = (float)FlipEdgeFade }; v.Variant = p;
            }
            if (UseVertexColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseVertexColor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseVertexColor") { IsSerialized = true, Value = (float)UseVertexColor }; v.Variant = p;
            }
            if (TextureRatioU != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureRatioU") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TextureRatioU") { IsSerialized = true, Value = (float)TextureRatioU }; v.Variant = p;
            }
            if (TextureRatioV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureRatioV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TextureRatioV") { IsSerialized = true, Value = (float)TextureRatioV }; v.Variant = p;
            }
            if (IntensiveCore != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IntensiveCore") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IntensiveCore") { IsSerialized = true, Value = (float)IntensiveCore }; v.Variant = p;
            }
            if (RotateUV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RotateUV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RotateUV") { IsSerialized = true, Value = (float)RotateUV }; v.Variant = p;
            }
            if (VectorField != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField") { IsSerialized = true, DepotPath = VectorField }; v.Variant = p;
            }
            if (VectorFieldSliceCount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorFieldSliceCount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VectorFieldSliceCount") { IsSerialized = true, Value = (float)VectorFieldSliceCount }; v.Variant = p;
            }
            if (UseWorldSpace != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseWorldSpace") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseWorldSpace") { IsSerialized = true, Value = (float)UseWorldSpace }; v.Variant = p;
            }
        }
    }
    public partial class _hologram
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (ScaleReferencePosAndScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScaleReferencePosAndScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "ScaleReferencePosAndScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)ScaleReferencePosAndScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)ScaleReferencePosAndScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)ScaleReferencePosAndScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)ScaleReferencePosAndScale.W };
            }
            if (GlitchChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchChance") { IsSerialized = true, Value = (float)GlitchChance }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (OpaqueScanlineDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OpaqueScanlineDensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OpaqueScanlineDensity") { IsSerialized = true, Value = (float)OpaqueScanlineDensity }; v.Variant = p;
            }
            if (Scanline != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Scanline") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Scanline") { IsSerialized = true, DepotPath = Scanline }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (DotsTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DotsTexture") { IsSerialized = true, DepotPath = DotsTexture }; v.Variant = p;
            }
            if (DotsSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotsSize") { IsSerialized = true, Value = (float)DotsSize }; v.Variant = p;
            }
            if (DotsColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DotsColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DotsColor.Red }, Green = new CUInt8() { Value = (Byte)DotsColor.Green }, Blue = new CUInt8() { Value = (Byte)DotsColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DotsColor.Alpha } }; v.Variant = p;
            }
            if (Projector1Position != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Projector1Position") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Projector1Position") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Projector1Position.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Projector1Position.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Projector1Position.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Projector1Position.W };
            }
            if (SurfaceColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "SurfaceColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)SurfaceColor.Red }, Green = new CUInt8() { Value = (Byte)SurfaceColor.Green }, Blue = new CUInt8() { Value = (Byte)SurfaceColor.Blue }, Alpha = new CUInt8() { Value = (Byte)SurfaceColor.Alpha } }; v.Variant = p;
            }
            if (SurfaceShadows != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceShadows") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "SurfaceShadows") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)SurfaceShadows.Red }, Green = new CUInt8() { Value = (Byte)SurfaceShadows.Green }, Blue = new CUInt8() { Value = (Byte)SurfaceShadows.Blue }, Alpha = new CUInt8() { Value = (Byte)SurfaceShadows.Alpha } }; v.Variant = p;
            }
            if (FallofColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FallofColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "FallofColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)FallofColor.Red }, Green = new CUInt8() { Value = (Byte)FallofColor.Green }, Blue = new CUInt8() { Value = (Byte)FallofColor.Blue }, Alpha = new CUInt8() { Value = (Byte)FallofColor.Alpha } }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (GradientOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GradientOffset") { IsSerialized = true, Value = (float)GradientOffset }; v.Variant = p;
            }
            if (GradientLength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientLength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GradientLength") { IsSerialized = true, Value = (float)GradientLength }; v.Variant = p;
            }
            if (FresnelStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelStrength") { IsSerialized = true, Value = (float)FresnelStrength }; v.Variant = p;
            }
            if (DotsFresnelStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsFresnelStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotsFresnelStrength") { IsSerialized = true, Value = (float)DotsFresnelStrength }; v.Variant = p;
            }
            if (GlowStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlowStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlowStrength") { IsSerialized = true, Value = (float)GlowStrength }; v.Variant = p;
            }
            if (DesaturationStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DesaturationStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DesaturationStrength") { IsSerialized = true, Value = (float)DesaturationStrength }; v.Variant = p;
            }
            if (FlickerThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlickerThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlickerThreshold") { IsSerialized = true, Value = (float)FlickerThreshold }; v.Variant = p;
            }
            if (FlickerChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlickerChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlickerChance") { IsSerialized = true, Value = (float)FlickerChance }; v.Variant = p;
            }
            if (ArtifactsChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactsChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactsChance") { IsSerialized = true, Value = (float)ArtifactsChance }; v.Variant = p;
            }
            if (LightBleed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightBleed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightBleed") { IsSerialized = true, Value = (float)LightBleed }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (ScreenSpaceFlicker != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScreenSpaceFlicker") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScreenSpaceFlicker") { IsSerialized = true, Value = (float)ScreenSpaceFlicker }; v.Variant = p;
            }
            if (UseIsobars != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseIsobars") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseIsobars") { IsSerialized = true, Value = (float)UseIsobars }; v.Variant = p;
            }
            if (EntropyThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EntropyThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EntropyThreshold") { IsSerialized = true, Value = (float)EntropyThreshold }; v.Variant = p;
            }
            if (UseMovingDots != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseMovingDots") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseMovingDots") { IsSerialized = true, Value = (float)UseMovingDots }; v.Variant = p;
            }
            if (IsHair != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IsHair") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IsHair") { IsSerialized = true, Value = (float)IsHair }; v.Variant = p;
            }
            if (ScanlineThickness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineThickness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlineThickness") { IsSerialized = true, Value = (float)ScanlineThickness }; v.Variant = p;
            }
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (GlobalTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalTint") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlobalTint") { IsSerialized = true, Value = (float)GlobalTint }; v.Variant = p;
            }
            if (SampledOrProceduralDots != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SampledOrProceduralDots") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SampledOrProceduralDots") { IsSerialized = true, Value = (float)SampledOrProceduralDots }; v.Variant = p;
            }
            if (FullColorOrGrayscale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FullColorOrGrayscale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FullColorOrGrayscale") { IsSerialized = true, Value = (float)FullColorOrGrayscale }; v.Variant = p;
            }
        }
    }
    public partial class _hologram_two_sided
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (ScaleReferencePosAndScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScaleReferencePosAndScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "ScaleReferencePosAndScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)ScaleReferencePosAndScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)ScaleReferencePosAndScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)ScaleReferencePosAndScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)ScaleReferencePosAndScale.W };
            }
            if (GlitchChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchChance") { IsSerialized = true, Value = (float)GlitchChance }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (Scanline != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Scanline") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Scanline") { IsSerialized = true, DepotPath = Scanline }; v.Variant = p;
            }
            if (DotsTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DotsTexture") { IsSerialized = true, DepotPath = DotsTexture }; v.Variant = p;
            }
            if (Projector1Position != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Projector1Position") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Projector1Position") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Projector1Position.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Projector1Position.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Projector1Position.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Projector1Position.W };
            }
            if (OpaqueScanlineDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OpaqueScanlineDensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OpaqueScanlineDensity") { IsSerialized = true, Value = (float)OpaqueScanlineDensity }; v.Variant = p;
            }
            if (DotsSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotsSize") { IsSerialized = true, Value = (float)DotsSize }; v.Variant = p;
            }
            if (DotsColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DotsColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DotsColor.Red }, Green = new CUInt8() { Value = (Byte)DotsColor.Green }, Blue = new CUInt8() { Value = (Byte)DotsColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DotsColor.Alpha } }; v.Variant = p;
            }
            if (SurfaceColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "SurfaceColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)SurfaceColor.Red }, Green = new CUInt8() { Value = (Byte)SurfaceColor.Green }, Blue = new CUInt8() { Value = (Byte)SurfaceColor.Blue }, Alpha = new CUInt8() { Value = (Byte)SurfaceColor.Alpha } }; v.Variant = p;
            }
            if (SurfaceShadows != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceShadows") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "SurfaceShadows") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)SurfaceShadows.Red }, Green = new CUInt8() { Value = (Byte)SurfaceShadows.Green }, Blue = new CUInt8() { Value = (Byte)SurfaceShadows.Blue }, Alpha = new CUInt8() { Value = (Byte)SurfaceShadows.Alpha } }; v.Variant = p;
            }
            if (FallofColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FallofColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "FallofColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)FallofColor.Red }, Green = new CUInt8() { Value = (Byte)FallofColor.Green }, Blue = new CUInt8() { Value = (Byte)FallofColor.Blue }, Alpha = new CUInt8() { Value = (Byte)FallofColor.Alpha } }; v.Variant = p;
            }
            if (GradientOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GradientOffset") { IsSerialized = true, Value = (float)GradientOffset }; v.Variant = p;
            }
            if (GradientLength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientLength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GradientLength") { IsSerialized = true, Value = (float)GradientLength }; v.Variant = p;
            }
            if (FresnelStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelStrength") { IsSerialized = true, Value = (float)FresnelStrength }; v.Variant = p;
            }
            if (DotsFresnelStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsFresnelStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotsFresnelStrength") { IsSerialized = true, Value = (float)DotsFresnelStrength }; v.Variant = p;
            }
            if (GlowStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlowStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlowStrength") { IsSerialized = true, Value = (float)GlowStrength }; v.Variant = p;
            }
            if (DesaturationStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DesaturationStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DesaturationStrength") { IsSerialized = true, Value = (float)DesaturationStrength }; v.Variant = p;
            }
            if (FlickerThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlickerThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlickerThreshold") { IsSerialized = true, Value = (float)FlickerThreshold }; v.Variant = p;
            }
            if (FlickerChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlickerChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlickerChance") { IsSerialized = true, Value = (float)FlickerChance }; v.Variant = p;
            }
            if (ArtifactsChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactsChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactsChance") { IsSerialized = true, Value = (float)ArtifactsChance }; v.Variant = p;
            }
            if (LightBleed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightBleed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightBleed") { IsSerialized = true, Value = (float)LightBleed }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (ScreenSpaceFlicker != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScreenSpaceFlicker") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScreenSpaceFlicker") { IsSerialized = true, Value = (float)ScreenSpaceFlicker }; v.Variant = p;
            }
            if (UseIsobars != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseIsobars") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseIsobars") { IsSerialized = true, Value = (float)UseIsobars }; v.Variant = p;
            }
            if (EntropyThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EntropyThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EntropyThreshold") { IsSerialized = true, Value = (float)EntropyThreshold }; v.Variant = p;
            }
            if (UseMovingDots != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseMovingDots") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseMovingDots") { IsSerialized = true, Value = (float)UseMovingDots }; v.Variant = p;
            }
            if (IsHair != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IsHair") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IsHair") { IsSerialized = true, Value = (float)IsHair }; v.Variant = p;
            }
            if (ScanlineThickness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineThickness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlineThickness") { IsSerialized = true, Value = (float)ScanlineThickness }; v.Variant = p;
            }
            if (Opacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Opacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Opacity") { IsSerialized = true, Value = (float)Opacity }; v.Variant = p;
            }
            if (GlobalTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalTint") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlobalTint") { IsSerialized = true, Value = (float)GlobalTint }; v.Variant = p;
            }
            if (SampledOrProceduralDots != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SampledOrProceduralDots") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SampledOrProceduralDots") { IsSerialized = true, Value = (float)SampledOrProceduralDots }; v.Variant = p;
            }
            if (FullColorOrGrayscale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FullColorOrGrayscale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FullColorOrGrayscale") { IsSerialized = true, Value = (float)FullColorOrGrayscale }; v.Variant = p;
            }
        }
    }
    public partial class _holo_projections
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (ColorMultiply != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiply") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMultiply") { IsSerialized = true, Value = (float)ColorMultiply }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (BrightnessNoiseStreght != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BrightnessNoiseStreght") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BrightnessNoiseStreght") { IsSerialized = true, Value = (float)BrightnessNoiseStreght }; v.Variant = p;
            }
            if (SubUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVWidth") { IsSerialized = true, Value = (float)SubUVWidth }; v.Variant = p;
            }
            if (SubUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVHeight") { IsSerialized = true, Value = (float)SubUVHeight }; v.Variant = p;
            }
            if (FrameNum != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FrameNum") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FrameNum") { IsSerialized = true, Value = (float)FrameNum }; v.Variant = p;
            }
            if (PlaySpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PlaySpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "PlaySpeed") { IsSerialized = true, Value = (float)PlaySpeed }; v.Variant = p;
            }
            if (InvertSoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InvertSoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InvertSoftAlpha") { IsSerialized = true, Value = (float)InvertSoftAlpha }; v.Variant = p;
            }
            if (UVScrollSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVScrollSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "UVScrollSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)UVScrollSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)UVScrollSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)UVScrollSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)UVScrollSpeed.W };
            }
            if (ScrollStepFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollStepFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollStepFactor") { IsSerialized = true, Value = (float)ScrollStepFactor }; v.Variant = p;
            }
            if (ScrollMaskOrTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollMaskOrTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollMaskOrTexture") { IsSerialized = true, Value = (float)ScrollMaskOrTexture }; v.Variant = p;
            }
            if (RandomAnimation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RandomAnimation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RandomAnimation") { IsSerialized = true, Value = (float)RandomAnimation }; v.Variant = p;
            }
            if (RandomFrameFrequency != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RandomFrameFrequency") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RandomFrameFrequency") { IsSerialized = true, Value = (float)RandomFrameFrequency }; v.Variant = p;
            }
            if (RandomFrameChangeSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RandomFrameChangeSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RandomFrameChangeSpeed") { IsSerialized = true, Value = (float)RandomFrameChangeSpeed }; v.Variant = p;
            }
            if (FrameNumDisplayChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FrameNumDisplayChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FrameNumDisplayChance") { IsSerialized = true, Value = (float)FrameNumDisplayChance }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (ScrollingMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollingMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ScrollingMaskTexture") { IsSerialized = true, DepotPath = ScrollingMaskTexture }; v.Variant = p;
            }
        }
    }
    public partial class _hud_focus_mode_scanline
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Progress != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Progress") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Progress") { IsSerialized = true, Value = (float)Progress }; v.Variant = p;
            }
            if (vProgress != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "vProgress") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "vProgress") { IsSerialized = true, Value = (float)vProgress }; v.Variant = p;
            }
            if (ScanlineDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineDensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlineDensity") { IsSerialized = true, Value = (float)ScanlineDensity }; v.Variant = p;
            }
            if (ScanlineOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlineOffset") { IsSerialized = true, Value = (float)ScanlineOffset }; v.Variant = p;
            }
            if (ScanlineWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlineWidth") { IsSerialized = true, Value = (float)ScanlineWidth }; v.Variant = p;
            }
            if (EffectIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EffectIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EffectIntensity") { IsSerialized = true, Value = (float)EffectIntensity }; v.Variant = p;
            }
            if (ScanlineDensityVertical != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineDensityVertical") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlineDensityVertical") { IsSerialized = true, Value = (float)ScanlineDensityVertical }; v.Variant = p;
            }
            if (ScanlineOffsetVertical != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineOffsetVertical") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlineOffsetVertical") { IsSerialized = true, Value = (float)ScanlineOffsetVertical }; v.Variant = p;
            }
            if (ScanlineWidthVertical != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineWidthVertical") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlineWidthVertical") { IsSerialized = true, Value = (float)ScanlineWidthVertical }; v.Variant = p;
            }
            if (VerticalIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VerticalIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VerticalIntensity") { IsSerialized = true, Value = (float)VerticalIntensity }; v.Variant = p;
            }
            if (BarsWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BarsWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BarsWidth") { IsSerialized = true, Value = (float)BarsWidth }; v.Variant = p;
            }
            if (SideFadeWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SideFadeWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SideFadeWidth") { IsSerialized = true, Value = (float)SideFadeWidth }; v.Variant = p;
            }
            if (SideFadeFeather != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SideFadeFeather") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SideFadeFeather") { IsSerialized = true, Value = (float)SideFadeFeather }; v.Variant = p;
            }
        }
    }
    public partial class _hud_markers_notxaa
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Second_Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Second_Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Second_Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Second_Color.Red }, Green = new CUInt8() { Value = (Byte)Second_Color.Green }, Blue = new CUInt8() { Value = (Byte)Second_Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Second_Color.Alpha } }; v.Variant = p;
            }
            if (ColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMultiplier") { IsSerialized = true, Value = (float)ColorMultiplier }; v.Variant = p;
            }
            if (ClampOrWrap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ClampOrWrap") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ClampOrWrap") { IsSerialized = true, Value = (float)ClampOrWrap }; v.Variant = p;
            }
            if (TillingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TillingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TillingX") { IsSerialized = true, Value = (float)TillingX }; v.Variant = p;
            }
            if (TillingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TillingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TillingY") { IsSerialized = true, Value = (float)TillingY }; v.Variant = p;
            }
            if (OffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OffsetX") { IsSerialized = true, Value = (float)OffsetX }; v.Variant = p;
            }
            if (OffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OffsetY") { IsSerialized = true, Value = (float)OffsetY }; v.Variant = p;
            }
            if (WipeValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WipeValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WipeValue") { IsSerialized = true, Value = (float)WipeValue }; v.Variant = p;
            }
            if (RotateUV90Deg != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RotateUV90Deg") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RotateUV90Deg") { IsSerialized = true, Value = (float)RotateUV90Deg }; v.Variant = p;
            }
            if (SoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftAlpha") { IsSerialized = true, Value = (float)SoftAlpha }; v.Variant = p;
            }
            if (InverseSoftAlphaValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InverseSoftAlphaValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InverseSoftAlphaValue") { IsSerialized = true, Value = (float)InverseSoftAlphaValue }; v.Variant = p;
            }
            if (UseOnMeshes != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseOnMeshes") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseOnMeshes") { IsSerialized = true, Value = (float)UseOnMeshes }; v.Variant = p;
            }
            if (UseWorldSpaceNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseWorldSpaceNoise") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseWorldSpaceNoise") { IsSerialized = true, Value = (float)UseWorldSpaceNoise }; v.Variant = p;
            }
            if (WorldSpaceNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldSpaceNoise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldSpaceNoise") { IsSerialized = true, DepotPath = WorldSpaceNoise }; v.Variant = p;
            }
            if (WorldSpaceNoiseTilling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldSpaceNoiseTilling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WorldSpaceNoiseTilling") { IsSerialized = true, Value = (float)WorldSpaceNoiseTilling }; v.Variant = p;
            }
            if (NoiseSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseSpeed") { IsSerialized = true, Value = (float)NoiseSpeed }; v.Variant = p;
            }
            if (FresnelPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelPower") { IsSerialized = true, Value = (float)FresnelPower }; v.Variant = p;
            }
            if (FresnelContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelContrast") { IsSerialized = true, Value = (float)FresnelContrast }; v.Variant = p;
            }
            if (SecondSoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondSoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondSoftAlpha") { IsSerialized = true, Value = (float)SecondSoftAlpha }; v.Variant = p;
            }
        }
    }
    public partial class _hud_markers_transparent
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Second_Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Second_Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Second_Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Second_Color.Red }, Green = new CUInt8() { Value = (Byte)Second_Color.Green }, Blue = new CUInt8() { Value = (Byte)Second_Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Second_Color.Alpha } }; v.Variant = p;
            }
            if (ColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMultiplier") { IsSerialized = true, Value = (float)ColorMultiplier }; v.Variant = p;
            }
            if (ClampOrWrap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ClampOrWrap") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ClampOrWrap") { IsSerialized = true, Value = (float)ClampOrWrap }; v.Variant = p;
            }
            if (TillingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TillingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TillingX") { IsSerialized = true, Value = (float)TillingX }; v.Variant = p;
            }
            if (TillingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TillingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TillingY") { IsSerialized = true, Value = (float)TillingY }; v.Variant = p;
            }
            if (OffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OffsetX") { IsSerialized = true, Value = (float)OffsetX }; v.Variant = p;
            }
            if (OffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OffsetY") { IsSerialized = true, Value = (float)OffsetY }; v.Variant = p;
            }
            if (RotateUV90Deg != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RotateUV90Deg") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RotateUV90Deg") { IsSerialized = true, Value = (float)RotateUV90Deg }; v.Variant = p;
            }
            if (WipeValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WipeValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WipeValue") { IsSerialized = true, Value = (float)WipeValue }; v.Variant = p;
            }
            if (SoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftAlpha") { IsSerialized = true, Value = (float)SoftAlpha }; v.Variant = p;
            }
            if (InverseSoftAlphaValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InverseSoftAlphaValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InverseSoftAlphaValue") { IsSerialized = true, Value = (float)InverseSoftAlphaValue }; v.Variant = p;
            }
            if (UseOnMeshes != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseOnMeshes") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseOnMeshes") { IsSerialized = true, Value = (float)UseOnMeshes }; v.Variant = p;
            }
            if (UseWorldSpaceNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseWorldSpaceNoise") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseWorldSpaceNoise") { IsSerialized = true, Value = (float)UseWorldSpaceNoise }; v.Variant = p;
            }
            if (WorldSpaceNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldSpaceNoise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldSpaceNoise") { IsSerialized = true, DepotPath = WorldSpaceNoise }; v.Variant = p;
            }
            if (WorldSpaceNoiseTilling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldSpaceNoiseTilling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WorldSpaceNoiseTilling") { IsSerialized = true, Value = (float)WorldSpaceNoiseTilling }; v.Variant = p;
            }
            if (NoiseSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseSpeed") { IsSerialized = true, Value = (float)NoiseSpeed }; v.Variant = p;
            }
            if (FresnelPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelPower") { IsSerialized = true, Value = (float)FresnelPower }; v.Variant = p;
            }
            if (FresnelContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelContrast") { IsSerialized = true, Value = (float)FresnelContrast }; v.Variant = p;
            }
            if (SecondSoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondSoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondSoftAlpha") { IsSerialized = true, Value = (float)SecondSoftAlpha }; v.Variant = p;
            }
        }
    }
    public partial class _hud_markers_vision
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Second_Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Second_Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Second_Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Second_Color.Red }, Green = new CUInt8() { Value = (Byte)Second_Color.Green }, Blue = new CUInt8() { Value = (Byte)Second_Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Second_Color.Alpha } }; v.Variant = p;
            }
            if (ColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMultiplier") { IsSerialized = true, Value = (float)ColorMultiplier }; v.Variant = p;
            }
            if (ClampOrWrap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ClampOrWrap") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ClampOrWrap") { IsSerialized = true, Value = (float)ClampOrWrap }; v.Variant = p;
            }
            if (TillingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TillingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TillingX") { IsSerialized = true, Value = (float)TillingX }; v.Variant = p;
            }
            if (TillingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TillingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TillingY") { IsSerialized = true, Value = (float)TillingY }; v.Variant = p;
            }
            if (OffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OffsetX") { IsSerialized = true, Value = (float)OffsetX }; v.Variant = p;
            }
            if (OffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OffsetY") { IsSerialized = true, Value = (float)OffsetY }; v.Variant = p;
            }
            if (RotateUV90Deg != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RotateUV90Deg") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RotateUV90Deg") { IsSerialized = true, Value = (float)RotateUV90Deg }; v.Variant = p;
            }
            if (WipeValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WipeValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WipeValue") { IsSerialized = true, Value = (float)WipeValue }; v.Variant = p;
            }
            if (SoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftAlpha") { IsSerialized = true, Value = (float)SoftAlpha }; v.Variant = p;
            }
            if (InverseSoftAlphaValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InverseSoftAlphaValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InverseSoftAlphaValue") { IsSerialized = true, Value = (float)InverseSoftAlphaValue }; v.Variant = p;
            }
            if (UseOnMeshes != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseOnMeshes") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseOnMeshes") { IsSerialized = true, Value = (float)UseOnMeshes }; v.Variant = p;
            }
            if (UseWorldSpaceNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseWorldSpaceNoise") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseWorldSpaceNoise") { IsSerialized = true, Value = (float)UseWorldSpaceNoise }; v.Variant = p;
            }
            if (WorldSpaceNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldSpaceNoise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "WorldSpaceNoise") { IsSerialized = true, DepotPath = WorldSpaceNoise }; v.Variant = p;
            }
            if (WorldSpaceNoiseTilling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldSpaceNoiseTilling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WorldSpaceNoiseTilling") { IsSerialized = true, Value = (float)WorldSpaceNoiseTilling }; v.Variant = p;
            }
            if (NoiseSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseSpeed") { IsSerialized = true, Value = (float)NoiseSpeed }; v.Variant = p;
            }
            if (FresnelPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelPower") { IsSerialized = true, Value = (float)FresnelPower }; v.Variant = p;
            }
            if (FresnelContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelContrast") { IsSerialized = true, Value = (float)FresnelContrast }; v.Variant = p;
            }
            if (SecondSoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondSoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondSoftAlpha") { IsSerialized = true, Value = (float)SecondSoftAlpha }; v.Variant = p;
            }
        }
    }
    public partial class _hud_ui_dot
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (TillingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TillingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TillingX") { IsSerialized = true, Value = (float)TillingX }; v.Variant = p;
            }
            if (TillingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TillingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TillingY") { IsSerialized = true, Value = (float)TillingY }; v.Variant = p;
            }
            if (OffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OffsetX") { IsSerialized = true, Value = (float)OffsetX }; v.Variant = p;
            }
            if (OffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OffsetY") { IsSerialized = true, Value = (float)OffsetY }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (ColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMultiplier") { IsSerialized = true, Value = (float)ColorMultiplier }; v.Variant = p;
            }
        }
    }
    public partial class _hud_vision_pass
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (TextureTilingAndSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureTilingAndSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TextureTilingAndSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TextureTilingAndSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TextureTilingAndSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TextureTilingAndSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TextureTilingAndSpeed.W };
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (ColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMultiplier") { IsSerialized = true, Value = (float)ColorMultiplier }; v.Variant = p;
            }
            if (AlphaMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMultiplier") { IsSerialized = true, Value = (float)AlphaMultiplier }; v.Variant = p;
            }
            if (SoftTransparencyAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftTransparencyAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftTransparencyAmount") { IsSerialized = true, Value = (float)SoftTransparencyAmount }; v.Variant = p;
            }
            if (SoftContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftContrast") { IsSerialized = true, Value = (float)SoftContrast }; v.Variant = p;
            }
            if (UseVertexColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseVertexColor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseVertexColor") { IsSerialized = true, Value = (float)UseVertexColor }; v.Variant = p;
            }
            if (Wipe != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Wipe") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Wipe") { IsSerialized = true, Value = (float)Wipe }; v.Variant = p;
            }
            if (TestForDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TestForDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TestForDepth") { IsSerialized = true, Value = (float)TestForDepth }; v.Variant = p;
            }
        }
    }
    public partial class _johnny_effect
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Tilling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tilling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Tilling") { IsSerialized = true, Value = (float)Tilling }; v.Variant = p;
            }
            if (Contrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Contrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Contrast") { IsSerialized = true, Value = (float)Contrast }; v.Variant = p;
            }
        }
    }
    public partial class _johnny_glitch
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Offset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Offset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Offset") { IsSerialized = true, Value = (float)Offset }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (BodyColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BodyColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BodyColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BodyColor.Red }, Green = new CUInt8() { Value = (Byte)BodyColor.Green }, Blue = new CUInt8() { Value = (Byte)BodyColor.Blue }, Alpha = new CUInt8() { Value = (Byte)BodyColor.Alpha } }; v.Variant = p;
            }
            if (Tilling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tilling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Tilling") { IsSerialized = true, Value = (float)Tilling }; v.Variant = p;
            }
            if (Contrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Contrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Contrast") { IsSerialized = true, Value = (float)Contrast }; v.Variant = p;
            }
            if (LineLength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LineLength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LineLength") { IsSerialized = true, Value = (float)LineLength }; v.Variant = p;
            }
            if (MinDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MinDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MinDistance") { IsSerialized = true, Value = (float)MinDistance }; v.Variant = p;
            }
            if (MaxDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxDistance") { IsSerialized = true, Value = (float)MaxDistance }; v.Variant = p;
            }
            if (MaxSteps != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxSteps") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxSteps") { IsSerialized = true, Value = (float)MaxSteps }; v.Variant = p;
            }
            if (NoiseSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseSpeed") { IsSerialized = true, Value = (float)NoiseSpeed }; v.Variant = p;
            }
            if (BackgroundOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BackgroundOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BackgroundOffset") { IsSerialized = true, Value = (float)BackgroundOffset }; v.Variant = p;
            }
            if (BlurredIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurredIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurredIntensity") { IsSerialized = true, Value = (float)BlurredIntensity }; v.Variant = p;
            }
            if (NoiseSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseSize") { IsSerialized = true, Value = (float)NoiseSize }; v.Variant = p;
            }
            if (TileSizeX1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeX1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeX1") { IsSerialized = true, Value = (float)TileSizeX1 }; v.Variant = p;
            }
            if (TileSizeY1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeY1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeY1") { IsSerialized = true, Value = (float)TileSizeY1 }; v.Variant = p;
            }
            if (TileSizeX2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeX2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeX2") { IsSerialized = true, Value = (float)TileSizeX2 }; v.Variant = p;
            }
            if (TileSizeY2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeY2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeY2") { IsSerialized = true, Value = (float)TileSizeY2 }; v.Variant = p;
            }
            if (GlitchSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchSpeed") { IsSerialized = true, Value = (float)GlitchSpeed }; v.Variant = p;
            }
            if (UseHorizontal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseHorizontal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseHorizontal") { IsSerialized = true, Value = (float)UseHorizontal }; v.Variant = p;
            }
            if (VectorField != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VectorField") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VectorField") { IsSerialized = true, DepotPath = VectorField }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_atlas_animation
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (SubUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVWidth") { IsSerialized = true, Value = (float)SubUVWidth }; v.Variant = p;
            }
            if (SubUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVHeight") { IsSerialized = true, Value = (float)SubUVHeight }; v.Variant = p;
            }
            if (LoopedAnimationSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LoopedAnimationSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LoopedAnimationSpeed") { IsSerialized = true, Value = (float)LoopedAnimationSpeed }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Translucency != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Translucency") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Translucency") { IsSerialized = true, Value = (float)Translucency }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_blackbody
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (EmissiveMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "EmissiveMask") { IsSerialized = true, DepotPath = EmissiveMask }; v.Variant = p;
            }
            if (HeatDistribution != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeatDistribution") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "HeatDistribution") { IsSerialized = true, DepotPath = HeatDistribution }; v.Variant = p;
            }
            if (MaskMinimum != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskMinimum") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskMinimum") { IsSerialized = true, Value = (float)MaskMinimum }; v.Variant = p;
            }
            if (HeatTilingX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeatTilingX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HeatTilingX") { IsSerialized = true, Value = (float)HeatTilingX }; v.Variant = p;
            }
            if (HeatTilingY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeatTilingY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HeatTilingY") { IsSerialized = true, Value = (float)HeatTilingY }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (MaxTemperature != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxTemperature") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxTemperature") { IsSerialized = true, Value = (float)MaxTemperature }; v.Variant = p;
            }
            if (HSV_Mod != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HSV_Mod") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "HSV_Mod") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)HSV_Mod.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)HSV_Mod.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)HSV_Mod.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)HSV_Mod.W };
            }
            if (DebugTemperature != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugTemperature") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DebugTemperature") { IsSerialized = true, Value = (float)DebugTemperature }; v.Variant = p;
            }
            if (DebugOrExternalCurve != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugOrExternalCurve") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DebugOrExternalCurve") { IsSerialized = true, Value = (float)DebugOrExternalCurve }; v.Variant = p;
            }
            if (HeatMoveSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeatMoveSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HeatMoveSpeed") { IsSerialized = true, Value = (float)HeatMoveSpeed }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_glitter
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (AlphaFromEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaFromEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaFromEmissive") { IsSerialized = true, Value = (float)AlphaFromEmissive }; v.Variant = p;
            }
            if (EmissiveMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "EmissiveMask") { IsSerialized = true, DepotPath = EmissiveMask }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (HistogramRange != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HistogramRange") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HistogramRange") { IsSerialized = true, Value = (float)HistogramRange }; v.Variant = p;
            }
            if (ScrollSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollSpeed") { IsSerialized = true, Value = (float)ScrollSpeed }; v.Variant = p;
            }
            if (EmissiveTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveTile") { IsSerialized = true, Value = (float)EmissiveTile }; v.Variant = p;
            }
            if (Looped != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Looped") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Looped") { IsSerialized = true, Value = (float)Looped }; v.Variant = p;
            }
        }
    }
    public partial class _neon_tubes
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EmissiveEdgeMult != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEdgeMult") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEdgeMult") { IsSerialized = true, Value = (float)EmissiveEdgeMult }; v.Variant = p;
            }
            if (color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)color.Red }, Green = new CUInt8() { Value = (Byte)color.Green }, Blue = new CUInt8() { Value = (Byte)color.Blue }, Alpha = new CUInt8() { Value = (Byte)color.Alpha } }; v.Variant = p;
            }
            if (tex1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "tex1") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "tex1") { IsSerialized = true, DepotPath = tex1 }; v.Variant = p;
            }
            if (fresnelpower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "fresnelpower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "fresnelpower") { IsSerialized = true, Value = (float)fresnelpower }; v.Variant = p;
            }
            if (UseBlinkingNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseBlinkingNoise") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseBlinkingNoise") { IsSerialized = true, Value = (float)UseBlinkingNoise }; v.Variant = p;
            }
            if (BlinkSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkSpeed") { IsSerialized = true, Value = (float)BlinkSpeed }; v.Variant = p;
            }
            if (MinNoiseValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MinNoiseValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MinNoiseValue") { IsSerialized = true, Value = (float)MinNoiseValue }; v.Variant = p;
            }
            if (TimeSeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TimeSeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TimeSeed") { IsSerialized = true, Value = (float)TimeSeed }; v.Variant = p;
            }
            if (UseMatParamToCtrlNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseMatParamToCtrlNoise") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseMatParamToCtrlNoise") { IsSerialized = true, Value = (float)UseMatParamToCtrlNoise }; v.Variant = p;
            }
            if (TextureU != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureU") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TextureU") { IsSerialized = true, Value = (float)TextureU }; v.Variant = p;
            }
            if (TextureV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TextureV") { IsSerialized = true, Value = (float)TextureV }; v.Variant = p;
            }
            if (TextureIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TextureIntensity") { IsSerialized = true, Value = (float)TextureIntensity }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
        }
    }
    public partial class _noctovision_mode
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (NPC_HDRColor1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NPC_HDRColor1") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NPC_HDRColor1") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NPC_HDRColor1.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NPC_HDRColor1.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NPC_HDRColor1.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NPC_HDRColor1.W };
            }
            if (NPC_HDRColor2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NPC_HDRColor2") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NPC_HDRColor2") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NPC_HDRColor2.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NPC_HDRColor2.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NPC_HDRColor2.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NPC_HDRColor2.W };
            }
            if (Enemy_HDRColor1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Enemy_HDRColor1") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Enemy_HDRColor1") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Enemy_HDRColor1.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Enemy_HDRColor1.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Enemy_HDRColor1.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Enemy_HDRColor1.W };
            }
            if (Enemy_HDRColor2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Enemy_HDRColor2") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Enemy_HDRColor2") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Enemy_HDRColor2.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Enemy_HDRColor2.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Enemy_HDRColor2.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Enemy_HDRColor2.W };
            }
            if (Multiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Multiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Multiplier") { IsSerialized = true, Value = (float)Multiplier }; v.Variant = p;
            }
            if (Distortion != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Distortion") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Distortion") { IsSerialized = true, DepotPath = Distortion }; v.Variant = p;
            }
            if (DistortionSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortionSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortionSpeed") { IsSerialized = true, Value = (float)DistortionSpeed }; v.Variant = p;
            }
            if (DistortionOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortionOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortionOffset") { IsSerialized = true, Value = (float)DistortionOffset }; v.Variant = p;
            }
            if (EnemyAlphaMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnemyAlphaMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnemyAlphaMultiplier") { IsSerialized = true, Value = (float)EnemyAlphaMultiplier }; v.Variant = p;
            }
            if (ScanlineValues != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineValues") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "ScanlineValues") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)ScanlineValues.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)ScanlineValues.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)ScanlineValues.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)ScanlineValues.W };
            }
            if (ScanlineContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlineContrast") { IsSerialized = true, Value = (float)ScanlineContrast }; v.Variant = p;
            }
        }
    }
    public partial class _parallaxscreen
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (ParalaxTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ParalaxTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ParalaxTexture") { IsSerialized = true, DepotPath = ParalaxTexture }; v.Variant = p;
            }
            if (ScanlineTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ScanlineTexture") { IsSerialized = true, DepotPath = ScanlineTexture }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Metalness") { IsSerialized = true, Value = (float)Metalness }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Emissive") { IsSerialized = true, Value = (float)Emissive }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (ImageScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ImageScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ImageScale") { IsSerialized = true, Value = (float)ImageScale }; v.Variant = p;
            }
            if (LayersSeparation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersSeparation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersSeparation") { IsSerialized = true, Value = (float)LayersSeparation }; v.Variant = p;
            }
            if (IntensityPerLayer != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IntensityPerLayer") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "IntensityPerLayer") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)IntensityPerLayer.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)IntensityPerLayer.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)IntensityPerLayer.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)IntensityPerLayer.W };
            }
            if (ScanlinesDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlinesDensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlinesDensity") { IsSerialized = true, Value = (float)ScanlinesDensity }; v.Variant = p;
            }
            if (ScanlinesIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlinesIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlinesIntensity") { IsSerialized = true, Value = (float)ScanlinesIntensity }; v.Variant = p;
            }
            if (BlinkingSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkingSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkingSpeed") { IsSerialized = true, Value = (float)BlinkingSpeed }; v.Variant = p;
            }
            if (BlinkingMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkingMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BlinkingMaskTexture") { IsSerialized = true, DepotPath = BlinkingMaskTexture }; v.Variant = p;
            }
            if (ScrollMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ScrollMaskTexture") { IsSerialized = true, DepotPath = ScrollMaskTexture }; v.Variant = p;
            }
            if (ScrollVerticalOrHorizontal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollVerticalOrHorizontal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollVerticalOrHorizontal") { IsSerialized = true, Value = (float)ScrollVerticalOrHorizontal }; v.Variant = p;
            }
            if (ScrollMaskStartPoint1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollMaskStartPoint1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollMaskStartPoint1") { IsSerialized = true, Value = (float)ScrollMaskStartPoint1 }; v.Variant = p;
            }
            if (ScrollMaskHeight1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollMaskHeight1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollMaskHeight1") { IsSerialized = true, Value = (float)ScrollMaskHeight1 }; v.Variant = p;
            }
            if (ScrollSpeed1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollSpeed1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollSpeed1") { IsSerialized = true, Value = (float)ScrollSpeed1 }; v.Variant = p;
            }
            if (ScrollStepFactor1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollStepFactor1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollStepFactor1") { IsSerialized = true, Value = (float)ScrollStepFactor1 }; v.Variant = p;
            }
            if (ScrollMaskStartPoint2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollMaskStartPoint2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollMaskStartPoint2") { IsSerialized = true, Value = (float)ScrollMaskStartPoint2 }; v.Variant = p;
            }
            if (ScrollMaskHeight2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollMaskHeight2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollMaskHeight2") { IsSerialized = true, Value = (float)ScrollMaskHeight2 }; v.Variant = p;
            }
            if (ScrollSpeed2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollSpeed2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollSpeed2") { IsSerialized = true, Value = (float)ScrollSpeed2 }; v.Variant = p;
            }
            if (ScrollStepFactor2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollStepFactor2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollStepFactor2") { IsSerialized = true, Value = (float)ScrollStepFactor2 }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (HSV_Mod != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HSV_Mod") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "HSV_Mod") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)HSV_Mod.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)HSV_Mod.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)HSV_Mod.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)HSV_Mod.W };
            }
            if (IsBroken != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IsBroken") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IsBroken") { IsSerialized = true, Value = (float)IsBroken }; v.Variant = p;
            }
            if (FixForBlack != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FixForBlack") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FixForBlack") { IsSerialized = true, Value = (float)FixForBlack }; v.Variant = p;
            }
        }
    }
    public partial class _parallaxscreen_transparent
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (ParalaxTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ParalaxTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ParalaxTexture") { IsSerialized = true, DepotPath = ParalaxTexture }; v.Variant = p;
            }
            if (TexHSVControl != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexHSVControl") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexHSVControl") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexHSVControl.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexHSVControl.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexHSVControl.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexHSVControl.W };
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Emissive") { IsSerialized = true, Value = (float)Emissive }; v.Variant = p;
            }
            if (AdditiveOrAlphaBlened != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveOrAlphaBlened") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveOrAlphaBlened") { IsSerialized = true, Value = (float)AdditiveOrAlphaBlened }; v.Variant = p;
            }
            if (ImageScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ImageScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "ImageScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)ImageScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)ImageScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)ImageScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)ImageScale.W };
            }
            if (TextureOffsetX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureOffsetX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TextureOffsetX") { IsSerialized = true, Value = (float)TextureOffsetX }; v.Variant = p;
            }
            if (TextureOffsetY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureOffsetY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TextureOffsetY") { IsSerialized = true, Value = (float)TextureOffsetY }; v.Variant = p;
            }
            if (TilesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TilesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TilesWidth") { IsSerialized = true, Value = (float)TilesWidth }; v.Variant = p;
            }
            if (TilesHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TilesHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TilesHeight") { IsSerialized = true, Value = (float)TilesHeight }; v.Variant = p;
            }
            if (PlaySpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PlaySpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "PlaySpeed") { IsSerialized = true, Value = (float)PlaySpeed }; v.Variant = p;
            }
            if (InterlaceLines != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InterlaceLines") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InterlaceLines") { IsSerialized = true, Value = (float)InterlaceLines }; v.Variant = p;
            }
            if (SeparateLayersFromTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SeparateLayersFromTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SeparateLayersFromTexture") { IsSerialized = true, Value = (float)SeparateLayersFromTexture }; v.Variant = p;
            }
            if (LayersSeparation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersSeparation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersSeparation") { IsSerialized = true, Value = (float)LayersSeparation }; v.Variant = p;
            }
            if (IntensityPerLayer != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IntensityPerLayer") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "IntensityPerLayer") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)IntensityPerLayer.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)IntensityPerLayer.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)IntensityPerLayer.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)IntensityPerLayer.W };
            }
            if (ScanlinesDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlinesDensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlinesDensity") { IsSerialized = true, Value = (float)ScanlinesDensity }; v.Variant = p;
            }
            if (ScanlinesIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlinesIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlinesIntensity") { IsSerialized = true, Value = (float)ScanlinesIntensity }; v.Variant = p;
            }
            if (ScanlinesSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlinesSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlinesSpeed") { IsSerialized = true, Value = (float)ScanlinesSpeed }; v.Variant = p;
            }
            if (NoPostORPost != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoPostORPost") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoPostORPost") { IsSerialized = true, Value = (float)NoPostORPost }; v.Variant = p;
            }
            if (EdgesMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EdgesMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EdgesMask") { IsSerialized = true, Value = (float)EdgesMask }; v.Variant = p;
            }
            if (ClampUV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ClampUV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ClampUV") { IsSerialized = true, Value = (float)ClampUV }; v.Variant = p;
            }
            if (ScrollMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ScrollMaskTexture") { IsSerialized = true, DepotPath = ScrollMaskTexture }; v.Variant = p;
            }
            if (ScrollVerticalOrHorizontal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollVerticalOrHorizontal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollVerticalOrHorizontal") { IsSerialized = true, Value = (float)ScrollVerticalOrHorizontal }; v.Variant = p;
            }
            if (ScrollMaskStartPoint1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollMaskStartPoint1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollMaskStartPoint1") { IsSerialized = true, Value = (float)ScrollMaskStartPoint1 }; v.Variant = p;
            }
            if (ScrollMaskHeight1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollMaskHeight1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollMaskHeight1") { IsSerialized = true, Value = (float)ScrollMaskHeight1 }; v.Variant = p;
            }
            if (ScrollSpeed1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollSpeed1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollSpeed1") { IsSerialized = true, Value = (float)ScrollSpeed1 }; v.Variant = p;
            }
            if (ScrollStepFactor1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollStepFactor1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollStepFactor1") { IsSerialized = true, Value = (float)ScrollStepFactor1 }; v.Variant = p;
            }
            if (ScrollMaskStartPoint2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollMaskStartPoint2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollMaskStartPoint2") { IsSerialized = true, Value = (float)ScrollMaskStartPoint2 }; v.Variant = p;
            }
            if (ScrollMaskHeight2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollMaskHeight2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollMaskHeight2") { IsSerialized = true, Value = (float)ScrollMaskHeight2 }; v.Variant = p;
            }
            if (ScrollSpeed2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollSpeed2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollSpeed2") { IsSerialized = true, Value = (float)ScrollSpeed2 }; v.Variant = p;
            }
            if (ScrollStepFactor2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScrollStepFactor2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScrollStepFactor2") { IsSerialized = true, Value = (float)ScrollStepFactor2 }; v.Variant = p;
            }
            if (LayersScrollSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersScrollSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "LayersScrollSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)LayersScrollSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)LayersScrollSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)LayersScrollSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)LayersScrollSpeed.W };
            }
        }
    }
    public partial class _parallaxscreen_transparent_ui
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (ScanlineTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ScanlineTexture") { IsSerialized = true, DepotPath = ScanlineTexture }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (ImageScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ImageScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ImageScale") { IsSerialized = true, Value = (float)ImageScale }; v.Variant = p;
            }
            if (LayersSeparation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersSeparation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersSeparation") { IsSerialized = true, Value = (float)LayersSeparation }; v.Variant = p;
            }
            if (IntensityPerLayer != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IntensityPerLayer") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "IntensityPerLayer") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)IntensityPerLayer.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)IntensityPerLayer.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)IntensityPerLayer.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)IntensityPerLayer.W };
            }
            if (ScanlinesDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlinesDensity") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "ScanlinesDensity") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)ScanlinesDensity.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)ScanlinesDensity.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)ScanlinesDensity.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)ScanlinesDensity.W };
            }
            if (IsBroken != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IsBroken") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IsBroken") { IsSerialized = true, Value = (float)IsBroken }; v.Variant = p;
            }
            if (ScanlinesIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlinesIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlinesIntensity") { IsSerialized = true, Value = (float)ScanlinesIntensity }; v.Variant = p;
            }
            if (UIRenderTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UIRenderTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "UIRenderTexture") { IsSerialized = true, DepotPath = UIRenderTexture }; v.Variant = p;
            }
            if (TexturePartUV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexturePartUV") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexturePartUV") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexturePartUV.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexturePartUV.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexturePartUV.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexturePartUV.W };
            }
            if (FixToPbr != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FixToPbr") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FixToPbr") { IsSerialized = true, Value = (float)FixToPbr }; v.Variant = p;
            }
            if (RenderTextureScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RenderTextureScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RenderTextureScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RenderTextureScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RenderTextureScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RenderTextureScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RenderTextureScale.W };
            }
            if (VerticalFlipEnabled != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VerticalFlipEnabled") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VerticalFlipEnabled") { IsSerialized = true, Value = (float)VerticalFlipEnabled }; v.Variant = p;
            }
            if (EdgeMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EdgeMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EdgeMask") { IsSerialized = true, Value = (float)EdgeMask }; v.Variant = p;
            }
            if (Tint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tint") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Tint") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Tint.Red }, Green = new CUInt8() { Value = (Byte)Tint.Green }, Blue = new CUInt8() { Value = (Byte)Tint.Blue }, Alpha = new CUInt8() { Value = (Byte)Tint.Alpha } }; v.Variant = p;
            }
            if (FixForVerticalSlide != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FixForVerticalSlide") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FixForVerticalSlide") { IsSerialized = true, Value = (float)FixForVerticalSlide }; v.Variant = p;
            }
            if (AlphaAsOne != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaAsOne") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaAsOne") { IsSerialized = true, Value = (float)AlphaAsOne }; v.Variant = p;
            }
            if (SaturationLift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SaturationLift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SaturationLift") { IsSerialized = true, Value = (float)SaturationLift }; v.Variant = p;
            }
        }
    }
    public partial class _parallax_bink
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (ColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorScale.Red }, Green = new CUInt8() { Value = (Byte)ColorScale.Green }, Blue = new CUInt8() { Value = (Byte)ColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorScale.Alpha } }; v.Variant = p;
            }
            if (BinkY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BinkY") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BinkY") { IsSerialized = true, DepotPath = BinkY }; v.Variant = p;
            }
            if (BinkCR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BinkCR") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BinkCR") { IsSerialized = true, DepotPath = BinkCR }; v.Variant = p;
            }
            if (BinkCB != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BinkCB") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BinkCB") { IsSerialized = true, DepotPath = BinkCB }; v.Variant = p;
            }
            if (BinkA != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BinkA") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BinkA") { IsSerialized = true, DepotPath = BinkA }; v.Variant = p;
            }
        }
    }
    public partial class _particles_generic_expanded
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (ColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMultiplier") { IsSerialized = true, Value = (float)ColorMultiplier }; v.Variant = p;
            }
            if (SubUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVWidth") { IsSerialized = true, Value = (float)SubUVWidth }; v.Variant = p;
            }
            if (SubUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVHeight") { IsSerialized = true, Value = (float)SubUVHeight }; v.Variant = p;
            }
            if (SoftUVInterpolate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftUVInterpolate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftUVInterpolate") { IsSerialized = true, Value = (float)SoftUVInterpolate }; v.Variant = p;
            }
            if (Desaturate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Desaturate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Desaturate") { IsSerialized = true, Value = (float)Desaturate }; v.Variant = p;
            }
            if (ColorPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorPower") { IsSerialized = true, Value = (float)ColorPower }; v.Variant = p;
            }
            if (DistortAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortAmount") { IsSerialized = true, Value = (float)DistortAmount }; v.Variant = p;
            }
            if (TexCoordScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordScale.W };
            }
            if (TexCoordSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordSpeed.W };
            }
            if (TexCoordDtortScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDtortScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDtortScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDtortScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDtortScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDtortScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDtortScale.W };
            }
            if (TexCoordDistortSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDistortSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDistortSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.W };
            }
            if (AlphaGlobal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaGlobal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaGlobal") { IsSerialized = true, Value = (float)AlphaGlobal }; v.Variant = p;
            }
            if (AlphaSoft != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaSoft") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaSoft") { IsSerialized = true, Value = (float)AlphaSoft }; v.Variant = p;
            }
            if (AlphaFresnelPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaFresnelPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaFresnelPower") { IsSerialized = true, Value = (float)AlphaFresnelPower }; v.Variant = p;
            }
            if (UseAlphaFresnel != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseAlphaFresnel") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseAlphaFresnel") { IsSerialized = true, Value = (float)UseAlphaFresnel }; v.Variant = p;
            }
            if (UseAlphaMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseAlphaMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseAlphaMask") { IsSerialized = true, Value = (float)UseAlphaMask }; v.Variant = p;
            }
            if (UseOneChannel != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseOneChannel") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseOneChannel") { IsSerialized = true, Value = (float)UseOneChannel }; v.Variant = p;
            }
            if (UseContrastAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseContrastAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseContrastAlpha") { IsSerialized = true, Value = (float)UseContrastAlpha }; v.Variant = p;
            }
            if (AlphaMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "AlphaMask") { IsSerialized = true, DepotPath = AlphaMask }; v.Variant = p;
            }
            if (Distortion != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Distortion") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Distortion") { IsSerialized = true, DepotPath = Distortion }; v.Variant = p;
            }
            if (UseAlphaFresnelInverted != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseAlphaFresnelInverted") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseAlphaFresnelInverted") { IsSerialized = true, Value = (float)UseAlphaFresnelInverted }; v.Variant = p;
            }
            if (AlphaFresnelInvertedPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaFresnelInvertedPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaFresnelInvertedPower") { IsSerialized = true, Value = (float)AlphaFresnelInvertedPower }; v.Variant = p;
            }
            if (AlphaDistortAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaDistortAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaDistortAmount") { IsSerialized = true, Value = (float)AlphaDistortAmount }; v.Variant = p;
            }
            if (AlphaMaskDistortScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskDistortScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "AlphaMaskDistortScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)AlphaMaskDistortScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)AlphaMaskDistortScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)AlphaMaskDistortScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)AlphaMaskDistortScale.W };
            }
            if (AlphaMaskDistortSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskDistortSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "AlphaMaskDistortSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)AlphaMaskDistortSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)AlphaMaskDistortSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)AlphaMaskDistortSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)AlphaMaskDistortSpeed.W };
            }
            if (UseTimeOfDay != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseTimeOfDay") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseTimeOfDay") { IsSerialized = true, Value = (float)UseTimeOfDay }; v.Variant = p;
            }
        }
    }
    public partial class _particles_hologram
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (UseMaterialParam != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseMaterialParam") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseMaterialParam") { IsSerialized = true, Value = (float)UseMaterialParam }; v.Variant = p;
            }
            if (ColorParam != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorParam") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorParam") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorParam.Red }, Green = new CUInt8() { Value = (Byte)ColorParam.Green }, Blue = new CUInt8() { Value = (Byte)ColorParam.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorParam.Alpha } }; v.Variant = p;
            }
            if (DotsCoords != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsCoords") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotsCoords") { IsSerialized = true, Value = (float)DotsCoords }; v.Variant = p;
            }
            if (View_or_World != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "View_or_World") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "View_or_World") { IsSerialized = true, Value = (float)View_or_World }; v.Variant = p;
            }
            if (ColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMultiplier") { IsSerialized = true, Value = (float)ColorMultiplier }; v.Variant = p;
            }
            if (AlphaSoft != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaSoft") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaSoft") { IsSerialized = true, Value = (float)AlphaSoft }; v.Variant = p;
            }
            if (GlitchTexCoordSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchTexCoordSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "GlitchTexCoordSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)GlitchTexCoordSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)GlitchTexCoordSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)GlitchTexCoordSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)GlitchTexCoordSpeed.W };
            }
            if (Dots != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Dots") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Dots") { IsSerialized = true, DepotPath = Dots }; v.Variant = p;
            }
            if (AlphaMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "AlphaMask") { IsSerialized = true, DepotPath = AlphaMask }; v.Variant = p;
            }
            if (GlitchTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlitchTex") { IsSerialized = true, DepotPath = GlitchTex }; v.Variant = p;
            }
            if (AlphaTexCoordSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaTexCoordSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "AlphaTexCoordSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)AlphaTexCoordSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)AlphaTexCoordSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)AlphaTexCoordSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)AlphaTexCoordSpeed.W };
            }
            if (AlphaSubUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaSubUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaSubUVWidth") { IsSerialized = true, Value = (float)AlphaSubUVWidth }; v.Variant = p;
            }
            if (AlphaSubUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaSubUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaSubUVHeight") { IsSerialized = true, Value = (float)AlphaSubUVHeight }; v.Variant = p;
            }
            if (SoftUVInterpolate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftUVInterpolate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftUVInterpolate") { IsSerialized = true, Value = (float)SoftUVInterpolate }; v.Variant = p;
            }
            if (AlphaGlobal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaGlobal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaGlobal") { IsSerialized = true, Value = (float)AlphaGlobal }; v.Variant = p;
            }
            if (UseOnMesh != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseOnMesh") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseOnMesh") { IsSerialized = true, Value = (float)UseOnMesh }; v.Variant = p;
            }
        }
    }
    public partial class _pointcloud_source_mesh
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (WorldPositionOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldPositionOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "WorldPositionOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)WorldPositionOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)WorldPositionOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)WorldPositionOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)WorldPositionOffset.W };
            }
        }
    }
    public partial class _postprocess
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Gain != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Gain") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Gain") { IsSerialized = true, Value = (float)Gain }; v.Variant = p;
            }
            if (ReColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ReColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ReColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ReColor.Red }, Green = new CUInt8() { Value = (Byte)ReColor.Green }, Blue = new CUInt8() { Value = (Byte)ReColor.Blue }, Alpha = new CUInt8() { Value = (Byte)ReColor.Alpha } }; v.Variant = p;
            }
            if (BlurredIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurredIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurredIntensity") { IsSerialized = true, Value = (float)BlurredIntensity }; v.Variant = p;
            }
            if (MaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskContrast") { IsSerialized = true, Value = (float)MaskContrast }; v.Variant = p;
            }
            if (ReColorStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ReColorStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ReColorStrength") { IsSerialized = true, Value = (float)ReColorStrength }; v.Variant = p;
            }
        }
    }
    public partial class _postprocess_notxaa
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Gain != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Gain") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Gain") { IsSerialized = true, Value = (float)Gain }; v.Variant = p;
            }
            if (ReColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ReColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ReColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ReColor.Red }, Green = new CUInt8() { Value = (Byte)ReColor.Green }, Blue = new CUInt8() { Value = (Byte)ReColor.Blue }, Alpha = new CUInt8() { Value = (Byte)ReColor.Alpha } }; v.Variant = p;
            }
            if (BlurredIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurredIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurredIntensity") { IsSerialized = true, Value = (float)BlurredIntensity }; v.Variant = p;
            }
            if (MaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskContrast") { IsSerialized = true, Value = (float)MaskContrast }; v.Variant = p;
            }
            if (NumberOfIterations != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NumberOfIterations") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NumberOfIterations") { IsSerialized = true, Value = (float)NumberOfIterations }; v.Variant = p;
            }
            if (UseMovingBlur != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseMovingBlur") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseMovingBlur") { IsSerialized = true, Value = (float)UseMovingBlur }; v.Variant = p;
            }
            if (ReColorStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ReColorStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ReColorStrength") { IsSerialized = true, Value = (float)ReColorStrength }; v.Variant = p;
            }
        }
    }
    public partial class _radial_blur
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (RedLinesMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RedLinesMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RedLinesMask") { IsSerialized = true, DepotPath = RedLinesMask }; v.Variant = p;
            }
            if (BlurMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BlurMask") { IsSerialized = true, DepotPath = BlurMask }; v.Variant = p;
            }
            if (RedLinesDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RedLinesDensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RedLinesDensity") { IsSerialized = true, Value = (float)RedLinesDensity }; v.Variant = p;
            }
            if (RedLine1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RedLine1") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "RedLine1") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)RedLine1.Red }, Green = new CUInt8() { Value = (Byte)RedLine1.Green }, Blue = new CUInt8() { Value = (Byte)RedLine1.Blue }, Alpha = new CUInt8() { Value = (Byte)RedLine1.Alpha } }; v.Variant = p;
            }
            if (RedLine2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RedLine2") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "RedLine2") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)RedLine2.Red }, Green = new CUInt8() { Value = (Byte)RedLine2.Green }, Blue = new CUInt8() { Value = (Byte)RedLine2.Blue }, Alpha = new CUInt8() { Value = (Byte)RedLine2.Alpha } }; v.Variant = p;
            }
            if (BluringBackgroundRecolor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BluringBackgroundRecolor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BluringBackgroundRecolor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BluringBackgroundRecolor.Red }, Green = new CUInt8() { Value = (Byte)BluringBackgroundRecolor.Green }, Blue = new CUInt8() { Value = (Byte)BluringBackgroundRecolor.Blue }, Alpha = new CUInt8() { Value = (Byte)BluringBackgroundRecolor.Alpha } }; v.Variant = p;
            }
            if (AberationAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AberationAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AberationAmount") { IsSerialized = true, Value = (float)AberationAmount }; v.Variant = p;
            }
            if (BlurAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurAmount") { IsSerialized = true, Value = (float)BlurAmount }; v.Variant = p;
            }
            if (LightupAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightupAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightupAmount") { IsSerialized = true, Value = (float)LightupAmount }; v.Variant = p;
            }
            if (MixAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MixAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MixAmount") { IsSerialized = true, Value = (float)MixAmount }; v.Variant = p;
            }
            if (BlurOrAberration != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurOrAberration") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurOrAberration") { IsSerialized = true, Value = (float)BlurOrAberration }; v.Variant = p;
            }
            if (ChromaticOffsetSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ChromaticOffsetSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ChromaticOffsetSpeed") { IsSerialized = true, Value = (float)ChromaticOffsetSpeed }; v.Variant = p;
            }
        }
    }
    public partial class _reflex_buster
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (MaxDistortMulitiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxDistortMulitiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxDistortMulitiplier") { IsSerialized = true, Value = (float)MaxDistortMulitiplier }; v.Variant = p;
            }
            if (MinDistortMulitiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MinDistortMulitiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MinDistortMulitiplier") { IsSerialized = true, Value = (float)MinDistortMulitiplier }; v.Variant = p;
            }
            if (ZoomMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ZoomMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ZoomMultiplier") { IsSerialized = true, Value = (float)ZoomMultiplier }; v.Variant = p;
            }
            if (RelativeFStop != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RelativeFStop") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RelativeFStop") { IsSerialized = true, Value = (float)RelativeFStop }; v.Variant = p;
            }
            if (GlobalTint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalTint") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlobalTint") { IsSerialized = true, Value = (float)GlobalTint }; v.Variant = p;
            }
            if (Desaturate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Desaturate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Desaturate") { IsSerialized = true, Value = (float)Desaturate }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (UseAlphaOverEffect != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseAlphaOverEffect") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseAlphaOverEffect") { IsSerialized = true, Value = (float)UseAlphaOverEffect }; v.Variant = p;
            }
        }
    }
    public partial class _refraction
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (TexCoordDtortScaleSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDtortScaleSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDtortScaleSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDtortScaleSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDtortScaleSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDtortScaleSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDtortScaleSpeed.W };
            }
            if (DistortAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortAmount") { IsSerialized = true, Value = (float)DistortAmount }; v.Variant = p;
            }
            if (Alpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Alpha") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Alpha") { IsSerialized = true, DepotPath = Alpha }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (UseVertexAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseVertexAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseVertexAlpha") { IsSerialized = true, Value = (float)UseVertexAlpha }; v.Variant = p;
            }
        }
    }
    public partial class _sandevistan_trails
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (MainTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MainTexture") { IsSerialized = true, DepotPath = MainTexture }; v.Variant = p;
            }
            if (MainAdditiveTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainAdditiveTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MainAdditiveTexture") { IsSerialized = true, DepotPath = MainAdditiveTexture }; v.Variant = p;
            }
            if (MainColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MainColorMultiplier") { IsSerialized = true, Value = (float)MainColorMultiplier }; v.Variant = p;
            }
            if (MainAdditiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainAdditiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "MainAdditiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)MainAdditiveColor.Red }, Green = new CUInt8() { Value = (Byte)MainAdditiveColor.Green }, Blue = new CUInt8() { Value = (Byte)MainAdditiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)MainAdditiveColor.Alpha } }; v.Variant = p;
            }
            if (MainAdditiveColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainAdditiveColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MainAdditiveColorMultiplier") { IsSerialized = true, Value = (float)MainAdditiveColorMultiplier }; v.Variant = p;
            }
            if (SlowFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SlowFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SlowFactor") { IsSerialized = true, Value = (float)SlowFactor }; v.Variant = p;
            }
            if (MainAdditiveAlphaTimingExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainAdditiveAlphaTimingExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MainAdditiveAlphaTimingExponent") { IsSerialized = true, Value = (float)MainAdditiveAlphaTimingExponent }; v.Variant = p;
            }
            if (MainColorStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainColorStart") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "MainColorStart") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)MainColorStart.Red }, Green = new CUInt8() { Value = (Byte)MainColorStart.Green }, Blue = new CUInt8() { Value = (Byte)MainColorStart.Blue }, Alpha = new CUInt8() { Value = (Byte)MainColorStart.Alpha } }; v.Variant = p;
            }
            if (MainColorEnd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainColorEnd") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "MainColorEnd") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)MainColorEnd.Red }, Green = new CUInt8() { Value = (Byte)MainColorEnd.Green }, Blue = new CUInt8() { Value = (Byte)MainColorEnd.Blue }, Alpha = new CUInt8() { Value = (Byte)MainColorEnd.Alpha } }; v.Variant = p;
            }
            if (HueSpread != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HueSpread") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HueSpread") { IsSerialized = true, Value = (float)HueSpread }; v.Variant = p;
            }
            if (MainBlackBodyMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainBlackBodyMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MainBlackBodyMultiplier") { IsSerialized = true, Value = (float)MainBlackBodyMultiplier }; v.Variant = p;
            }
        }
    }
    public partial class _screens
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Tex1CoordMove != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tex1CoordMove") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Tex1CoordMove") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Tex1CoordMove.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Tex1CoordMove.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Tex1CoordMove.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Tex1CoordMove.W };
            }
            if (Tex1Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tex1Color") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Tex1Color") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Tex1Color.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Tex1Color.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Tex1Color.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Tex1Color.W };
            }
            if (Tex2CoordMove != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tex2CoordMove") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Tex2CoordMove") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Tex2CoordMove.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Tex2CoordMove.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Tex2CoordMove.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Tex2CoordMove.W };
            }
            if (Tex2Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tex2Color") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Tex2Color") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Tex2Color.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Tex2Color.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Tex2Color.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Tex2Color.W };
            }
            if (BackCoordMove != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BackCoordMove") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BackCoordMove") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BackCoordMove.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BackCoordMove.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BackCoordMove.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BackCoordMove.W };
            }
            if (BackColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BackColor") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BackColor") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BackColor.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BackColor.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BackColor.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BackColor.W };
            }
            if (Tex2AnimSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tex2AnimSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Tex2AnimSpeed") { IsSerialized = true, Value = (float)Tex2AnimSpeed }; v.Variant = p;
            }
            if (background != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "background") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "background") { IsSerialized = true, DepotPath = background }; v.Variant = p;
            }
            if (Tex1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tex1") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Tex1") { IsSerialized = true, DepotPath = Tex1 }; v.Variant = p;
            }
            if (Tex2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tex2") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Tex2") { IsSerialized = true, DepotPath = Tex2 }; v.Variant = p;
            }
            if (Tex1UVSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tex1UVSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Tex1UVSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Tex1UVSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Tex1UVSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Tex1UVSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Tex1UVSpeed.W };
            }
            if (DotsCoords != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsCoords") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotsCoords") { IsSerialized = true, Value = (float)DotsCoords }; v.Variant = p;
            }
            if (BackFlatOrCube != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BackFlatOrCube") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BackFlatOrCube") { IsSerialized = true, Value = (float)BackFlatOrCube }; v.Variant = p;
            }
            if (BackgroundCube != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BackgroundCube") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BackgroundCube") { IsSerialized = true, DepotPath = BackgroundCube }; v.Variant = p;
            }
        }
    }
    public partial class _screen_artifacts
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Complexity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Complexity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Complexity") { IsSerialized = true, Value = (float)Complexity }; v.Variant = p;
            }
            if (Visiblity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Visiblity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Visiblity") { IsSerialized = true, Value = (float)Visiblity }; v.Variant = p;
            }
            if (Disturbance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Disturbance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Disturbance") { IsSerialized = true, Value = (float)Disturbance }; v.Variant = p;
            }
            if (Speed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Speed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Speed") { IsSerialized = true, Value = (float)Speed }; v.Variant = p;
            }
            if (RandomNumber != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RandomNumber") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RandomNumber") { IsSerialized = true, Value = (float)RandomNumber }; v.Variant = p;
            }
            if (UseBlackBackground != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseBlackBackground") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseBlackBackground") { IsSerialized = true, Value = (float)UseBlackBackground }; v.Variant = p;
            }
            if (BraindanceArtifacts != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BraindanceArtifacts") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BraindanceArtifacts") { IsSerialized = true, Value = (float)BraindanceArtifacts }; v.Variant = p;
            }
            if (TillingVertical != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TillingVertical") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TillingVertical") { IsSerialized = true, Value = (float)TillingVertical }; v.Variant = p;
            }
            if (TillingHorizontal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TillingHorizontal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TillingHorizontal") { IsSerialized = true, Value = (float)TillingHorizontal }; v.Variant = p;
            }
            if (BendScreen != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BendScreen") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BendScreen") { IsSerialized = true, Value = (float)BendScreen }; v.Variant = p;
            }
            if (AlphaClip != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaClip") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaClip") { IsSerialized = true, Value = (float)AlphaClip }; v.Variant = p;
            }
        }
    }
    public partial class _screen_artifacts_vision
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Complexity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Complexity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Complexity") { IsSerialized = true, Value = (float)Complexity }; v.Variant = p;
            }
            if (Visiblity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Visiblity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Visiblity") { IsSerialized = true, Value = (float)Visiblity }; v.Variant = p;
            }
            if (Disturbance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Disturbance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Disturbance") { IsSerialized = true, Value = (float)Disturbance }; v.Variant = p;
            }
            if (Speed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Speed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Speed") { IsSerialized = true, Value = (float)Speed }; v.Variant = p;
            }
            if (RandomNumber != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RandomNumber") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RandomNumber") { IsSerialized = true, Value = (float)RandomNumber }; v.Variant = p;
            }
            if (UseBlackBackground != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseBlackBackground") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseBlackBackground") { IsSerialized = true, Value = (float)UseBlackBackground }; v.Variant = p;
            }
            if (BraindanceArtifacts != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BraindanceArtifacts") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BraindanceArtifacts") { IsSerialized = true, Value = (float)BraindanceArtifacts }; v.Variant = p;
            }
            if (TillingVertical != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TillingVertical") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TillingVertical") { IsSerialized = true, Value = (float)TillingVertical }; v.Variant = p;
            }
            if (TillingHorizontal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TillingHorizontal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TillingHorizontal") { IsSerialized = true, Value = (float)TillingHorizontal }; v.Variant = p;
            }
            if (BendScreen != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BendScreen") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BendScreen") { IsSerialized = true, Value = (float)BendScreen }; v.Variant = p;
            }
            if (AlphaClip != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaClip") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaClip") { IsSerialized = true, Value = (float)AlphaClip }; v.Variant = p;
            }
        }
    }
    public partial class _screen_black
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _screen_fast_travel_glitch
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (SingelColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SingelColor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SingelColor") { IsSerialized = true, Value = (float)SingelColor }; v.Variant = p;
            }
            if (ColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMultiplier") { IsSerialized = true, Value = (float)ColorMultiplier }; v.Variant = p;
            }
            if (Complexity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Complexity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Complexity") { IsSerialized = true, Value = (float)Complexity }; v.Variant = p;
            }
            if (Density != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Density") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Density") { IsSerialized = true, Value = (float)Density }; v.Variant = p;
            }
            if (Disturbance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Disturbance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Disturbance") { IsSerialized = true, Value = (float)Disturbance }; v.Variant = p;
            }
            if (Speed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Speed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Speed") { IsSerialized = true, Value = (float)Speed }; v.Variant = p;
            }
            if (TillingVertical != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TillingVertical") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TillingVertical") { IsSerialized = true, Value = (float)TillingVertical }; v.Variant = p;
            }
            if (TillingHorizontal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TillingHorizontal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TillingHorizontal") { IsSerialized = true, Value = (float)TillingHorizontal }; v.Variant = p;
            }
            if (BendScreen != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BendScreen") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BendScreen") { IsSerialized = true, Value = (float)BendScreen }; v.Variant = p;
            }
            if (Vertical != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Vertical") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Vertical") { IsSerialized = true, Value = (float)Vertical }; v.Variant = p;
            }
        }
    }
    public partial class _screen_glitch
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Offset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Offset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Offset") { IsSerialized = true, Value = (float)Offset }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (GridColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GridColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "GridColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)GridColor.Red }, Green = new CUInt8() { Value = (Byte)GridColor.Green }, Blue = new CUInt8() { Value = (Byte)GridColor.Blue }, Alpha = new CUInt8() { Value = (Byte)GridColor.Alpha } }; v.Variant = p;
            }
            if (BlurredIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurredIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurredIntensity") { IsSerialized = true, Value = (float)BlurredIntensity }; v.Variant = p;
            }
            if (NoiseSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseSize") { IsSerialized = true, Value = (float)NoiseSize }; v.Variant = p;
            }
            if (TileSizeX1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeX1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeX1") { IsSerialized = true, Value = (float)TileSizeX1 }; v.Variant = p;
            }
            if (TileSizeY1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeY1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeY1") { IsSerialized = true, Value = (float)TileSizeY1 }; v.Variant = p;
            }
            if (TileSizeX2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeX2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeX2") { IsSerialized = true, Value = (float)TileSizeX2 }; v.Variant = p;
            }
            if (TileSizeY2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeY2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeY2") { IsSerialized = true, Value = (float)TileSizeY2 }; v.Variant = p;
            }
            if (GlitchSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchSpeed") { IsSerialized = true, Value = (float)GlitchSpeed }; v.Variant = p;
            }
            if (GlitchSpeedOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchSpeedOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchSpeedOffset") { IsSerialized = true, Value = (float)GlitchSpeedOffset }; v.Variant = p;
            }
            if (GlitchModTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchModTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchModTime") { IsSerialized = true, Value = (float)GlitchModTime }; v.Variant = p;
            }
            if (GlitchDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchDepth") { IsSerialized = true, Value = (float)GlitchDepth }; v.Variant = p;
            }
            if (UseSquareMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseSquareMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseSquareMask") { IsSerialized = true, Value = (float)UseSquareMask }; v.Variant = p;
            }
            if (UseScreenSpaceMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseScreenSpaceMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseScreenSpaceMask") { IsSerialized = true, Value = (float)UseScreenSpaceMask }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (ArtifactColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ArtifactColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ArtifactColor.Red }, Green = new CUInt8() { Value = (Byte)ArtifactColor.Green }, Blue = new CUInt8() { Value = (Byte)ArtifactColor.Blue }, Alpha = new CUInt8() { Value = (Byte)ArtifactColor.Alpha } }; v.Variant = p;
            }
            if (ArtifactIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactIntensity") { IsSerialized = true, Value = (float)ArtifactIntensity }; v.Variant = p;
            }
            if (ArtifactNarrowness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactNarrowness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactNarrowness") { IsSerialized = true, Value = (float)ArtifactNarrowness }; v.Variant = p;
            }
            if (ArtifactMinimizer != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactMinimizer") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactMinimizer") { IsSerialized = true, Value = (float)ArtifactMinimizer }; v.Variant = p;
            }
            if (ArtifactSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactSpeed") { IsSerialized = true, Value = (float)ArtifactSpeed }; v.Variant = p;
            }
            if (ArtifactTimeOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactTimeOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactTimeOffset") { IsSerialized = true, Value = (float)ArtifactTimeOffset }; v.Variant = p;
            }
            if (SmallArtifactsTileX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SmallArtifactsTileX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SmallArtifactsTileX") { IsSerialized = true, Value = (float)SmallArtifactsTileX }; v.Variant = p;
            }
            if (SmallArtifactsTileY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SmallArtifactsTileY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SmallArtifactsTileY") { IsSerialized = true, Value = (float)SmallArtifactsTileY }; v.Variant = p;
            }
            if (UseStencilMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseStencilMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseStencilMask") { IsSerialized = true, Value = (float)UseStencilMask }; v.Variant = p;
            }
            if (UseSmallArtifacts != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseSmallArtifacts") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseSmallArtifacts") { IsSerialized = true, Value = (float)UseSmallArtifacts }; v.Variant = p;
            }
            if (UseBothSideBlur != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseBothSideBlur") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseBothSideBlur") { IsSerialized = true, Value = (float)UseBothSideBlur }; v.Variant = p;
            }
            if (UseHorizontal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseHorizontal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseHorizontal") { IsSerialized = true, Value = (float)UseHorizontal }; v.Variant = p;
            }
            if (UseAlphaOverEntireEffect != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseAlphaOverEntireEffect") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseAlphaOverEntireEffect") { IsSerialized = true, Value = (float)UseAlphaOverEntireEffect }; v.Variant = p;
            }
            if (ErrorIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ErrorIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ErrorIntensity") { IsSerialized = true, Value = (float)ErrorIntensity }; v.Variant = p;
            }
            if (InvertBrightnessMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InvertBrightnessMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InvertBrightnessMask") { IsSerialized = true, Value = (float)InvertBrightnessMask }; v.Variant = p;
            }
            if (DotTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DotTex") { IsSerialized = true, DepotPath = DotTex }; v.Variant = p;
            }
        }
    }
    public partial class _screen_glitch_notxaa
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (GridColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GridColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "GridColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)GridColor.Red }, Green = new CUInt8() { Value = (Byte)GridColor.Green }, Blue = new CUInt8() { Value = (Byte)GridColor.Blue }, Alpha = new CUInt8() { Value = (Byte)GridColor.Alpha } }; v.Variant = p;
            }
            if (BlurredIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurredIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurredIntensity") { IsSerialized = true, Value = (float)BlurredIntensity }; v.Variant = p;
            }
            if (NoiseSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseSize") { IsSerialized = true, Value = (float)NoiseSize }; v.Variant = p;
            }
            if (TileSizeX1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeX1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeX1") { IsSerialized = true, Value = (float)TileSizeX1 }; v.Variant = p;
            }
            if (TileSizeY1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeY1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeY1") { IsSerialized = true, Value = (float)TileSizeY1 }; v.Variant = p;
            }
            if (TileSizeX2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeX2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeX2") { IsSerialized = true, Value = (float)TileSizeX2 }; v.Variant = p;
            }
            if (TileSizeY2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeY2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeY2") { IsSerialized = true, Value = (float)TileSizeY2 }; v.Variant = p;
            }
            if (GlitchSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchSpeed") { IsSerialized = true, Value = (float)GlitchSpeed }; v.Variant = p;
            }
            if (GlitchSpeedOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchSpeedOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchSpeedOffset") { IsSerialized = true, Value = (float)GlitchSpeedOffset }; v.Variant = p;
            }
            if (GlitchModTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchModTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchModTime") { IsSerialized = true, Value = (float)GlitchModTime }; v.Variant = p;
            }
            if (GlitchDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchDepth") { IsSerialized = true, Value = (float)GlitchDepth }; v.Variant = p;
            }
            if (UseSquareMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseSquareMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseSquareMask") { IsSerialized = true, Value = (float)UseSquareMask }; v.Variant = p;
            }
            if (UseScreenSpaceMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseScreenSpaceMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseScreenSpaceMask") { IsSerialized = true, Value = (float)UseScreenSpaceMask }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (ArtifactColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ArtifactColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ArtifactColor.Red }, Green = new CUInt8() { Value = (Byte)ArtifactColor.Green }, Blue = new CUInt8() { Value = (Byte)ArtifactColor.Blue }, Alpha = new CUInt8() { Value = (Byte)ArtifactColor.Alpha } }; v.Variant = p;
            }
            if (ArtifactIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactIntensity") { IsSerialized = true, Value = (float)ArtifactIntensity }; v.Variant = p;
            }
            if (ArtifactNarrowness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactNarrowness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactNarrowness") { IsSerialized = true, Value = (float)ArtifactNarrowness }; v.Variant = p;
            }
            if (ArtifactMinimizer != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactMinimizer") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactMinimizer") { IsSerialized = true, Value = (float)ArtifactMinimizer }; v.Variant = p;
            }
            if (ArtifactSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactSpeed") { IsSerialized = true, Value = (float)ArtifactSpeed }; v.Variant = p;
            }
            if (ArtifactTimeOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactTimeOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactTimeOffset") { IsSerialized = true, Value = (float)ArtifactTimeOffset }; v.Variant = p;
            }
            if (SmallArtifactsTileX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SmallArtifactsTileX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SmallArtifactsTileX") { IsSerialized = true, Value = (float)SmallArtifactsTileX }; v.Variant = p;
            }
            if (SmallArtifactsTileY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SmallArtifactsTileY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SmallArtifactsTileY") { IsSerialized = true, Value = (float)SmallArtifactsTileY }; v.Variant = p;
            }
            if (UseStencilMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseStencilMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseStencilMask") { IsSerialized = true, Value = (float)UseStencilMask }; v.Variant = p;
            }
            if (UseSmallArtifacts != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseSmallArtifacts") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseSmallArtifacts") { IsSerialized = true, Value = (float)UseSmallArtifacts }; v.Variant = p;
            }
            if (UseBothSideBlur != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseBothSideBlur") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseBothSideBlur") { IsSerialized = true, Value = (float)UseBothSideBlur }; v.Variant = p;
            }
            if (UseHorizontal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseHorizontal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseHorizontal") { IsSerialized = true, Value = (float)UseHorizontal }; v.Variant = p;
            }
            if (UseAlphaOverEntireEffect != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseAlphaOverEntireEffect") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseAlphaOverEntireEffect") { IsSerialized = true, Value = (float)UseAlphaOverEntireEffect }; v.Variant = p;
            }
            if (ErrorIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ErrorIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ErrorIntensity") { IsSerialized = true, Value = (float)ErrorIntensity }; v.Variant = p;
            }
            if (InvertBrightnessMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InvertBrightnessMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InvertBrightnessMask") { IsSerialized = true, Value = (float)InvertBrightnessMask }; v.Variant = p;
            }
            if (ErrorTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ErrorTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ErrorTex") { IsSerialized = true, DepotPath = ErrorTex }; v.Variant = p;
            }
            if (DotTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DotTex") { IsSerialized = true, DepotPath = DotTex }; v.Variant = p;
            }
        }
    }
    public partial class _screen_glitch_vision
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (GridColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GridColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "GridColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)GridColor.Red }, Green = new CUInt8() { Value = (Byte)GridColor.Green }, Blue = new CUInt8() { Value = (Byte)GridColor.Blue }, Alpha = new CUInt8() { Value = (Byte)GridColor.Alpha } }; v.Variant = p;
            }
            if (BlurredIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlurredIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlurredIntensity") { IsSerialized = true, Value = (float)BlurredIntensity }; v.Variant = p;
            }
            if (NoiseSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseSize") { IsSerialized = true, Value = (float)NoiseSize }; v.Variant = p;
            }
            if (TileSizeX1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeX1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeX1") { IsSerialized = true, Value = (float)TileSizeX1 }; v.Variant = p;
            }
            if (TileSizeY1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeY1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeY1") { IsSerialized = true, Value = (float)TileSizeY1 }; v.Variant = p;
            }
            if (TileSizeX2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeX2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeX2") { IsSerialized = true, Value = (float)TileSizeX2 }; v.Variant = p;
            }
            if (TileSizeY2 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TileSizeY2") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TileSizeY2") { IsSerialized = true, Value = (float)TileSizeY2 }; v.Variant = p;
            }
            if (GlitchSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchSpeed") { IsSerialized = true, Value = (float)GlitchSpeed }; v.Variant = p;
            }
            if (GlitchSpeedOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchSpeedOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchSpeedOffset") { IsSerialized = true, Value = (float)GlitchSpeedOffset }; v.Variant = p;
            }
            if (GlitchModTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchModTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchModTime") { IsSerialized = true, Value = (float)GlitchModTime }; v.Variant = p;
            }
            if (GlitchDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchDepth") { IsSerialized = true, Value = (float)GlitchDepth }; v.Variant = p;
            }
            if (UseSquareMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseSquareMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseSquareMask") { IsSerialized = true, Value = (float)UseSquareMask }; v.Variant = p;
            }
            if (UseScreenSpaceMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseScreenSpaceMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseScreenSpaceMask") { IsSerialized = true, Value = (float)UseScreenSpaceMask }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (ArtifactColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ArtifactColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ArtifactColor.Red }, Green = new CUInt8() { Value = (Byte)ArtifactColor.Green }, Blue = new CUInt8() { Value = (Byte)ArtifactColor.Blue }, Alpha = new CUInt8() { Value = (Byte)ArtifactColor.Alpha } }; v.Variant = p;
            }
            if (ArtifactIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactIntensity") { IsSerialized = true, Value = (float)ArtifactIntensity }; v.Variant = p;
            }
            if (ArtifactNarrowness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactNarrowness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactNarrowness") { IsSerialized = true, Value = (float)ArtifactNarrowness }; v.Variant = p;
            }
            if (ArtifactMinimizer != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactMinimizer") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactMinimizer") { IsSerialized = true, Value = (float)ArtifactMinimizer }; v.Variant = p;
            }
            if (ArtifactSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactSpeed") { IsSerialized = true, Value = (float)ArtifactSpeed }; v.Variant = p;
            }
            if (ArtifactTimeOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ArtifactTimeOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ArtifactTimeOffset") { IsSerialized = true, Value = (float)ArtifactTimeOffset }; v.Variant = p;
            }
            if (SmallArtifactsTileX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SmallArtifactsTileX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SmallArtifactsTileX") { IsSerialized = true, Value = (float)SmallArtifactsTileX }; v.Variant = p;
            }
            if (SmallArtifactsTileY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SmallArtifactsTileY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SmallArtifactsTileY") { IsSerialized = true, Value = (float)SmallArtifactsTileY }; v.Variant = p;
            }
            if (UseStencilMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseStencilMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseStencilMask") { IsSerialized = true, Value = (float)UseStencilMask }; v.Variant = p;
            }
            if (UseSmallArtifacts != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseSmallArtifacts") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseSmallArtifacts") { IsSerialized = true, Value = (float)UseSmallArtifacts }; v.Variant = p;
            }
            if (UseBothSideBlur != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseBothSideBlur") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseBothSideBlur") { IsSerialized = true, Value = (float)UseBothSideBlur }; v.Variant = p;
            }
            if (UseHorizontal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseHorizontal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseHorizontal") { IsSerialized = true, Value = (float)UseHorizontal }; v.Variant = p;
            }
            if (UseAlphaOverEntireEffect != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseAlphaOverEntireEffect") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseAlphaOverEntireEffect") { IsSerialized = true, Value = (float)UseAlphaOverEntireEffect }; v.Variant = p;
            }
            if (ErrorIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ErrorIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ErrorIntensity") { IsSerialized = true, Value = (float)ErrorIntensity }; v.Variant = p;
            }
            if (InvertBrightnessMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InvertBrightnessMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InvertBrightnessMask") { IsSerialized = true, Value = (float)InvertBrightnessMask }; v.Variant = p;
            }
            if (ErrorTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ErrorTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ErrorTex") { IsSerialized = true, DepotPath = ErrorTex }; v.Variant = p;
            }
            if (DotTex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotTex") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DotTex") { IsSerialized = true, DepotPath = DotTex }; v.Variant = p;
            }
        }
    }
    public partial class _signages
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (MainTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MainTexture") { IsSerialized = true, DepotPath = MainTexture }; v.Variant = p;
            }
            if (UseRoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseRoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseRoughnessTexture") { IsSerialized = true, Value = (float)UseRoughnessTexture }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Metalness") { IsSerialized = true, Value = (float)Metalness }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (RoughnessTilingAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTilingAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RoughnessTilingAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RoughnessTilingAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RoughnessTilingAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RoughnessTilingAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RoughnessTilingAndOffset.W };
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (UniformColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UniformColor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UniformColor") { IsSerialized = true, Value = (float)UniformColor }; v.Variant = p;
            }
            if (UseVertexColorOrMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseVertexColorOrMap") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseVertexColorOrMap") { IsSerialized = true, Value = (float)UseVertexColorOrMap }; v.Variant = p;
            }
            if (ColorOneStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorOneStart") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorOneStart") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorOneStart.Red }, Green = new CUInt8() { Value = (Byte)ColorOneStart.Green }, Blue = new CUInt8() { Value = (Byte)ColorOneStart.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorOneStart.Alpha } }; v.Variant = p;
            }
            if (ColorOneEnd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorOneEnd") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorOneEnd") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorOneEnd.Red }, Green = new CUInt8() { Value = (Byte)ColorOneEnd.Green }, Blue = new CUInt8() { Value = (Byte)ColorOneEnd.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorOneEnd.Alpha } }; v.Variant = p;
            }
            if (ColorGradientScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorGradientScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorGradientScale") { IsSerialized = true, Value = (float)ColorGradientScale }; v.Variant = p;
            }
            if (HorizontalOrVerticalGradient != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HorizontalOrVerticalGradient") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HorizontalOrVerticalGradient") { IsSerialized = true, Value = (float)HorizontalOrVerticalGradient }; v.Variant = p;
            }
            if (GradientStartPosition != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientStartPosition") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GradientStartPosition") { IsSerialized = true, Value = (float)GradientStartPosition }; v.Variant = p;
            }
            if (ColorTwo != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorTwo") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorTwo") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorTwo.Red }, Green = new CUInt8() { Value = (Byte)ColorTwo.Green }, Blue = new CUInt8() { Value = (Byte)ColorTwo.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorTwo.Alpha } }; v.Variant = p;
            }
            if (ColorThree != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorThree") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorThree") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorThree.Red }, Green = new CUInt8() { Value = (Byte)ColorThree.Green }, Blue = new CUInt8() { Value = (Byte)ColorThree.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorThree.Alpha } }; v.Variant = p;
            }
            if (ColorFour != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorFour") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorFour") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorFour.Red }, Green = new CUInt8() { Value = (Byte)ColorFour.Green }, Blue = new CUInt8() { Value = (Byte)ColorFour.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorFour.Alpha } }; v.Variant = p;
            }
            if (ColorFive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorFive") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorFive") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorFive.Red }, Green = new CUInt8() { Value = (Byte)ColorFive.Green }, Blue = new CUInt8() { Value = (Byte)ColorFive.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorFive.Alpha } }; v.Variant = p;
            }
            if (ColorSix != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorSix") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorSix") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorSix.Red }, Green = new CUInt8() { Value = (Byte)ColorSix.Green }, Blue = new CUInt8() { Value = (Byte)ColorSix.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorSix.Alpha } }; v.Variant = p;
            }
            if (NoiseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NoiseTexture") { IsSerialized = true, DepotPath = NoiseTexture }; v.Variant = p;
            }
            if (LightupDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightupDensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightupDensity") { IsSerialized = true, Value = (float)LightupDensity }; v.Variant = p;
            }
            if (LightupMinimumValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightupMinimumValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightupMinimumValue") { IsSerialized = true, Value = (float)LightupMinimumValue }; v.Variant = p;
            }
            if (LightupHorizontalOrVertical != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightupHorizontalOrVertical") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightupHorizontalOrVertical") { IsSerialized = true, Value = (float)LightupHorizontalOrVertical }; v.Variant = p;
            }
            if (BlinkingSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkingSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkingSpeed") { IsSerialized = true, Value = (float)BlinkingSpeed }; v.Variant = p;
            }
            if (BlinkingMinimumValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkingMinimumValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkingMinimumValue") { IsSerialized = true, Value = (float)BlinkingMinimumValue }; v.Variant = p;
            }
            if (BlinkingPhase != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkingPhase") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkingPhase") { IsSerialized = true, Value = (float)BlinkingPhase }; v.Variant = p;
            }
            if (BlinkSmoothness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkSmoothness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkSmoothness") { IsSerialized = true, Value = (float)BlinkSmoothness }; v.Variant = p;
            }
            if (FresnelAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelAmount") { IsSerialized = true, Value = (float)FresnelAmount }; v.Variant = p;
            }
        }
    }
    public partial class _signages_transparent_no_txaa
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (MainTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MainTexture") { IsSerialized = true, DepotPath = MainTexture }; v.Variant = p;
            }
            if (UseRoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseRoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseRoughnessTexture") { IsSerialized = true, Value = (float)UseRoughnessTexture }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Metalness") { IsSerialized = true, Value = (float)Metalness }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (RoughnessTilingAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTilingAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RoughnessTilingAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RoughnessTilingAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RoughnessTilingAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RoughnessTilingAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RoughnessTilingAndOffset.W };
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (UniformColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UniformColor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UniformColor") { IsSerialized = true, Value = (float)UniformColor }; v.Variant = p;
            }
            if (UseVertexColorOrMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseVertexColorOrMap") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseVertexColorOrMap") { IsSerialized = true, Value = (float)UseVertexColorOrMap }; v.Variant = p;
            }
            if (ColorOneStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorOneStart") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorOneStart") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorOneStart.Red }, Green = new CUInt8() { Value = (Byte)ColorOneStart.Green }, Blue = new CUInt8() { Value = (Byte)ColorOneStart.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorOneStart.Alpha } }; v.Variant = p;
            }
            if (ColorOneEnd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorOneEnd") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorOneEnd") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorOneEnd.Red }, Green = new CUInt8() { Value = (Byte)ColorOneEnd.Green }, Blue = new CUInt8() { Value = (Byte)ColorOneEnd.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorOneEnd.Alpha } }; v.Variant = p;
            }
            if (ColorGradientScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorGradientScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorGradientScale") { IsSerialized = true, Value = (float)ColorGradientScale }; v.Variant = p;
            }
            if (HorizontalOrVerticalGradient != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HorizontalOrVerticalGradient") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HorizontalOrVerticalGradient") { IsSerialized = true, Value = (float)HorizontalOrVerticalGradient }; v.Variant = p;
            }
            if (GradientStartPosition != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientStartPosition") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GradientStartPosition") { IsSerialized = true, Value = (float)GradientStartPosition }; v.Variant = p;
            }
            if (ColorTwo != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorTwo") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorTwo") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorTwo.Red }, Green = new CUInt8() { Value = (Byte)ColorTwo.Green }, Blue = new CUInt8() { Value = (Byte)ColorTwo.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorTwo.Alpha } }; v.Variant = p;
            }
            if (ColorThree != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorThree") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorThree") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorThree.Red }, Green = new CUInt8() { Value = (Byte)ColorThree.Green }, Blue = new CUInt8() { Value = (Byte)ColorThree.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorThree.Alpha } }; v.Variant = p;
            }
            if (ColorFour != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorFour") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorFour") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorFour.Red }, Green = new CUInt8() { Value = (Byte)ColorFour.Green }, Blue = new CUInt8() { Value = (Byte)ColorFour.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorFour.Alpha } }; v.Variant = p;
            }
            if (ColorFive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorFive") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorFive") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorFive.Red }, Green = new CUInt8() { Value = (Byte)ColorFive.Green }, Blue = new CUInt8() { Value = (Byte)ColorFive.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorFive.Alpha } }; v.Variant = p;
            }
            if (ColorSix != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorSix") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorSix") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorSix.Red }, Green = new CUInt8() { Value = (Byte)ColorSix.Green }, Blue = new CUInt8() { Value = (Byte)ColorSix.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorSix.Alpha } }; v.Variant = p;
            }
            if (NoiseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NoiseTexture") { IsSerialized = true, DepotPath = NoiseTexture }; v.Variant = p;
            }
            if (LightupDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightupDensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightupDensity") { IsSerialized = true, Value = (float)LightupDensity }; v.Variant = p;
            }
            if (LightupMinimumValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightupMinimumValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightupMinimumValue") { IsSerialized = true, Value = (float)LightupMinimumValue }; v.Variant = p;
            }
            if (LightupHorizontalOrVertical != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightupHorizontalOrVertical") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LightupHorizontalOrVertical") { IsSerialized = true, Value = (float)LightupHorizontalOrVertical }; v.Variant = p;
            }
            if (BlinkingSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkingSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkingSpeed") { IsSerialized = true, Value = (float)BlinkingSpeed }; v.Variant = p;
            }
            if (BlinkingMinimumValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkingMinimumValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkingMinimumValue") { IsSerialized = true, Value = (float)BlinkingMinimumValue }; v.Variant = p;
            }
            if (BlinkingPhase != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkingPhase") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkingPhase") { IsSerialized = true, Value = (float)BlinkingPhase }; v.Variant = p;
            }
            if (BlinkSmoothness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkSmoothness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkSmoothness") { IsSerialized = true, Value = (float)BlinkSmoothness }; v.Variant = p;
            }
            if (FresnelAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelAmount") { IsSerialized = true, Value = (float)FresnelAmount }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
        }
    }
    public partial class _silverhand_proxy
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Color") { IsSerialized = true, DepotPath = Color }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (FresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelBias") { IsSerialized = true, Value = (float)FresnelBias }; v.Variant = p;
            }
            if (BayerScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BayerScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BayerScale") { IsSerialized = true, Value = (float)BayerScale }; v.Variant = p;
            }
            if (BayerIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BayerIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BayerIntensity") { IsSerialized = true, Value = (float)BayerIntensity }; v.Variant = p;
            }
            if (FresnelExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelExponent") { IsSerialized = true, Value = (float)FresnelExponent }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
        }
    }
    public partial class _simple_additive_ui
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (UIRenderTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UIRenderTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "UIRenderTexture") { IsSerialized = true, DepotPath = UIRenderTexture }; v.Variant = p;
            }
            if (UvTilingAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UvTilingAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "UvTilingAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)UvTilingAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)UvTilingAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)UvTilingAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)UvTilingAndOffset.W };
            }
            if (DirtTilingAndOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtTilingAndOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DirtTilingAndOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DirtTilingAndOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DirtTilingAndOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DirtTilingAndOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DirtTilingAndOffset.W };
            }
            if (TexturePartUV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexturePartUV") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexturePartUV") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexturePartUV.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexturePartUV.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexturePartUV.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexturePartUV.W };
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (PremultiplyByAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PremultiplyByAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "PremultiplyByAlpha") { IsSerialized = true, Value = (float)PremultiplyByAlpha }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (Saturation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Saturation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Saturation") { IsSerialized = true, Value = (float)Saturation }; v.Variant = p;
            }
            if (DirtTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DirtTexture") { IsSerialized = true, DepotPath = DirtTexture }; v.Variant = p;
            }
            if (DirtOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DirtOpacity") { IsSerialized = true, Value = (float)DirtOpacity }; v.Variant = p;
            }
            if (DirtColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DirtColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DirtColorScale.Red }, Green = new CUInt8() { Value = (Byte)DirtColorScale.Green }, Blue = new CUInt8() { Value = (Byte)DirtColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)DirtColorScale.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _simple_emissive_decals
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (ColorMultiply != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiply") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMultiply") { IsSerialized = true, Value = (float)ColorMultiply }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (SubUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVWidth") { IsSerialized = true, Value = (float)SubUVWidth }; v.Variant = p;
            }
            if (SubUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVHeight") { IsSerialized = true, Value = (float)SubUVHeight }; v.Variant = p;
            }
            if (FrameNum != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FrameNum") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FrameNum") { IsSerialized = true, Value = (float)FrameNum }; v.Variant = p;
            }
            if (InvertSoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InvertSoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InvertSoftAlpha") { IsSerialized = true, Value = (float)InvertSoftAlpha }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
        }
    }
    public partial class _simple_fresnel
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (FresnelColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "FresnelColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)FresnelColor.Red }, Green = new CUInt8() { Value = (Byte)FresnelColor.Green }, Blue = new CUInt8() { Value = (Byte)FresnelColor.Blue }, Alpha = new CUInt8() { Value = (Byte)FresnelColor.Alpha } }; v.Variant = p;
            }
            if (FresnelPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelPower") { IsSerialized = true, Value = (float)FresnelPower }; v.Variant = p;
            }
        }
    }
    public partial class _simple_refraction
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (RefractionStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionStrength") { IsSerialized = true, Value = (float)RefractionStrength }; v.Variant = p;
            }
            if (Refraction != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Refraction") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Refraction") { IsSerialized = true, DepotPath = Refraction }; v.Variant = p;
            }
            if (UseDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseDepth") { IsSerialized = true, Value = (float)UseDepth }; v.Variant = p;
            }
            if (RefractionTextureOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionTextureOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RefractionTextureOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RefractionTextureOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RefractionTextureOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RefractionTextureOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RefractionTextureOffset.W };
            }
            if (RefractionTextureSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionTextureSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RefractionTextureSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RefractionTextureSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RefractionTextureSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RefractionTextureSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RefractionTextureSpeed.W };
            }
            if (SlowFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SlowFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SlowFactor") { IsSerialized = true, Value = (float)SlowFactor }; v.Variant = p;
            }
            if (RefractionStrengthSlowTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionStrengthSlowTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionStrengthSlowTime") { IsSerialized = true, Value = (float)RefractionStrengthSlowTime }; v.Variant = p;
            }
        }
    }
    public partial class _sound_clue
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (ColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMultiplier") { IsSerialized = true, Value = (float)ColorMultiplier }; v.Variant = p;
            }
        }
    }
    public partial class _television_ad
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (TilesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TilesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TilesWidth") { IsSerialized = true, Value = (float)TilesWidth }; v.Variant = p;
            }
            if (TilesHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TilesHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TilesHeight") { IsSerialized = true, Value = (float)TilesHeight }; v.Variant = p;
            }
            if (PlaySpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PlaySpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "PlaySpeed") { IsSerialized = true, Value = (float)PlaySpeed }; v.Variant = p;
            }
            if (InterlaceLines != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InterlaceLines") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InterlaceLines") { IsSerialized = true, Value = (float)InterlaceLines }; v.Variant = p;
            }
            if (PixelsHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PixelsHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "PixelsHeight") { IsSerialized = true, Value = (float)PixelsHeight }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (BlackLinesRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlackLinesRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlackLinesRatio") { IsSerialized = true, Value = (float)BlackLinesRatio }; v.Variant = p;
            }
            if (BlackLinesIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlackLinesIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlackLinesIntensity") { IsSerialized = true, Value = (float)BlackLinesIntensity }; v.Variant = p;
            }
            if (AdTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "AdTexture") { IsSerialized = true, DepotPath = AdTexture }; v.Variant = p;
            }
            if (BlackLinesSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlackLinesSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlackLinesSize") { IsSerialized = true, Value = (float)BlackLinesSize }; v.Variant = p;
            }
            if (LinesOrDots != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LinesOrDots") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LinesOrDots") { IsSerialized = true, Value = (float)LinesOrDots }; v.Variant = p;
            }
            if (DistanceDivision != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistanceDivision") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistanceDivision") { IsSerialized = true, Value = (float)DistanceDivision }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Metalness") { IsSerialized = true, Value = (float)Metalness }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (IsBroken != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IsBroken") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IsBroken") { IsSerialized = true, Value = (float)IsBroken }; v.Variant = p;
            }
            if (UseFloatParameter != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseFloatParameter") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseFloatParameter") { IsSerialized = true, Value = (float)UseFloatParameter }; v.Variant = p;
            }
            if (UseFloatParameter1 != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseFloatParameter1") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseFloatParameter1") { IsSerialized = true, Value = (float)UseFloatParameter1 }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (DirtTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DirtTexture") { IsSerialized = true, DepotPath = DirtTexture }; v.Variant = p;
            }
            if (DirtOpacityScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtOpacityScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DirtOpacityScale") { IsSerialized = true, Value = (float)DirtOpacityScale }; v.Variant = p;
            }
            if (DirtRoughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtRoughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DirtRoughness") { IsSerialized = true, Value = (float)DirtRoughness }; v.Variant = p;
            }
            if (DirtUvScaleU != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtUvScaleU") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DirtUvScaleU") { IsSerialized = true, Value = (float)DirtUvScaleU }; v.Variant = p;
            }
            if (DirtUvScaleV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtUvScaleV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DirtUvScaleV") { IsSerialized = true, Value = (float)DirtUvScaleV }; v.Variant = p;
            }
            if (HUEChangeSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HUEChangeSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HUEChangeSpeed") { IsSerialized = true, Value = (float)HUEChangeSpeed }; v.Variant = p;
            }
        }
    }
    public partial class _triplanar_projection
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (FirstValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FirstValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FirstValue") { IsSerialized = true, Value = (float)FirstValue }; v.Variant = p;
            }
            if (SecondValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondValue") { IsSerialized = true, Value = (float)SecondValue }; v.Variant = p;
            }
            if (ThirdValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ThirdValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ThirdValue") { IsSerialized = true, Value = (float)ThirdValue }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Stretch != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Stretch") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Stretch") { IsSerialized = true, Value = (float)Stretch }; v.Variant = p;
            }
            if (ColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMultiplier") { IsSerialized = true, Value = (float)ColorMultiplier }; v.Variant = p;
            }
        }
    }
    public partial class _water_test
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (TintColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor.Red }, Green = new CUInt8() { Value = (Byte)TintColor.Green }, Blue = new CUInt8() { Value = (Byte)TintColor.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor.Alpha } }; v.Variant = p;
            }
            if (TintColorDeep != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColorDeep") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColorDeep") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColorDeep.Red }, Green = new CUInt8() { Value = (Byte)TintColorDeep.Green }, Blue = new CUInt8() { Value = (Byte)TintColorDeep.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColorDeep.Alpha } }; v.Variant = p;
            }
            if (TexCoordDtortScaleSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDtortScaleSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDtortScaleSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDtortScaleSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDtortScaleSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDtortScaleSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDtortScaleSpeed.W };
            }
            if (DistortAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortAmount") { IsSerialized = true, Value = (float)DistortAmount }; v.Variant = p;
            }
            if (IOR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IOR") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IOR") { IsSerialized = true, Value = (float)IOR }; v.Variant = p;
            }
            if (ReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ReflectionPower") { IsSerialized = true, Value = (float)ReflectionPower }; v.Variant = p;
            }
            if (ReflectNormalMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ReflectNormalMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "ReflectNormalMultiplier") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)ReflectNormalMultiplier.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)ReflectNormalMultiplier.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)ReflectNormalMultiplier.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)ReflectNormalMultiplier.W };
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Alpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Alpha") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Alpha") { IsSerialized = true, DepotPath = Alpha }; v.Variant = p;
            }
        }
    }
    public partial class _zoom
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Progress != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Progress") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Progress") { IsSerialized = true, Value = (float)Progress }; v.Variant = p;
            }
            if (OutlineColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OutlineColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "OutlineColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)OutlineColor.Red }, Green = new CUInt8() { Value = (Byte)OutlineColor.Green }, Blue = new CUInt8() { Value = (Byte)OutlineColor.Blue }, Alpha = new CUInt8() { Value = (Byte)OutlineColor.Alpha } }; v.Variant = p;
            }
            if (OutlineThickness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OutlineThickness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OutlineThickness") { IsSerialized = true, Value = (float)OutlineThickness }; v.Variant = p;
            }
            if (MinRange != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MinRange") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MinRange") { IsSerialized = true, Value = (float)MinRange }; v.Variant = p;
            }
            if (MaxRange != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxRange") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxRange") { IsSerialized = true, Value = (float)MaxRange }; v.Variant = p;
            }
            if (MotionIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MotionIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MotionIntensity") { IsSerialized = true, Value = (float)MotionIntensity }; v.Variant = p;
            }
            if (TransitionOrLoop != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TransitionOrLoop") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TransitionOrLoop") { IsSerialized = true, Value = (float)TransitionOrLoop }; v.Variant = p;
            }
            if (IsBackwardEffect != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IsBackwardEffect") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IsBackwardEffect") { IsSerialized = true, Value = (float)IsBackwardEffect }; v.Variant = p;
            }
            if (UseBrokenSobelPixels != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseBrokenSobelPixels") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseBrokenSobelPixels") { IsSerialized = true, Value = (float)UseBrokenSobelPixels }; v.Variant = p;
            }
        }
    }
    public partial class _alt_halo
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Offset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Offset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Offset") { IsSerialized = true, Value = (float)Offset }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Noise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Noise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Noise") { IsSerialized = true, DepotPath = Noise }; v.Variant = p;
            }
            if (DistanceNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistanceNoise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DistanceNoise") { IsSerialized = true, DepotPath = DistanceNoise }; v.Variant = p;
            }
            if (DistanceNoiseScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistanceNoiseScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistanceNoiseScale") { IsSerialized = true, Value = (float)DistanceNoiseScale }; v.Variant = p;
            }
            if (Dot != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Dot") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Dot") { IsSerialized = true, DepotPath = Dot }; v.Variant = p;
            }
            if (DotsLift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsLift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotsLift") { IsSerialized = true, Value = (float)DotsLift }; v.Variant = p;
            }
            if (DistPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistPower") { IsSerialized = true, Value = (float)DistPower }; v.Variant = p;
            }
            if (NoiseScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseScale") { IsSerialized = true, Value = (float)NoiseScale }; v.Variant = p;
            }
            if (NoiseSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseSpeed") { IsSerialized = true, Value = (float)NoiseSpeed }; v.Variant = p;
            }
            if (DistanceNoiseAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistanceNoiseAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistanceNoiseAmount") { IsSerialized = true, Value = (float)DistanceNoiseAmount }; v.Variant = p;
            }
            if (DotsMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotsMax") { IsSerialized = true, Value = (float)DotsMax }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (WorldOrLocalSpace != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldOrLocalSpace") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WorldOrLocalSpace") { IsSerialized = true, Value = (float)WorldOrLocalSpace }; v.Variant = p;
            }
            if (DotsScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotsScale") { IsSerialized = true, Value = (float)DotsScale }; v.Variant = p;
            }
            if (LocalSpaceRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LocalSpaceRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LocalSpaceRatio") { IsSerialized = true, Value = (float)LocalSpaceRatio }; v.Variant = p;
            }
            if (FadeOutDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutDistance") { IsSerialized = true, Value = (float)FadeOutDistance }; v.Variant = p;
            }
            if (FadeOutDistanceMinimum != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FadeOutDistanceMinimum") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FadeOutDistanceMinimum") { IsSerialized = true, Value = (float)FadeOutDistanceMinimum }; v.Variant = p;
            }
            if (UVOrScreenSpace != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVOrScreenSpace") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVOrScreenSpace") { IsSerialized = true, Value = (float)UVOrScreenSpace }; v.Variant = p;
            }
        }
    }
    public partial class _blackbodyradiation_distant
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Temperature != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Temperature") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Temperature") { IsSerialized = true, Value = (float)Temperature }; v.Variant = p;
            }
            if (FireScatterAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FireScatterAlpha") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FireScatterAlpha") { IsSerialized = true, DepotPath = FireScatterAlpha }; v.Variant = p;
            }
            if (subUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "subUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "subUVWidth") { IsSerialized = true, Value = (float)subUVWidth }; v.Variant = p;
            }
            if (subUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "subUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "subUVHeight") { IsSerialized = true, Value = (float)subUVHeight }; v.Variant = p;
            }
            if (MultiplierExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultiplierExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MultiplierExponent") { IsSerialized = true, Value = (float)MultiplierExponent }; v.Variant = p;
            }
            if (NoAlphaOnTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoAlphaOnTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoAlphaOnTexture") { IsSerialized = true, Value = (float)NoAlphaOnTexture }; v.Variant = p;
            }
            if (AlphaExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaExponent") { IsSerialized = true, Value = (float)AlphaExponent }; v.Variant = p;
            }
            if (maxAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "maxAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "maxAlpha") { IsSerialized = true, Value = (float)maxAlpha }; v.Variant = p;
            }
            if (EatUpOrStraightAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EatUpOrStraightAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EatUpOrStraightAlpha") { IsSerialized = true, Value = (float)EatUpOrStraightAlpha }; v.Variant = p;
            }
            if (ScatterAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatterAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScatterAmount") { IsSerialized = true, Value = (float)ScatterAmount }; v.Variant = p;
            }
            if (ScatterPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatterPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScatterPower") { IsSerialized = true, Value = (float)ScatterPower }; v.Variant = p;
            }
            if (HueShift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HueShift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HueShift") { IsSerialized = true, Value = (float)HueShift }; v.Variant = p;
            }
            if (HueSpread != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HueSpread") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HueSpread") { IsSerialized = true, Value = (float)HueSpread }; v.Variant = p;
            }
            if (Saturation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Saturation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Saturation") { IsSerialized = true, Value = (float)Saturation }; v.Variant = p;
            }
            if (ExpensiveBlending != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ExpensiveBlending") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ExpensiveBlending") { IsSerialized = true, Value = (float)ExpensiveBlending }; v.Variant = p;
            }
            if (LightSmoke != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightSmoke") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "LightSmoke") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)LightSmoke.Red }, Green = new CUInt8() { Value = (Byte)LightSmoke.Green }, Blue = new CUInt8() { Value = (Byte)LightSmoke.Blue }, Alpha = new CUInt8() { Value = (Byte)LightSmoke.Alpha } }; v.Variant = p;
            }
            if (DarkSmoke != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DarkSmoke") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DarkSmoke") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DarkSmoke.Red }, Green = new CUInt8() { Value = (Byte)DarkSmoke.Green }, Blue = new CUInt8() { Value = (Byte)DarkSmoke.Blue }, Alpha = new CUInt8() { Value = (Byte)DarkSmoke.Alpha } }; v.Variant = p;
            }
            if (SoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftAlpha") { IsSerialized = true, Value = (float)SoftAlpha }; v.Variant = p;
            }
            if (Distort != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Distort") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Distort") { IsSerialized = true, DepotPath = Distort }; v.Variant = p;
            }
            if (TexCoordDtortScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDtortScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDtortScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDtortScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDtortScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDtortScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDtortScale.W };
            }
            if (TexCoordDtortSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDtortSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDtortSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDtortSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDtortSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDtortSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDtortSpeed.W };
            }
            if (DistortAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortAmount") { IsSerialized = true, Value = (float)DistortAmount }; v.Variant = p;
            }
            if (EnableRowAnimation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRowAnimation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRowAnimation") { IsSerialized = true, Value = (float)EnableRowAnimation }; v.Variant = p;
            }
            if (DoNotApplyLighting != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DoNotApplyLighting") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DoNotApplyLighting") { IsSerialized = true, Value = (float)DoNotApplyLighting }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (InvertMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InvertMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InvertMask") { IsSerialized = true, Value = (float)InvertMask }; v.Variant = p;
            }
            if (MaskTilingAndSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTilingAndSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskTilingAndSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskTilingAndSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskTilingAndSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskTilingAndSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskTilingAndSpeed.W };
            }
            if (MaskIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskIntensity") { IsSerialized = true, Value = (float)MaskIntensity }; v.Variant = p;
            }
            if (UseVertexAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseVertexAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseVertexAlpha") { IsSerialized = true, Value = (float)UseVertexAlpha }; v.Variant = p;
            }
            if (DotWithLookAt != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotWithLookAt") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotWithLookAt") { IsSerialized = true, Value = (float)DotWithLookAt }; v.Variant = p;
            }
        }
    }
    public partial class _blackbodyradiation_notxaa
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Temperature != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Temperature") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Temperature") { IsSerialized = true, Value = (float)Temperature }; v.Variant = p;
            }
            if (FireScatterAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FireScatterAlpha") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FireScatterAlpha") { IsSerialized = true, DepotPath = FireScatterAlpha }; v.Variant = p;
            }
            if (subUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "subUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "subUVWidth") { IsSerialized = true, Value = (float)subUVWidth }; v.Variant = p;
            }
            if (subUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "subUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "subUVHeight") { IsSerialized = true, Value = (float)subUVHeight }; v.Variant = p;
            }
            if (MultiplierExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultiplierExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MultiplierExponent") { IsSerialized = true, Value = (float)MultiplierExponent }; v.Variant = p;
            }
            if (NoAlphaOnTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoAlphaOnTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoAlphaOnTexture") { IsSerialized = true, Value = (float)NoAlphaOnTexture }; v.Variant = p;
            }
            if (AlphaExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaExponent") { IsSerialized = true, Value = (float)AlphaExponent }; v.Variant = p;
            }
            if (maxAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "maxAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "maxAlpha") { IsSerialized = true, Value = (float)maxAlpha }; v.Variant = p;
            }
            if (EatUpOrStraightAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EatUpOrStraightAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EatUpOrStraightAlpha") { IsSerialized = true, Value = (float)EatUpOrStraightAlpha }; v.Variant = p;
            }
            if (ScatterAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatterAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScatterAmount") { IsSerialized = true, Value = (float)ScatterAmount }; v.Variant = p;
            }
            if (ScatterPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatterPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScatterPower") { IsSerialized = true, Value = (float)ScatterPower }; v.Variant = p;
            }
            if (HueShift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HueShift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HueShift") { IsSerialized = true, Value = (float)HueShift }; v.Variant = p;
            }
            if (HueSpread != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HueSpread") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HueSpread") { IsSerialized = true, Value = (float)HueSpread }; v.Variant = p;
            }
            if (Saturation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Saturation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Saturation") { IsSerialized = true, Value = (float)Saturation }; v.Variant = p;
            }
            if (ExpensiveBlending != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ExpensiveBlending") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ExpensiveBlending") { IsSerialized = true, Value = (float)ExpensiveBlending }; v.Variant = p;
            }
            if (LightSmoke != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LightSmoke") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "LightSmoke") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)LightSmoke.Red }, Green = new CUInt8() { Value = (Byte)LightSmoke.Green }, Blue = new CUInt8() { Value = (Byte)LightSmoke.Blue }, Alpha = new CUInt8() { Value = (Byte)LightSmoke.Alpha } }; v.Variant = p;
            }
            if (DarkSmoke != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DarkSmoke") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DarkSmoke") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DarkSmoke.Red }, Green = new CUInt8() { Value = (Byte)DarkSmoke.Green }, Blue = new CUInt8() { Value = (Byte)DarkSmoke.Blue }, Alpha = new CUInt8() { Value = (Byte)DarkSmoke.Alpha } }; v.Variant = p;
            }
            if (SoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftAlpha") { IsSerialized = true, Value = (float)SoftAlpha }; v.Variant = p;
            }
            if (Distort != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Distort") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Distort") { IsSerialized = true, DepotPath = Distort }; v.Variant = p;
            }
            if (TexCoordDtortScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDtortScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDtortScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDtortScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDtortScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDtortScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDtortScale.W };
            }
            if (TexCoordDtortSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDtortSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDtortSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDtortSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDtortSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDtortSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDtortSpeed.W };
            }
            if (DistortAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortAmount") { IsSerialized = true, Value = (float)DistortAmount }; v.Variant = p;
            }
            if (EnableRowAnimation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRowAnimation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRowAnimation") { IsSerialized = true, Value = (float)EnableRowAnimation }; v.Variant = p;
            }
            if (DoNotApplyLighting != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DoNotApplyLighting") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DoNotApplyLighting") { IsSerialized = true, Value = (float)DoNotApplyLighting }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (InvertMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InvertMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InvertMask") { IsSerialized = true, Value = (float)InvertMask }; v.Variant = p;
            }
            if (MaskTilingAndSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTilingAndSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskTilingAndSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskTilingAndSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskTilingAndSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskTilingAndSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskTilingAndSpeed.W };
            }
            if (MaskIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskIntensity") { IsSerialized = true, Value = (float)MaskIntensity }; v.Variant = p;
            }
            if (UseVertexAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseVertexAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseVertexAlpha") { IsSerialized = true, Value = (float)UseVertexAlpha }; v.Variant = p;
            }
            if (DotWithLookAt != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotWithLookAt") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotWithLookAt") { IsSerialized = true, Value = (float)DotWithLookAt }; v.Variant = p;
            }
        }
    }
    public partial class _blood_metal_base
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (ColorThin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorThin") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorThin") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorThin.Red }, Green = new CUInt8() { Value = (Byte)ColorThin.Green }, Blue = new CUInt8() { Value = (Byte)ColorThin.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorThin.Alpha } }; v.Variant = p;
            }
            if (ColorThick != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorThick") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ColorThick") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ColorThick.Red }, Green = new CUInt8() { Value = (Byte)ColorThick.Green }, Blue = new CUInt8() { Value = (Byte)ColorThick.Blue }, Alpha = new CUInt8() { Value = (Byte)ColorThick.Alpha } }; v.Variant = p;
            }
            if (NormalAndDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalAndDensity") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalAndDensity") { IsSerialized = true, DepotPath = NormalAndDensity }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Metalness") { IsSerialized = true, Value = (float)Metalness }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (SubUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVWidth") { IsSerialized = true, Value = (float)SubUVWidth }; v.Variant = p;
            }
            if (SubUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVHeight") { IsSerialized = true, Value = (float)SubUVHeight }; v.Variant = p;
            }
            if (UseTimeFlowmap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseTimeFlowmap") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseTimeFlowmap") { IsSerialized = true, Value = (float)UseTimeFlowmap }; v.Variant = p;
            }
            if (FlowMapSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlowMapSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlowMapSpeed") { IsSerialized = true, Value = (float)FlowMapSpeed }; v.Variant = p;
            }
            if (VelocityMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VelocityMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "VelocityMap") { IsSerialized = true, DepotPath = VelocityMap }; v.Variant = p;
            }
            if (FlowmapStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlowmapStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlowmapStrength") { IsSerialized = true, Value = (float)FlowmapStrength }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (UseOnStaticMeshes != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseOnStaticMeshes") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseOnStaticMeshes") { IsSerialized = true, Value = (float)UseOnStaticMeshes }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
        }
    }
    public partial class _caustics
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Distortion != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Distortion") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Distortion") { IsSerialized = true, DepotPath = Distortion }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Contrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Contrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Contrast") { IsSerialized = true, Value = (float)Contrast }; v.Variant = p;
            }
            if (Speed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Speed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Speed") { IsSerialized = true, Value = (float)Speed }; v.Variant = p;
            }
            if (SmallMovementSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SmallMovementSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SmallMovementSpeed") { IsSerialized = true, Value = (float)SmallMovementSpeed }; v.Variant = p;
            }
            if (Multiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Multiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Multiplier") { IsSerialized = true, Value = (float)Multiplier }; v.Variant = p;
            }
            if (Spread != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Spread") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Spread") { IsSerialized = true, Value = (float)Spread }; v.Variant = p;
            }
            if (DistortionAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortionAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortionAmount") { IsSerialized = true, Value = (float)DistortionAmount }; v.Variant = p;
            }
            if (DistortionUVScaling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortionUVScaling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortionUVScaling") { IsSerialized = true, Value = (float)DistortionUVScaling }; v.Variant = p;
            }
            if (UVScaling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVScaling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVScaling") { IsSerialized = true, Value = (float)UVScaling }; v.Variant = p;
            }
            if (EdgeWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EdgeWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EdgeWidth") { IsSerialized = true, Value = (float)EdgeWidth }; v.Variant = p;
            }
            if (EdgeMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EdgeMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EdgeMultiplier") { IsSerialized = true, Value = (float)EdgeMultiplier }; v.Variant = p;
            }
            if (MaxValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxValue") { IsSerialized = true, Value = (float)MaxValue }; v.Variant = p;
            }
        }
    }
    public partial class _character_kerenzikov
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VertexOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexOffset") { IsSerialized = true, Value = (float)VertexOffset }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (CenterPoint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CenterPoint") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "CenterPoint") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)CenterPoint.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)CenterPoint.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)CenterPoint.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)CenterPoint.W };
            }
            if (PixelOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PixelOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "PixelOffset") { IsSerialized = true, Value = (float)PixelOffset }; v.Variant = p;
            }
            if (ComebackPixelOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ComebackPixelOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ComebackPixelOffset") { IsSerialized = true, Value = (float)ComebackPixelOffset }; v.Variant = p;
            }
            if (NoiseAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseAmount") { IsSerialized = true, Value = (float)NoiseAmount }; v.Variant = p;
            }
            if (Debug != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Debug") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Debug") { IsSerialized = true, Value = (float)Debug }; v.Variant = p;
            }
        }
    }
    public partial class _character_sandevistan
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Iterations != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Iterations") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Iterations") { IsSerialized = true, Value = (float)Iterations }; v.Variant = p;
            }
            if (OffsetStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OffsetStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OffsetStrength") { IsSerialized = true, Value = (float)OffsetStrength }; v.Variant = p;
            }
            if (InsideSoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InsideSoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InsideSoftAlpha") { IsSerialized = true, Value = (float)InsideSoftAlpha }; v.Variant = p;
            }
            if (TopDisplacePower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TopDisplacePower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TopDisplacePower") { IsSerialized = true, Value = (float)TopDisplacePower }; v.Variant = p;
            }
            if (TopDisplaceIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TopDisplaceIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TopDisplaceIntensity") { IsSerialized = true, Value = (float)TopDisplaceIntensity }; v.Variant = p;
            }
        }
    }
    public partial class _crystal_dome
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (ScanlineDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineDensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlineDensity") { IsSerialized = true, Value = (float)ScanlineDensity }; v.Variant = p;
            }
            if (GainMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GainMin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GainMin") { IsSerialized = true, Value = (float)GainMin }; v.Variant = p;
            }
            if (GainMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GainMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GainMax") { IsSerialized = true, Value = (float)GainMax }; v.Variant = p;
            }
            if (NoiseMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseMax") { IsSerialized = true, Value = (float)NoiseMax }; v.Variant = p;
            }
            if (NoiseBrightness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseBrightness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseBrightness") { IsSerialized = true, Value = (float)NoiseBrightness }; v.Variant = p;
            }
            if (IntialGradientTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IntialGradientTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IntialGradientTime") { IsSerialized = true, Value = (float)IntialGradientTime }; v.Variant = p;
            }
        }
    }
    public partial class _crystal_dome_opaque
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (PrimaryGlowColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PrimaryGlowColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "PrimaryGlowColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)PrimaryGlowColor.Red }, Green = new CUInt8() { Value = (Byte)PrimaryGlowColor.Green }, Blue = new CUInt8() { Value = (Byte)PrimaryGlowColor.Blue }, Alpha = new CUInt8() { Value = (Byte)PrimaryGlowColor.Alpha } }; v.Variant = p;
            }
            if (SecondaryGlowColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryGlowColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "SecondaryGlowColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)SecondaryGlowColor.Red }, Green = new CUInt8() { Value = (Byte)SecondaryGlowColor.Green }, Blue = new CUInt8() { Value = (Byte)SecondaryGlowColor.Blue }, Alpha = new CUInt8() { Value = (Byte)SecondaryGlowColor.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (Tiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tiling") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "Tiling") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)Tiling.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)Tiling.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)Tiling.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)Tiling.W };
            }
            if (InitialTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InitialTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InitialTime") { IsSerialized = true, Value = (float)InitialTime }; v.Variant = p;
            }
            if (MaxTimeOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxTimeOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxTimeOffset") { IsSerialized = true, Value = (float)MaxTimeOffset }; v.Variant = p;
            }
            if (SwipeAngle != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SwipeAngle") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SwipeAngle") { IsSerialized = true, Value = (float)SwipeAngle }; v.Variant = p;
            }
            if (FluffMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FluffMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FluffMask") { IsSerialized = true, DepotPath = FluffMask }; v.Variant = p;
            }
            if (PatternMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PatternMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "PatternMask") { IsSerialized = true, DepotPath = PatternMask }; v.Variant = p;
            }
            if (UVDivision != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVDivision") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVDivision") { IsSerialized = true, Value = (float)UVDivision }; v.Variant = p;
            }
            if (NoiseMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseMax") { IsSerialized = true, Value = (float)NoiseMax }; v.Variant = p;
            }
            if (DebugValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DebugValue") { IsSerialized = true, Value = (float)DebugValue }; v.Variant = p;
            }
            if (Debug != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Debug") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Debug") { IsSerialized = true, Value = (float)Debug }; v.Variant = p;
            }
            if (UVDivision_FluffMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVDivision_FluffMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVDivision_FluffMask") { IsSerialized = true, Value = (float)UVDivision_FluffMask }; v.Variant = p;
            }
            if (MinUV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MinUV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MinUV") { IsSerialized = true, Value = (float)MinUV }; v.Variant = p;
            }
            if (MaxUV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxUV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxUV") { IsSerialized = true, Value = (float)MaxUV }; v.Variant = p;
            }
            if (DistortionMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortionMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DistortionMap") { IsSerialized = true, DepotPath = DistortionMap }; v.Variant = p;
            }
            if (DistortionScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortionScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortionScale") { IsSerialized = true, Value = (float)DistortionScale }; v.Variant = p;
            }
        }
    }
    public partial class _cyberspace_gradient
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (InitialGradientTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InitialGradientTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InitialGradientTiling") { IsSerialized = true, Value = (float)InitialGradientTiling }; v.Variant = p;
            }
            if (InitialGradientDivisions != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InitialGradientDivisions") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InitialGradientDivisions") { IsSerialized = true, Value = (float)InitialGradientDivisions }; v.Variant = p;
            }
            if (RectangleRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RectangleRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RectangleRatio") { IsSerialized = true, Value = (float)RectangleRatio }; v.Variant = p;
            }
            if (GradientPalette != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientPalette") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GradientPalette") { IsSerialized = true, DepotPath = GradientPalette }; v.Variant = p;
            }
            if (SecondaryGradientPalette != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryGradientPalette") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SecondaryGradientPalette") { IsSerialized = true, DepotPath = SecondaryGradientPalette }; v.Variant = p;
            }
            if (Reveal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Reveal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Reveal") { IsSerialized = true, Value = (float)Reveal }; v.Variant = p;
            }
            if (ReveakMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ReveakMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ReveakMaskContrast") { IsSerialized = true, Value = (float)ReveakMaskContrast }; v.Variant = p;
            }
            if (RevealBiasMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RevealBiasMin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RevealBiasMin") { IsSerialized = true, Value = (float)RevealBiasMin }; v.Variant = p;
            }
            if (RevealBiasMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RevealBiasMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RevealBiasMax") { IsSerialized = true, Value = (float)RevealBiasMax }; v.Variant = p;
            }
            if (ColorBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorBias") { IsSerialized = true, Value = (float)ColorBias }; v.Variant = p;
            }
            if (FloatOrParam != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FloatOrParam") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FloatOrParam") { IsSerialized = true, Value = (float)FloatOrParam }; v.Variant = p;
            }
            if (FloatOrAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FloatOrAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FloatOrAlpha") { IsSerialized = true, Value = (float)FloatOrAlpha }; v.Variant = p;
            }
            if (HSB != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HSB") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "HSB") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)HSB.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)HSB.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)HSB.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)HSB.W };
            }
            if (BottomLinesAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BottomLinesAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BottomLinesAmount") { IsSerialized = true, Value = (float)BottomLinesAmount }; v.Variant = p;
            }
            if (BottomLinesCuttoff != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BottomLinesCuttoff") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BottomLinesCuttoff") { IsSerialized = true, Value = (float)BottomLinesCuttoff }; v.Variant = p;
            }
            if (BottomLinesWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BottomLinesWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BottomLinesWidth") { IsSerialized = true, Value = (float)BottomLinesWidth }; v.Variant = p;
            }
            if (TowardsCameraSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TowardsCameraSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TowardsCameraSpeed") { IsSerialized = true, Value = (float)TowardsCameraSpeed }; v.Variant = p;
            }
        }
    }
    public partial class _cyberspace_teleport_glitch
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DepthOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthOffset") { IsSerialized = true, Value = (float)DepthOffset }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (DistortionMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortionMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DistortionMap") { IsSerialized = true, DepotPath = DistortionMap }; v.Variant = p;
            }
            if (DistortionSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortionSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortionSize") { IsSerialized = true, Value = (float)DistortionSize }; v.Variant = p;
            }
            if (DistortionMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortionMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortionMultiplier") { IsSerialized = true, Value = (float)DistortionMultiplier }; v.Variant = p;
            }
            if (ChangeChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ChangeChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ChangeChance") { IsSerialized = true, Value = (float)ChangeChance }; v.Variant = p;
            }
            if (LinesSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LinesSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LinesSize") { IsSerialized = true, Value = (float)LinesSize }; v.Variant = p;
            }
            if (LinesSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LinesSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LinesSpeed") { IsSerialized = true, Value = (float)LinesSpeed }; v.Variant = p;
            }
            if (LinesAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LinesAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LinesAmount") { IsSerialized = true, Value = (float)LinesAmount }; v.Variant = p;
            }
            if (LinesDistortion != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LinesDistortion") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LinesDistortion") { IsSerialized = true, Value = (float)LinesDistortion }; v.Variant = p;
            }
            if (SampledDistortOFfset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SampledDistortOFfset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SampledDistortOFfset") { IsSerialized = true, Value = (float)SampledDistortOFfset }; v.Variant = p;
            }
            if (SampledDistortSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SampledDistortSize") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "SampledDistortSize") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)SampledDistortSize.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)SampledDistortSize.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)SampledDistortSize.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)SampledDistortSize.W };
            }
            if (ColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMultiplier") { IsSerialized = true, Value = (float)ColorMultiplier }; v.Variant = p;
            }
        }
    }
    public partial class _decal_caustics
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (Distortion != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Distortion") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Distortion") { IsSerialized = true, DepotPath = Distortion }; v.Variant = p;
            }
            if (Contrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Contrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Contrast") { IsSerialized = true, Value = (float)Contrast }; v.Variant = p;
            }
            if (Speed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Speed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Speed") { IsSerialized = true, Value = (float)Speed }; v.Variant = p;
            }
            if (SmallMovementSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SmallMovementSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SmallMovementSpeed") { IsSerialized = true, Value = (float)SmallMovementSpeed }; v.Variant = p;
            }
            if (Spread != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Spread") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Spread") { IsSerialized = true, Value = (float)Spread }; v.Variant = p;
            }
            if (DistortionAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortionAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortionAmount") { IsSerialized = true, Value = (float)DistortionAmount }; v.Variant = p;
            }
            if (DistortionUVScaling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortionUVScaling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortionUVScaling") { IsSerialized = true, Value = (float)DistortionUVScaling }; v.Variant = p;
            }
            if (UVScaling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UVScaling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UVScaling") { IsSerialized = true, Value = (float)UVScaling }; v.Variant = p;
            }
            if (EdgeWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EdgeWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EdgeWidth") { IsSerialized = true, Value = (float)EdgeWidth }; v.Variant = p;
            }
            if (EdgeMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EdgeMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EdgeMultiplier") { IsSerialized = true, Value = (float)EdgeMultiplier }; v.Variant = p;
            }
            if (MaxValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxValue") { IsSerialized = true, Value = (float)MaxValue }; v.Variant = p;
            }
            if (GradientStartPosition != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientStartPosition") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GradientStartPosition") { IsSerialized = true, Value = (float)GradientStartPosition }; v.Variant = p;
            }
            if (GradientLength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientLength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GradientLength") { IsSerialized = true, Value = (float)GradientLength }; v.Variant = p;
            }
        }
    }
    public partial class _decal_glitch
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (GradientMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GradientMap") { IsSerialized = true, DepotPath = GradientMap }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
            if (GlitchScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchScale") { IsSerialized = true, Value = (float)GlitchScale }; v.Variant = p;
            }
            if (GlitchStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchStrength") { IsSerialized = true, Value = (float)GlitchStrength }; v.Variant = p;
            }
            if (GlitchChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchChance") { IsSerialized = true, Value = (float)GlitchChance }; v.Variant = p;
            }
            if (GlitchOffOn != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchOffOn") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchOffOn") { IsSerialized = true, Value = (float)GlitchOffOn }; v.Variant = p;
            }
            if (DissapearingChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DissapearingChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DissapearingChance") { IsSerialized = true, Value = (float)DissapearingChance }; v.Variant = p;
            }
            if (ColorChangeAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorChangeAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorChangeAmount") { IsSerialized = true, Value = (float)ColorChangeAmount }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
        }
    }
    public partial class _decal_glitch_emissive
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (GradientMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GradientMap") { IsSerialized = true, DepotPath = GradientMap }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
            if (GlitchScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchScale") { IsSerialized = true, Value = (float)GlitchScale }; v.Variant = p;
            }
            if (GlitchStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchStrength") { IsSerialized = true, Value = (float)GlitchStrength }; v.Variant = p;
            }
            if (GlitchChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchChance") { IsSerialized = true, Value = (float)GlitchChance }; v.Variant = p;
            }
            if (GlitchOffOn != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchOffOn") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchOffOn") { IsSerialized = true, Value = (float)GlitchOffOn }; v.Variant = p;
            }
            if (DissapearingChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DissapearingChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DissapearingChance") { IsSerialized = true, Value = (float)DissapearingChance }; v.Variant = p;
            }
            if (ColorChangeAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorChangeAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorChangeAmount") { IsSerialized = true, Value = (float)ColorChangeAmount }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _depth_based_sobel
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (ThinLinesThickness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ThinLinesThickness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ThinLinesThickness") { IsSerialized = true, Value = (float)ThinLinesThickness }; v.Variant = p;
            }
            if (ThinLinesDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ThinLinesDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ThinLinesDistance") { IsSerialized = true, Value = (float)ThinLinesDistance }; v.Variant = p;
            }
            if (ThickLinesThickness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ThickLinesThickness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ThickLinesThickness") { IsSerialized = true, Value = (float)ThickLinesThickness }; v.Variant = p;
            }
            if (ThickLinesDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ThickLinesDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ThickLinesDistance") { IsSerialized = true, Value = (float)ThickLinesDistance }; v.Variant = p;
            }
            if (OutlineThickness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OutlineThickness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OutlineThickness") { IsSerialized = true, Value = (float)OutlineThickness }; v.Variant = p;
            }
            if (LinesColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LinesColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "LinesColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)LinesColor.Red }, Green = new CUInt8() { Value = (Byte)LinesColor.Green }, Blue = new CUInt8() { Value = (Byte)LinesColor.Blue }, Alpha = new CUInt8() { Value = (Byte)LinesColor.Alpha } }; v.Variant = p;
            }
            if (Brightness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Brightness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Brightness") { IsSerialized = true, Value = (float)Brightness }; v.Variant = p;
            }
            if (MinDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MinDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MinDistance") { IsSerialized = true, Value = (float)MinDistance }; v.Variant = p;
            }
            if (MaxDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxDistance") { IsSerialized = true, Value = (float)MaxDistance }; v.Variant = p;
            }
            if (MaskSizeX != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskSizeX") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskSizeX") { IsSerialized = true, Value = (float)MaskSizeX }; v.Variant = p;
            }
            if (MaskSizeY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskSizeY") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskSizeY") { IsSerialized = true, Value = (float)MaskSizeY }; v.Variant = p;
            }
            if (SobelThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SobelThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SobelThreshold") { IsSerialized = true, Value = (float)SobelThreshold }; v.Variant = p;
            }
            if (SobelStep != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SobelStep") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SobelStep") { IsSerialized = true, Value = (float)SobelStep }; v.Variant = p;
            }
            if (SobelMinimumChange != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SobelMinimumChange") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SobelMinimumChange") { IsSerialized = true, Value = (float)SobelMinimumChange }; v.Variant = p;
            }
        }
    }
    public partial class _diode_pavements_ui
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Metalness") { IsSerialized = true, Value = (float)Metalness }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (DiodesMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiodesMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiodesMask") { IsSerialized = true, DepotPath = DiodesMask }; v.Variant = p;
            }
            if (SignTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SignTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "SignTexture") { IsSerialized = true, DepotPath = SignTexture }; v.Variant = p;
            }
            if (DiodesTilingAndScrollSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiodesTilingAndScrollSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DiodesTilingAndScrollSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DiodesTilingAndScrollSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DiodesTilingAndScrollSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DiodesTilingAndScrollSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DiodesTilingAndScrollSpeed.W };
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Emissive") { IsSerialized = true, Value = (float)Emissive }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (UseMaskAsAlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseMaskAsAlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseMaskAsAlphaThreshold") { IsSerialized = true, Value = (float)UseMaskAsAlphaThreshold }; v.Variant = p;
            }
            if (UIRenderTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UIRenderTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "UIRenderTexture") { IsSerialized = true, DepotPath = UIRenderTexture }; v.Variant = p;
            }
            if (TexturePartUV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexturePartUV") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexturePartUV") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexturePartUV.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexturePartUV.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexturePartUV.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexturePartUV.W };
            }
            if (RenderTextureScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RenderTextureScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RenderTextureScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RenderTextureScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RenderTextureScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RenderTextureScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RenderTextureScale.W };
            }
            if (VerticalFlipEnabled != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VerticalFlipEnabled") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VerticalFlipEnabled") { IsSerialized = true, Value = (float)VerticalFlipEnabled }; v.Variant = p;
            }
            if (AmountOfGlitch != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AmountOfGlitch") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AmountOfGlitch") { IsSerialized = true, Value = (float)AmountOfGlitch }; v.Variant = p;
            }
            if (GlitchSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchSpeed") { IsSerialized = true, Value = (float)GlitchSpeed }; v.Variant = p;
            }
            if (BaseColorRoughnessTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorRoughnessTiling") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorRoughnessTiling") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorRoughnessTiling.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorRoughnessTiling.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorRoughnessTiling.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorRoughnessTiling.W };
            }
        }
    }
    public partial class _dirt_animated_masked
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
            if (Dirt != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Dirt") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Dirt") { IsSerialized = true, DepotPath = Dirt }; v.Variant = p;
            }
            if (DirtSecond != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtSecond") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DirtSecond") { IsSerialized = true, DepotPath = DirtSecond }; v.Variant = p;
            }
            if (DirtColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DirtColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DirtColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DirtColor.Red }, Green = new CUInt8() { Value = (Byte)DirtColor.Green }, Blue = new CUInt8() { Value = (Byte)DirtColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DirtColor.Alpha } }; v.Variant = p;
            }
            if (Multiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Multiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Multiplier") { IsSerialized = true, Value = (float)Multiplier }; v.Variant = p;
            }
            if (WidthScaling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WidthScaling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WidthScaling") { IsSerialized = true, Value = (float)WidthScaling }; v.Variant = p;
            }
            if (HeightScaling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeightScaling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HeightScaling") { IsSerialized = true, Value = (float)HeightScaling }; v.Variant = p;
            }
            if (RedChannelOrAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RedChannelOrAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RedChannelOrAlpha") { IsSerialized = true, Value = (float)RedChannelOrAlpha }; v.Variant = p;
            }
        }
    }
    public partial class _e3_prototype_mask
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (HeatDistribution != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeatDistribution") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "HeatDistribution") { IsSerialized = true, DepotPath = HeatDistribution }; v.Variant = p;
            }
            if (Temperature != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Temperature") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Temperature") { IsSerialized = true, Value = (float)Temperature }; v.Variant = p;
            }
            if (TemperatureMinimum != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TemperatureMinimum") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TemperatureMinimum") { IsSerialized = true, Value = (float)TemperatureMinimum }; v.Variant = p;
            }
            if (HueShift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HueShift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HueShift") { IsSerialized = true, Value = (float)HueShift }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveExponent") { IsSerialized = true, Value = (float)EmissiveExponent }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (GradientWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GradientWidth") { IsSerialized = true, Value = (float)GradientWidth }; v.Variant = p;
            }
            if (DebugValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DebugValue") { IsSerialized = true, Value = (float)DebugValue }; v.Variant = p;
            }
            if (UseFloatValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseFloatValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseFloatValue") { IsSerialized = true, Value = (float)UseFloatValue }; v.Variant = p;
            }
        }
    }
    public partial class _fake_flare
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (WidthScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WidthScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WidthScale") { IsSerialized = true, Value = (float)WidthScale }; v.Variant = p;
            }
            if (HeightScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeightScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HeightScale") { IsSerialized = true, Value = (float)HeightScale }; v.Variant = p;
            }
            if (Promixity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Promixity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Promixity") { IsSerialized = true, Value = (float)Promixity }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Multiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Multiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Multiplier") { IsSerialized = true, Value = (float)Multiplier }; v.Variant = p;
            }
            if (MultiplierPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultiplierPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MultiplierPower") { IsSerialized = true, Value = (float)MultiplierPower }; v.Variant = p;
            }
        }
    }
    public partial class _fake_flare_simple
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DistanceSizeFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistanceSizeFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistanceSizeFactor") { IsSerialized = true, Value = (float)DistanceSizeFactor }; v.Variant = p;
            }
            if (SizeScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SizeScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SizeScale") { IsSerialized = true, Value = (float)SizeScale }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (RadialOrTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RadialOrTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RadialOrTexture") { IsSerialized = true, Value = (float)RadialOrTexture }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Multiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Multiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Multiplier") { IsSerialized = true, Value = (float)Multiplier }; v.Variant = p;
            }
            if (FalloffPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FalloffPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FalloffPower") { IsSerialized = true, Value = (float)FalloffPower }; v.Variant = p;
            }
            if (MinimumDistanceVisibility != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MinimumDistanceVisibility") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MinimumDistanceVisibility") { IsSerialized = true, Value = (float)MinimumDistanceVisibility }; v.Variant = p;
            }
            if (DistanceVisibilityFadeIn != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistanceVisibilityFadeIn") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistanceVisibilityFadeIn") { IsSerialized = true, Value = (float)DistanceVisibilityFadeIn }; v.Variant = p;
            }
            if (MaximumRangeMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaximumRangeMin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaximumRangeMin") { IsSerialized = true, Value = (float)MaximumRangeMin }; v.Variant = p;
            }
            if (MaximumRangeMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaximumRangeMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaximumRangeMax") { IsSerialized = true, Value = (float)MaximumRangeMax }; v.Variant = p;
            }
            if (BlinkSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkSpeed") { IsSerialized = true, Value = (float)BlinkSpeed }; v.Variant = p;
            }
        }
    }
    public partial class _flat_fog_masked
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (RefractionMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RefractionMask") { IsSerialized = true, DepotPath = RefractionMask }; v.Variant = p;
            }
            if (DebugValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DebugValue") { IsSerialized = true, Value = (float)DebugValue }; v.Variant = p;
            }
            if (Fogginess != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Fogginess") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Fogginess") { IsSerialized = true, Value = (float)Fogginess }; v.Variant = p;
            }
            if (Crackness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Crackness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Crackness") { IsSerialized = true, Value = (float)Crackness }; v.Variant = p;
            }
            if (FogOrRefraction != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FogOrRefraction") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FogOrRefraction") { IsSerialized = true, Value = (float)FogOrRefraction }; v.Variant = p;
            }
            if (CrackColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CrackColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "CrackColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)CrackColor.Red }, Green = new CUInt8() { Value = (Byte)CrackColor.Green }, Blue = new CUInt8() { Value = (Byte)CrackColor.Blue }, Alpha = new CUInt8() { Value = (Byte)CrackColor.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _flat_fog_masked_notxaa
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (RefractionMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RefractionMask") { IsSerialized = true, DepotPath = RefractionMask }; v.Variant = p;
            }
            if (DebugValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DebugValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DebugValue") { IsSerialized = true, Value = (float)DebugValue }; v.Variant = p;
            }
            if (Fogginess != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Fogginess") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Fogginess") { IsSerialized = true, Value = (float)Fogginess }; v.Variant = p;
            }
            if (Crackness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Crackness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Crackness") { IsSerialized = true, Value = (float)Crackness }; v.Variant = p;
            }
            if (FogOrRefraction != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FogOrRefraction") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FogOrRefraction") { IsSerialized = true, Value = (float)FogOrRefraction }; v.Variant = p;
            }
            if (CrackColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "CrackColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "CrackColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)CrackColor.Red }, Green = new CUInt8() { Value = (Byte)CrackColor.Green }, Blue = new CUInt8() { Value = (Byte)CrackColor.Blue }, Alpha = new CUInt8() { Value = (Byte)CrackColor.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _highlight_blocker
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (MeshGrow != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MeshGrow") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MeshGrow") { IsSerialized = true, Value = (float)MeshGrow }; v.Variant = p;
            }
        }
    }
    public partial class _hologram_proxy
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Color") { IsSerialized = true, DepotPath = Color }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (FresnelIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelIntensity") { IsSerialized = true, Value = (float)FresnelIntensity }; v.Variant = p;
            }
            if (FresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelBias") { IsSerialized = true, Value = (float)FresnelBias }; v.Variant = p;
            }
            if (FresnelGamma != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelGamma") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelGamma") { IsSerialized = true, Value = (float)FresnelGamma }; v.Variant = p;
            }
            if (Alpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Alpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Alpha") { IsSerialized = true, Value = (float)Alpha }; v.Variant = p;
            }
            if (DecayStart != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DecayStart") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DecayStart") { IsSerialized = true, Value = (float)DecayStart }; v.Variant = p;
            }
            if (Decay != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Decay") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Decay") { IsSerialized = true, Value = (float)Decay }; v.Variant = p;
            }
        }
    }
    public partial class _holo_mask
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VerticalDivisions != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VerticalDivisions") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VerticalDivisions") { IsSerialized = true, Value = (float)VerticalDivisions }; v.Variant = p;
            }
            if (GlitchChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchChance") { IsSerialized = true, Value = (float)GlitchChance }; v.Variant = p;
            }
            if (GlitchOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchOffset") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchOffset") { IsSerialized = true, Value = (float)GlitchOffset }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (ChangeSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ChangeSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ChangeSpeed") { IsSerialized = true, Value = (float)ChangeSpeed }; v.Variant = p;
            }
            if (HorizontalDivisions != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HorizontalDivisions") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HorizontalDivisions") { IsSerialized = true, Value = (float)HorizontalDivisions }; v.Variant = p;
            }
            if (ScanlineDensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineDensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlineDensity") { IsSerialized = true, Value = (float)ScanlineDensity }; v.Variant = p;
            }
            if (ScanlineMinimum != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineMinimum") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlineMinimum") { IsSerialized = true, Value = (float)ScanlineMinimum }; v.Variant = p;
            }
            if (MinColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MinColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "MinColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)MinColor.Red }, Green = new CUInt8() { Value = (Byte)MinColor.Green }, Blue = new CUInt8() { Value = (Byte)MinColor.Blue }, Alpha = new CUInt8() { Value = (Byte)MinColor.Alpha } }; v.Variant = p;
            }
            if (MaxColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "MaxColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)MaxColor.Red }, Green = new CUInt8() { Value = (Byte)MaxColor.Green }, Blue = new CUInt8() { Value = (Byte)MaxColor.Blue }, Alpha = new CUInt8() { Value = (Byte)MaxColor.Alpha } }; v.Variant = p;
            }
            if (EyesColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EyesColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EyesColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EyesColor.Red }, Green = new CUInt8() { Value = (Byte)EyesColor.Green }, Blue = new CUInt8() { Value = (Byte)EyesColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EyesColor.Alpha } }; v.Variant = p;
            }
            if (BrightnessBoost != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BrightnessBoost") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BrightnessBoost") { IsSerialized = true, Value = (float)BrightnessBoost }; v.Variant = p;
            }
            if (EyesBoost != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EyesBoost") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EyesBoost") { IsSerialized = true, Value = (float)EyesBoost }; v.Variant = p;
            }
            if (AmountOfHorizontalTear != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AmountOfHorizontalTear") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AmountOfHorizontalTear") { IsSerialized = true, Value = (float)AmountOfHorizontalTear }; v.Variant = p;
            }
            if (ULimit != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ULimit") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ULimit") { IsSerialized = true, Value = (float)ULimit }; v.Variant = p;
            }
            if (VLimit != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VLimit") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VLimit") { IsSerialized = true, Value = (float)VLimit }; v.Variant = p;
            }
        }
    }
    public partial class _invisible
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _lightning_plasma
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (UseTimeOrAnimationFrame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseTimeOrAnimationFrame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseTimeOrAnimationFrame") { IsSerialized = true, Value = (float)UseTimeOrAnimationFrame }; v.Variant = p;
            }
            if (DisplaceAlongUV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisplaceAlongUV") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DisplaceAlongUV") { IsSerialized = true, DepotPath = DisplaceAlongUV }; v.Variant = p;
            }
            if (DisplaceAlongUVSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisplaceAlongUVSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisplaceAlongUVSpeed") { IsSerialized = true, Value = (float)DisplaceAlongUVSpeed }; v.Variant = p;
            }
            if (DisplaceAlongUVScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisplaceAlongUVScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisplaceAlongUVScale") { IsSerialized = true, Value = (float)DisplaceAlongUVScale }; v.Variant = p;
            }
            if (DisplaceAlongUVStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisplaceAlongUVStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisplaceAlongUVStrength") { IsSerialized = true, Value = (float)DisplaceAlongUVStrength }; v.Variant = p;
            }
            if (DisplaceAlongUVStrengthPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisplaceAlongUVStrengthPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisplaceAlongUVStrengthPower") { IsSerialized = true, Value = (float)DisplaceAlongUVStrengthPower }; v.Variant = p;
            }
            if (DisplaceAlongUVAdjustWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisplaceAlongUVAdjustWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisplaceAlongUVAdjustWidth") { IsSerialized = true, Value = (float)DisplaceAlongUVAdjustWidth }; v.Variant = p;
            }
            if (DisplaceSeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisplaceSeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisplaceSeed") { IsSerialized = true, Value = (float)DisplaceSeed }; v.Variant = p;
            }
            if (DisplaceSeedSPEED != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisplaceSeedSPEED") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisplaceSeedSPEED") { IsSerialized = true, Value = (float)DisplaceSeedSPEED }; v.Variant = p;
            }
            if (DisplaceSeedSPEEDProbability != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisplaceSeedSPEEDProbability") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisplaceSeedSPEEDProbability") { IsSerialized = true, Value = (float)DisplaceSeedSPEEDProbability }; v.Variant = p;
            }
            if (DisplaceAlongUVOffScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisplaceAlongUVOffScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisplaceAlongUVOffScale") { IsSerialized = true, Value = (float)DisplaceAlongUVOffScale }; v.Variant = p;
            }
            if (DisplaceAlongUVOffSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisplaceAlongUVOffSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisplaceAlongUVOffSpeed") { IsSerialized = true, Value = (float)DisplaceAlongUVOffSpeed }; v.Variant = p;
            }
            if (DisplaceAlongUVOffSTR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DisplaceAlongUVOffSTR") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DisplaceAlongUVOffSTR") { IsSerialized = true, Value = (float)DisplaceAlongUVOffSTR }; v.Variant = p;
            }
            if (WorldNoiseSTR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldNoiseSTR") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WorldNoiseSTR") { IsSerialized = true, Value = (float)WorldNoiseSTR }; v.Variant = p;
            }
            if (WorldNoiseSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldNoiseSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WorldNoiseSize") { IsSerialized = true, Value = (float)WorldNoiseSize }; v.Variant = p;
            }
            if (WorldNoiseSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldNoiseSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WorldNoiseSpeed") { IsSerialized = true, Value = (float)WorldNoiseSpeed }; v.Variant = p;
            }
            if (WorldNoise_Up_extra != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "WorldNoise_Up_extra") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "WorldNoise_Up_extra") { IsSerialized = true, Value = (float)WorldNoise_Up_extra }; v.Variant = p;
            }
            if (SetWorldNoiseToLocal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SetWorldNoiseToLocal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SetWorldNoiseToLocal") { IsSerialized = true, Value = (float)SetWorldNoiseToLocal }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (FlipUVby90deg != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlipUVby90deg") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlipUVby90deg") { IsSerialized = true, Value = (float)FlipUVby90deg }; v.Variant = p;
            }
            if (TemperatureTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TemperatureTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "TemperatureTexture") { IsSerialized = true, DepotPath = TemperatureTexture }; v.Variant = p;
            }
            if (MeshAnimationOnOff != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MeshAnimationOnOff") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MeshAnimationOnOff") { IsSerialized = true, Value = (float)MeshAnimationOnOff }; v.Variant = p;
            }
            if (MeshPlaySpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MeshPlaySpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MeshPlaySpeed") { IsSerialized = true, Value = (float)MeshPlaySpeed }; v.Variant = p;
            }
            if (SubUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVWidth") { IsSerialized = true, Value = (float)SubUVWidth }; v.Variant = p;
            }
            if (SubUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVHeight") { IsSerialized = true, Value = (float)SubUVHeight }; v.Variant = p;
            }
            if (TemperatureTextureScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TemperatureTextureScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TemperatureTextureScale") { IsSerialized = true, Value = (float)TemperatureTextureScale }; v.Variant = p;
            }
            if (TemperatureTextureSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TemperatureTextureSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TemperatureTextureSpeed") { IsSerialized = true, Value = (float)TemperatureTextureSpeed }; v.Variant = p;
            }
            if (Temperature != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Temperature") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Temperature") { IsSerialized = true, Value = (float)Temperature }; v.Variant = p;
            }
            if (TemperaturePow != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TemperaturePow") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TemperaturePow") { IsSerialized = true, Value = (float)TemperaturePow }; v.Variant = p;
            }
            if (TemperatureFlickerSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TemperatureFlickerSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TemperatureFlickerSpeed") { IsSerialized = true, Value = (float)TemperatureFlickerSpeed }; v.Variant = p;
            }
            if (TemperatureFlickerSTR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TemperatureFlickerSTR") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TemperatureFlickerSTR") { IsSerialized = true, Value = (float)TemperatureFlickerSTR }; v.Variant = p;
            }
            if (HueShift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HueShift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HueShift") { IsSerialized = true, Value = (float)HueShift }; v.Variant = p;
            }
            if (HueSaturation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HueSaturation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "HueSaturation") { IsSerialized = true, Value = (float)HueSaturation }; v.Variant = p;
            }
            if (ContactPointRange != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ContactPointRange") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ContactPointRange") { IsSerialized = true, Value = (float)ContactPointRange }; v.Variant = p;
            }
            if (ContactPointSTR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ContactPointSTR") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ContactPointSTR") { IsSerialized = true, Value = (float)ContactPointSTR }; v.Variant = p;
            }
            if (Tint != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tint") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Tint") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Tint.Red }, Green = new CUInt8() { Value = (Byte)Tint.Green }, Blue = new CUInt8() { Value = (Byte)Tint.Blue }, Alpha = new CUInt8() { Value = (Byte)Tint.Alpha } }; v.Variant = p;
            }
            if (SoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftAlpha") { IsSerialized = true, Value = (float)SoftAlpha }; v.Variant = p;
            }
            if (maxAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "maxAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "maxAlpha") { IsSerialized = true, Value = (float)maxAlpha }; v.Variant = p;
            }
            if (DistortTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DistortTexture") { IsSerialized = true, DepotPath = DistortTexture }; v.Variant = p;
            }
            if (DistortAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortAmount") { IsSerialized = true, Value = (float)DistortAmount }; v.Variant = p;
            }
            if (TexCoordDtortScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDtortScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDtortScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDtortScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDtortScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDtortScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDtortScale.W };
            }
            if (TexCoordDistortSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDistortSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDistortSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.W };
            }
        }
    }
    public partial class _light_gradients
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (BottomColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BottomColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BottomColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BottomColor.Red }, Green = new CUInt8() { Value = (Byte)BottomColor.Green }, Blue = new CUInt8() { Value = (Byte)BottomColor.Blue }, Alpha = new CUInt8() { Value = (Byte)BottomColor.Alpha } }; v.Variant = p;
            }
            if (TopColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TopColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TopColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TopColor.Red }, Green = new CUInt8() { Value = (Byte)TopColor.Green }, Blue = new CUInt8() { Value = (Byte)TopColor.Blue }, Alpha = new CUInt8() { Value = (Byte)TopColor.Alpha } }; v.Variant = p;
            }
            if (LerpGradient != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LerpGradient") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LerpGradient") { IsSerialized = true, Value = (float)LerpGradient }; v.Variant = p;
            }
            if (Multiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Multiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Multiplier") { IsSerialized = true, Value = (float)Multiplier }; v.Variant = p;
            }
            if (MinProximityAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MinProximityAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MinProximityAlpha") { IsSerialized = true, Value = (float)MinProximityAlpha }; v.Variant = p;
            }
            if (MaxProximityAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxProximityAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxProximityAlpha") { IsSerialized = true, Value = (float)MaxProximityAlpha }; v.Variant = p;
            }
            if (GroundPosition != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GroundPosition") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GroundPosition") { IsSerialized = true, Value = (float)GroundPosition }; v.Variant = p;
            }
            if (TopPosition != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TopPosition") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TopPosition") { IsSerialized = true, Value = (float)TopPosition }; v.Variant = p;
            }
            if (GradientDirection != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientDirection") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GradientDirection") { IsSerialized = true, Value = (float)GradientDirection }; v.Variant = p;
            }
            if (RoundGradientPosition != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoundGradientPosition") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoundGradientPosition") { IsSerialized = true, Value = (float)RoundGradientPosition }; v.Variant = p;
            }
            if (RoundGradientScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoundGradientScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoundGradientScale") { IsSerialized = true, Value = (float)RoundGradientScale }; v.Variant = p;
            }
            if (DistanceToSurfaceModifier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistanceToSurfaceModifier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistanceToSurfaceModifier") { IsSerialized = true, Value = (float)DistanceToSurfaceModifier }; v.Variant = p;
            }
        }
    }
    public partial class _low_health
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (MainPattern != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainPattern") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MainPattern") { IsSerialized = true, DepotPath = MainPattern }; v.Variant = p;
            }
            if (FluffText != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FluffText") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FluffText") { IsSerialized = true, DepotPath = FluffText }; v.Variant = p;
            }
            if (FluffPattern != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FluffPattern") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "FluffPattern") { IsSerialized = true, DepotPath = FluffPattern }; v.Variant = p;
            }
            if (Rows != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Rows") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Rows") { IsSerialized = true, Value = (float)Rows }; v.Variant = p;
            }
            if (MaximumSliding != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaximumSliding") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaximumSliding") { IsSerialized = true, Value = (float)MaximumSliding }; v.Variant = p;
            }
            if (MaximumDistortion != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaximumDistortion") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaximumDistortion") { IsSerialized = true, Value = (float)MaximumDistortion }; v.Variant = p;
            }
            if (OffsetChangeSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OffsetChangeSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OffsetChangeSpeed") { IsSerialized = true, Value = (float)OffsetChangeSpeed }; v.Variant = p;
            }
            if (OffsetAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OffsetAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OffsetAmount") { IsSerialized = true, Value = (float)OffsetAmount }; v.Variant = p;
            }
            if (PatternTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PatternTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "PatternTiling") { IsSerialized = true, Value = (float)PatternTiling }; v.Variant = p;
            }
            if (PatternVisibility != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PatternVisibility") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "PatternVisibility") { IsSerialized = true, Value = (float)PatternVisibility }; v.Variant = p;
            }
            if (FluffVisibility != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FluffVisibility") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FluffVisibility") { IsSerialized = true, Value = (float)FluffVisibility }; v.Variant = p;
            }
            if (FluffTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FluffTiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FluffTiling") { IsSerialized = true, Value = (float)FluffTiling }; v.Variant = p;
            }
            if (VignetteColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VignetteColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "VignetteColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)VignetteColor.Red }, Green = new CUInt8() { Value = (Byte)VignetteColor.Green }, Blue = new CUInt8() { Value = (Byte)VignetteColor.Blue }, Alpha = new CUInt8() { Value = (Byte)VignetteColor.Alpha } }; v.Variant = p;
            }
            if (FluffTextColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FluffTextColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "FluffTextColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)FluffTextColor.Red }, Green = new CUInt8() { Value = (Byte)FluffTextColor.Green }, Blue = new CUInt8() { Value = (Byte)FluffTextColor.Blue }, Alpha = new CUInt8() { Value = (Byte)FluffTextColor.Alpha } }; v.Variant = p;
            }
            if (VignetteMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VignetteMin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VignetteMin") { IsSerialized = true, Value = (float)VignetteMin }; v.Variant = p;
            }
            if (Multiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Multiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Multiplier") { IsSerialized = true, Value = (float)Multiplier }; v.Variant = p;
            }
            if (VignetteMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VignetteMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VignetteMax") { IsSerialized = true, Value = (float)VignetteMax }; v.Variant = p;
            }
            if (VignetteLength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VignetteLength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VignetteLength") { IsSerialized = true, Value = (float)VignetteLength }; v.Variant = p;
            }
            if (VignetteSteps != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VignetteSteps") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VignetteSteps") { IsSerialized = true, Value = (float)VignetteSteps }; v.Variant = p;
            }
            if (VignetteContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VignetteContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VignetteContrast") { IsSerialized = true, Value = (float)VignetteContrast }; v.Variant = p;
            }
            if (FinalContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FinalContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FinalContrast") { IsSerialized = true, Value = (float)FinalContrast }; v.Variant = p;
            }
            if (LinesMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LinesMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LinesMultiplier") { IsSerialized = true, Value = (float)LinesMultiplier }; v.Variant = p;
            }
        }
    }
    public partial class _mesh_decal__blackbody
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VertexOffsetFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VertexOffsetFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VertexOffsetFactor") { IsSerialized = true, Value = (float)VertexOffsetFactor }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (HeatDistribution != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeatDistribution") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "HeatDistribution") { IsSerialized = true, DepotPath = HeatDistribution }; v.Variant = p;
            }
            if (HeatTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HeatTiling") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "HeatTiling") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)HeatTiling.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)HeatTiling.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)HeatTiling.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)HeatTiling.W };
            }
            if (Temperature != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Temperature") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Temperature") { IsSerialized = true, Value = (float)Temperature }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (MaskMinimum != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskMinimum") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskMinimum") { IsSerialized = true, Value = (float)MaskMinimum }; v.Variant = p;
            }
            if (HSV_Mod != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HSV_Mod") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "HSV_Mod") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)HSV_Mod.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)HSV_Mod.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)HSV_Mod.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)HSV_Mod.W };
            }
            if (UseFloatParam != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseFloatParam") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseFloatParam") { IsSerialized = true, Value = (float)UseFloatParam }; v.Variant = p;
            }
            if (EmissiveAlphaContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveAlphaContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveAlphaContrast") { IsSerialized = true, Value = (float)EmissiveAlphaContrast }; v.Variant = p;
            }
        }
    }
    public partial class _metal_base_scrolling
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Metalness") { IsSerialized = true, Value = (float)Metalness }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (Bright != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Bright") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Bright") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Bright.Red }, Green = new CUInt8() { Value = (Byte)Bright.Green }, Blue = new CUInt8() { Value = (Byte)Bright.Blue }, Alpha = new CUInt8() { Value = (Byte)Bright.Alpha } }; v.Variant = p;
            }
            if (Dark != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Dark") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Dark") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Dark.Red }, Green = new CUInt8() { Value = (Byte)Dark.Green }, Blue = new CUInt8() { Value = (Byte)Dark.Blue }, Alpha = new CUInt8() { Value = (Byte)Dark.Alpha } }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
            if (MaskTilingAndScrolling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTilingAndScrolling") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskTilingAndScrolling") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskTilingAndScrolling.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskTilingAndScrolling.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskTilingAndScrolling.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskTilingAndScrolling.W };
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
        }
    }
    public partial class _multilayer_blackbody_inject
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Emissive") { IsSerialized = true, Value = (float)Emissive }; v.Variant = p;
            }
            if (Temperature != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Temperature") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Temperature") { IsSerialized = true, Value = (float)Temperature }; v.Variant = p;
            }
            if (MaximumTemperature != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaximumTemperature") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaximumTemperature") { IsSerialized = true, Value = (float)MaximumTemperature }; v.Variant = p;
            }
            if (ColorExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorExponent") { IsSerialized = true, Value = (float)ColorExponent }; v.Variant = p;
            }
            if (Debug != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Debug") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Debug") { IsSerialized = true, Value = (float)Debug }; v.Variant = p;
            }
            if (FireHSV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FireHSV") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "FireHSV") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)FireHSV.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)FireHSV.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)FireHSV.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)FireHSV.W };
            }
            if (PoisonHSV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PoisonHSV") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "PoisonHSV") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)PoisonHSV.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)PoisonHSV.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)PoisonHSV.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)PoisonHSV.W };
            }
            if (ElectricHSV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ElectricHSV") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "ElectricHSV") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)ElectricHSV.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)ElectricHSV.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)ElectricHSV.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)ElectricHSV.W };
            }
            if (GlobalNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlobalNormal") { IsSerialized = true, DepotPath = GlobalNormal }; v.Variant = p;
            }
            if (DamageTypeRGBMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DamageTypeRGBMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DamageTypeRGBMask") { IsSerialized = true, DepotPath = DamageTypeRGBMask }; v.Variant = p;
            }
            if (DamageTypeNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DamageTypeNoise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DamageTypeNoise") { IsSerialized = true, DepotPath = DamageTypeNoise }; v.Variant = p;
            }
            if (DamageTypeNoiseIntesityAdd != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DamageTypeNoiseIntesityAdd") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DamageTypeNoiseIntesityAdd") { IsSerialized = true, Value = (float)DamageTypeNoiseIntesityAdd }; v.Variant = p;
            }
            if (DamageTypeNoiseUV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DamageTypeNoiseUV") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DamageTypeNoiseUV") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DamageTypeNoiseUV.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DamageTypeNoiseUV.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DamageTypeNoiseUV.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DamageTypeNoiseUV.W };
            }
            if (MultilayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Mask>(cr2w, v, "MultilayerMask") { IsSerialized = true, DepotPath = MultilayerMask }; v.Variant = p;
            }
            if (MultilayerSetup != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerSetup") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Setup>(cr2w, v, "MultilayerSetup") { IsSerialized = true, DepotPath = MultilayerSetup }; v.Variant = p;
            }
            if (MaskAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskAtlas") { IsSerialized = true, DepotPath = MaskAtlas }; v.Variant = p;
            }
            if (LayersStartIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersStartIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersStartIndex") { IsSerialized = true, Value = (float)LayersStartIndex }; v.Variant = p;
            }
            if (SurfaceTexAspectRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceTexAspectRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceTexAspectRatio") { IsSerialized = true, Value = (float)SurfaceTexAspectRatio }; v.Variant = p;
            }
            if (MaskToTileScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskToTileScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskToTileScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskToTileScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskToTileScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskToTileScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskToTileScale.W };
            }
            if (MaskTileSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTileSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskTileSize") { IsSerialized = true, Value = (float)MaskTileSize }; v.Variant = p;
            }
            if (MaskAtlasDims != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlasDims") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskAtlasDims") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskAtlasDims.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskAtlasDims.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskAtlasDims.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskAtlasDims.W };
            }
            if (MaskBaseResolution != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskBaseResolution") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskBaseResolution") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskBaseResolution.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskBaseResolution.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskBaseResolution.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskBaseResolution.W };
            }
            if (SetupLayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SetupLayerMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SetupLayerMask") { IsSerialized = true, Value = (float)SetupLayerMask }; v.Variant = p;
            }
        }
    }
    public partial class _nanowire_string
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Thickness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Thickness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Thickness") { IsSerialized = true, Value = (float)Thickness }; v.Variant = p;
            }
            if (NoiseAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseAmount") { IsSerialized = true, Value = (float)NoiseAmount }; v.Variant = p;
            }
            if (NoiseScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseScale") { IsSerialized = true, Value = (float)NoiseScale }; v.Variant = p;
            }
            if (MaxVelocity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxVelocity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxVelocity") { IsSerialized = true, Value = (float)MaxVelocity }; v.Variant = p;
            }
            if (MaxVelocityExponent != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxVelocityExponent") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxVelocityExponent") { IsSerialized = true, Value = (float)MaxVelocityExponent }; v.Variant = p;
            }
            if (StartGradient != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "StartGradient") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "StartGradient") { IsSerialized = true, Value = (float)StartGradient }; v.Variant = p;
            }
            if (GradientWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GradientWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GradientWidth") { IsSerialized = true, Value = (float)GradientWidth }; v.Variant = p;
            }
            if (MaxDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxDistance") { IsSerialized = true, Value = (float)MaxDistance }; v.Variant = p;
            }
            if (MainColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "MainColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)MainColor.Red }, Green = new CUInt8() { Value = (Byte)MainColor.Green }, Blue = new CUInt8() { Value = (Byte)MainColor.Blue }, Alpha = new CUInt8() { Value = (Byte)MainColor.Alpha } }; v.Variant = p;
            }
            if (NormalMap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalMap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalMap") { IsSerialized = true, DepotPath = NormalMap }; v.Variant = p;
            }
            if (MaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskTexture") { IsSerialized = true, DepotPath = MaskTexture }; v.Variant = p;
            }
            if (NormalTiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTiling") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NormalTiling") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NormalTiling.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NormalTiling.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NormalTiling.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NormalTiling.W };
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Metalness") { IsSerialized = true, Value = (float)Metalness }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (Temperature != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Temperature") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Temperature") { IsSerialized = true, Value = (float)Temperature }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (MinimumEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MinimumEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MinimumEmissive") { IsSerialized = true, Value = (float)MinimumEmissive }; v.Variant = p;
            }
            if (EmissiveMaskPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveMaskPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveMaskPower") { IsSerialized = true, Value = (float)EmissiveMaskPower }; v.Variant = p;
            }
            if (TurnOffBrightness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TurnOffBrightness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TurnOffBrightness") { IsSerialized = true, Value = (float)TurnOffBrightness }; v.Variant = p;
            }
            if (BlinkSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkSpeed") { IsSerialized = true, Value = (float)BlinkSpeed }; v.Variant = p;
            }
            if (BlinkWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkWidth") { IsSerialized = true, Value = (float)BlinkWidth }; v.Variant = p;
            }
            if (BlinkMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkMultiplier") { IsSerialized = true, Value = (float)BlinkMultiplier }; v.Variant = p;
            }
            if (BlinkOffMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BlinkOffMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BlinkOffMultiplier") { IsSerialized = true, Value = (float)BlinkOffMultiplier }; v.Variant = p;
            }
            if (HSVMod != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "HSVMod") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "HSVMod") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)HSVMod.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)HSVMod.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)HSVMod.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)HSVMod.W };
            }
        }
    }
    public partial class _oda_helm
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (Hologram != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Hologram") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Hologram") { IsSerialized = true, DepotPath = Hologram }; v.Variant = p;
            }
            if (NormalRoughnessMetalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalRoughnessMetalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalRoughnessMetalness") { IsSerialized = true, DepotPath = NormalRoughnessMetalness }; v.Variant = p;
            }
            if (ScanlineTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "ScanlineTexture") { IsSerialized = true, DepotPath = ScanlineTexture }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVGlitched != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVGlitched") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVGlitched") { IsSerialized = true, Value = (float)EmissiveEVGlitched }; v.Variant = p;
            }
            if (DotPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotPower") { IsSerialized = true, Value = (float)DotPower }; v.Variant = p;
            }
            if (SecondaryDotPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryDotPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SecondaryDotPower") { IsSerialized = true, Value = (float)SecondaryDotPower }; v.Variant = p;
            }
            if (LayersSeparation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersSeparation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersSeparation") { IsSerialized = true, Value = (float)LayersSeparation }; v.Variant = p;
            }
            if (LayersIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersIntensity") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "LayersIntensity") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)LayersIntensity.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)LayersIntensity.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)LayersIntensity.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)LayersIntensity.W };
            }
            if (ScanlineTilingAndSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlineTilingAndSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "ScanlineTilingAndSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)ScanlineTilingAndSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)ScanlineTilingAndSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)ScanlineTilingAndSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)ScanlineTilingAndSpeed.W };
            }
            if (ScanlinesIntensity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScanlinesIntensity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ScanlinesIntensity") { IsSerialized = true, Value = (float)ScanlinesIntensity }; v.Variant = p;
            }
            if (NoiseScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NoiseScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NoiseScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NoiseScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NoiseScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NoiseScale.W };
            }
            if (PrimaryColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "PrimaryColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "PrimaryColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)PrimaryColor.Red }, Green = new CUInt8() { Value = (Byte)PrimaryColor.Green }, Blue = new CUInt8() { Value = (Byte)PrimaryColor.Blue }, Alpha = new CUInt8() { Value = (Byte)PrimaryColor.Alpha } }; v.Variant = p;
            }
            if (SecondaryColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SecondaryColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "SecondaryColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)SecondaryColor.Red }, Green = new CUInt8() { Value = (Byte)SecondaryColor.Green }, Blue = new CUInt8() { Value = (Byte)SecondaryColor.Blue }, Alpha = new CUInt8() { Value = (Byte)SecondaryColor.Alpha } }; v.Variant = p;
            }
            if (BackgroundColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BackgroundColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BackgroundColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BackgroundColor.Red }, Green = new CUInt8() { Value = (Byte)BackgroundColor.Green }, Blue = new CUInt8() { Value = (Byte)BackgroundColor.Blue }, Alpha = new CUInt8() { Value = (Byte)BackgroundColor.Alpha } }; v.Variant = p;
            }
            if (NoiseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "NoiseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)NoiseColor.Red }, Green = new CUInt8() { Value = (Byte)NoiseColor.Green }, Blue = new CUInt8() { Value = (Byte)NoiseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)NoiseColor.Alpha } }; v.Variant = p;
            }
            if (NormalOrBroken != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalOrBroken") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalOrBroken") { IsSerialized = true, Value = (float)NormalOrBroken }; v.Variant = p;
            }
        }
    }
    public partial class _rift_noise
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (EmissiveEVMin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVMin") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVMin") { IsSerialized = true, Value = (float)EmissiveEVMin }; v.Variant = p;
            }
            if (EmissiveEVMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVMax") { IsSerialized = true, Value = (float)EmissiveEVMax }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (EmissiveMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "EmissiveMask") { IsSerialized = true, DepotPath = EmissiveMask }; v.Variant = p;
            }
            if (Dot != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Dot") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Dot") { IsSerialized = true, DepotPath = Dot }; v.Variant = p;
            }
            if (Noise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Noise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Noise") { IsSerialized = true, DepotPath = Noise }; v.Variant = p;
            }
            if (NoiseSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseSpeed") { IsSerialized = true, Value = (float)NoiseSpeed }; v.Variant = p;
            }
            if (NoiseScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NoiseScale") { IsSerialized = true, Value = (float)NoiseScale }; v.Variant = p;
            }
            if (NoiseScaleXY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NoiseScaleXY") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NoiseScaleXY") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NoiseScaleXY.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NoiseScaleXY.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NoiseScaleXY.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NoiseScaleXY.W };
            }
            if (DistanceNoise != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistanceNoise") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DistanceNoise") { IsSerialized = true, DepotPath = DistanceNoise }; v.Variant = p;
            }
            if (DistanceNoiseScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistanceNoiseScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistanceNoiseScale") { IsSerialized = true, Value = (float)DistanceNoiseScale }; v.Variant = p;
            }
            if (DistanceNoiseScaleXY != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistanceNoiseScaleXY") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DistanceNoiseScaleXY") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DistanceNoiseScaleXY.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DistanceNoiseScaleXY.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DistanceNoiseScaleXY.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DistanceNoiseScaleXY.W };
            }
            if (DistanceNoiseAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistanceNoiseAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistanceNoiseAmount") { IsSerialized = true, Value = (float)DistanceNoiseAmount }; v.Variant = p;
            }
            if (DistPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistPower") { IsSerialized = true, Value = (float)DistPower }; v.Variant = p;
            }
            if (DotsLift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsLift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotsLift") { IsSerialized = true, Value = (float)DotsLift }; v.Variant = p;
            }
            if (DotsMax != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DotsMax") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DotsMax") { IsSerialized = true, Value = (float)DotsMax }; v.Variant = p;
            }
            if (DistanceNoiseSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistanceNoiseSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistanceNoiseSpeed") { IsSerialized = true, Value = (float)DistanceNoiseSpeed }; v.Variant = p;
            }
            if (MaxDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaxDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaxDistance") { IsSerialized = true, Value = (float)MaxDistance }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
        }
    }
    public partial class _screen_wave
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (DistortAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortAmount") { IsSerialized = true, Value = (float)DistortAmount }; v.Variant = p;
            }
        }
    }
    public partial class _simple_fog
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Brightness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Brightness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Brightness") { IsSerialized = true, Value = (float)Brightness }; v.Variant = p;
            }
            if (MinimumVisibilityDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MinimumVisibilityDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MinimumVisibilityDistance") { IsSerialized = true, Value = (float)MinimumVisibilityDistance }; v.Variant = p;
            }
            if (VisibilityFadeIn != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VisibilityFadeIn") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VisibilityFadeIn") { IsSerialized = true, Value = (float)VisibilityFadeIn }; v.Variant = p;
            }
            if (TextureFalloff != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TextureFalloff") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "TextureFalloff") { IsSerialized = true, Value = (float)TextureFalloff }; v.Variant = p;
            }
            if (MinimumBottonDistance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MinimumBottonDistance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MinimumBottonDistance") { IsSerialized = true, Value = (float)MinimumBottonDistance }; v.Variant = p;
            }
            if (BottomVisibilityFadeIn != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BottomVisibilityFadeIn") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BottomVisibilityFadeIn") { IsSerialized = true, Value = (float)BottomVisibilityFadeIn }; v.Variant = p;
            }
            if (DepthDivision != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthDivision") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthDivision") { IsSerialized = true, Value = (float)DepthDivision }; v.Variant = p;
            }
            if (DepthContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DepthContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DepthContrast") { IsSerialized = true, Value = (float)DepthContrast }; v.Variant = p;
            }
            if (SoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftAlpha") { IsSerialized = true, Value = (float)SoftAlpha }; v.Variant = p;
            }
            if (SteepAngleBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SteepAngleBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SteepAngleBlend") { IsSerialized = true, Value = (float)SteepAngleBlend }; v.Variant = p;
            }
            if (SteepAngleBlendLength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SteepAngleBlendLength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SteepAngleBlendLength") { IsSerialized = true, Value = (float)SteepAngleBlendLength }; v.Variant = p;
            }
        }
    }
    public partial class _simple_refraction_mask
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (RefractionStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionStrength") { IsSerialized = true, Value = (float)RefractionStrength }; v.Variant = p;
            }
            if (RefractionTextureOffset != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionTextureOffset") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RefractionTextureOffset") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RefractionTextureOffset.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RefractionTextureOffset.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RefractionTextureOffset.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RefractionTextureOffset.W };
            }
            if (RefractionTextureSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionTextureSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RefractionTextureSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RefractionTextureSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RefractionTextureSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RefractionTextureSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RefractionTextureSpeed.W };
            }
            if (RefractionTextureScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionTextureScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "RefractionTextureScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)RefractionTextureScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)RefractionTextureScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)RefractionTextureScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)RefractionTextureScale.W };
            }
            if (Refraction != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Refraction") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Refraction") { IsSerialized = true, DepotPath = Refraction }; v.Variant = p;
            }
            if (UseAlphaMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseAlphaMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseAlphaMask") { IsSerialized = true, Value = (float)UseAlphaMask }; v.Variant = p;
            }
            if (AlphaMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "AlphaMask") { IsSerialized = true, DepotPath = AlphaMask }; v.Variant = p;
            }
            if (UseDepth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseDepth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseDepth") { IsSerialized = true, Value = (float)UseDepth }; v.Variant = p;
            }
            if (SlowFactor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SlowFactor") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SlowFactor") { IsSerialized = true, Value = (float)SlowFactor }; v.Variant = p;
            }
            if (RefractionStrengthSlowTime != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionStrengthSlowTime") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionStrengthSlowTime") { IsSerialized = true, Value = (float)RefractionStrengthSlowTime }; v.Variant = p;
            }
            if (MaskGradientPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskGradientPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskGradientPower") { IsSerialized = true, Value = (float)MaskGradientPower }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (SoftAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftAlpha") { IsSerialized = true, Value = (float)SoftAlpha }; v.Variant = p;
            }
        }
    }
    public partial class _transparent_flowmap
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (Flowmap != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Flowmap") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Flowmap") { IsSerialized = true, DepotPath = Flowmap }; v.Variant = p;
            }
            if (FlowMapStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlowMapStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlowMapStrength") { IsSerialized = true, Value = (float)FlowMapStrength }; v.Variant = p;
            }
            if (FlowSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlowSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlowSpeed") { IsSerialized = true, Value = (float)FlowSpeed }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (Multiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Multiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Multiplier") { IsSerialized = true, Value = (float)Multiplier }; v.Variant = p;
            }
            if (Power != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Power") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Power") { IsSerialized = true, Value = (float)Power }; v.Variant = p;
            }
        }
    }
    public partial class _transparent_liquid_notxaa
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (SurfaceMetalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceMetalness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceMetalness") { IsSerialized = true, Value = (float)SurfaceMetalness }; v.Variant = p;
            }
            if (ScatteringColorThin != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatteringColorThin") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ScatteringColorThin") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ScatteringColorThin.Red }, Green = new CUInt8() { Value = (Byte)ScatteringColorThin.Green }, Blue = new CUInt8() { Value = (Byte)ScatteringColorThin.Blue }, Alpha = new CUInt8() { Value = (Byte)ScatteringColorThin.Alpha } }; v.Variant = p;
            }
            if (ScatteringColorThick != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ScatteringColorThick") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ScatteringColorThick") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ScatteringColorThick.Red }, Green = new CUInt8() { Value = (Byte)ScatteringColorThick.Green }, Blue = new CUInt8() { Value = (Byte)ScatteringColorThick.Blue }, Alpha = new CUInt8() { Value = (Byte)ScatteringColorThick.Alpha } }; v.Variant = p;
            }
            if (Albedo != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Albedo") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Albedo") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Albedo.Red }, Green = new CUInt8() { Value = (Byte)Albedo.Green }, Blue = new CUInt8() { Value = (Byte)Albedo.Blue }, Alpha = new CUInt8() { Value = (Byte)Albedo.Alpha } }; v.Variant = p;
            }
            if (IOR != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "IOR") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "IOR") { IsSerialized = true, Value = (float)IOR }; v.Variant = p;
            }
            if (FresnelBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FresnelBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FresnelBias") { IsSerialized = true, Value = (float)FresnelBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Roughness") { IsSerialized = true, Value = (float)Roughness }; v.Variant = p;
            }
            if (SpecularStrengthMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SpecularStrengthMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SpecularStrengthMultiplier") { IsSerialized = true, Value = (float)SpecularStrengthMultiplier }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (MaskOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskOpacity") { IsSerialized = true, Value = (float)MaskOpacity }; v.Variant = p;
            }
            if (ThicknessMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ThicknessMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ThicknessMultiplier") { IsSerialized = true, Value = (float)ThicknessMultiplier }; v.Variant = p;
            }
            if (SubUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVWidth") { IsSerialized = true, Value = (float)SubUVWidth }; v.Variant = p;
            }
            if (SubUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVHeight") { IsSerialized = true, Value = (float)SubUVHeight }; v.Variant = p;
            }
            if (InterpolateFrames != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "InterpolateFrames") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "InterpolateFrames") { IsSerialized = true, Value = (float)InterpolateFrames }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (NormalTilingAndScrolling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTilingAndScrolling") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NormalTilingAndScrolling") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NormalTilingAndScrolling.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NormalTilingAndScrolling.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NormalTilingAndScrolling.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NormalTilingAndScrolling.W };
            }
            if (Distort != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Distort") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Distort") { IsSerialized = true, DepotPath = Distort }; v.Variant = p;
            }
            if (DistortAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortAmount") { IsSerialized = true, Value = (float)DistortAmount }; v.Variant = p;
            }
            if (DistortTilingAndScrolling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortTilingAndScrolling") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "DistortTilingAndScrolling") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)DistortTilingAndScrolling.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)DistortTilingAndScrolling.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)DistortTilingAndScrolling.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)DistortTilingAndScrolling.W };
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
            if (EnableRowAnimation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRowAnimation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRowAnimation") { IsSerialized = true, Value = (float)EnableRowAnimation }; v.Variant = p;
            }
            if (UseOnStaticMeshes != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseOnStaticMeshes") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseOnStaticMeshes") { IsSerialized = true, Value = (float)UseOnStaticMeshes }; v.Variant = p;
            }
        }
    }
    public partial class _world_to_screen_glitch
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (OffsetAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "OffsetAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "OffsetAmount") { IsSerialized = true, Value = (float)OffsetAmount }; v.Variant = p;
            }
            if (Spread != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Spread") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Spread") { IsSerialized = true, Value = (float)Spread }; v.Variant = p;
            }
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (DistortionAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortionAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortionAmount") { IsSerialized = true, Value = (float)DistortionAmount }; v.Variant = p;
            }
            if (Divisions != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Divisions") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Divisions") { IsSerialized = true, Value = (float)Divisions }; v.Variant = p;
            }
            if (GlitchChance != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchChance") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchChance") { IsSerialized = true, Value = (float)GlitchChance }; v.Variant = p;
            }
            if (GlitchSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlitchSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlitchSpeed") { IsSerialized = true, Value = (float)GlitchSpeed }; v.Variant = p;
            }
            if (GlowMultipier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlowMultipier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "GlowMultipier") { IsSerialized = true, Value = (float)GlowMultipier }; v.Variant = p;
            }
            if (DistortGlitchDivisions != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortGlitchDivisions") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortGlitchDivisions") { IsSerialized = true, Value = (float)DistortGlitchDivisions }; v.Variant = p;
            }
            if (DistortGlitchSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortGlitchSpeed") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortGlitchSpeed") { IsSerialized = true, Value = (float)DistortGlitchSpeed }; v.Variant = p;
            }
            if (MidMaskWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MidMaskWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MidMaskWidth") { IsSerialized = true, Value = (float)MidMaskWidth }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
        }
    }
    public partial class _hit_proxy
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _lod_coloring
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _overdraw
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _overdraw_seethrough
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _selection
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _uv_density
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _wireframe
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _editor_mlmask_preview
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (MultilayerMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MultilayerMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<Multilayer_Mask>(cr2w, v, "MultilayerMask") { IsSerialized = true, DepotPath = MultilayerMask }; v.Variant = p;
            }
            if (MaskAtlas != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlas") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MaskAtlas") { IsSerialized = true, DepotPath = MaskAtlas }; v.Variant = p;
            }
            if (LayersStartIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayersStartIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayersStartIndex") { IsSerialized = true, Value = (float)LayersStartIndex }; v.Variant = p;
            }
            if (SurfaceTexAspectRatio != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceTexAspectRatio") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceTexAspectRatio") { IsSerialized = true, Value = (float)SurfaceTexAspectRatio }; v.Variant = p;
            }
            if (MaskToTileScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskToTileScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskToTileScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskToTileScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskToTileScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskToTileScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskToTileScale.W };
            }
            if (MaskTileSize != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskTileSize") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MaskTileSize") { IsSerialized = true, Value = (float)MaskTileSize }; v.Variant = p;
            }
            if (MaskAtlasDims != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskAtlasDims") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskAtlasDims") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskAtlasDims.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskAtlasDims.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskAtlasDims.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskAtlasDims.W };
            }
            if (MaskBaseResolution != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MaskBaseResolution") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "MaskBaseResolution") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)MaskBaseResolution.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)MaskBaseResolution.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)MaskBaseResolution.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)MaskBaseResolution.W };
            }
            if (EditorMaskLayerIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EditorMaskLayerIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EditorMaskLayerIndex") { IsSerialized = true, Value = (float)EditorMaskLayerIndex }; v.Variant = p;
            }
            if (EditorVisualizationModeIndex != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EditorVisualizationModeIndex") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EditorVisualizationModeIndex") { IsSerialized = true, Value = (float)EditorVisualizationModeIndex }; v.Variant = p;
            }
            if (EditorShowValue != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EditorShowValue") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EditorShowValue") { IsSerialized = true, Value = (float)EditorShowValue }; v.Variant = p;
            }
            if (EditorCursorPosition != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EditorCursorPosition") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "EditorCursorPosition") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)EditorCursorPosition.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)EditorCursorPosition.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)EditorCursorPosition.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)EditorCursorPosition.W };
            }
        }
    }
    public partial class _editor_mltemplate_preview
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (ColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "ColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)ColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)ColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)ColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)ColorScale.W };
            }
            if (NormalScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalScale") { IsSerialized = true, Value = (float)NormalScale }; v.Variant = p;
            }
            if (RoughnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughnessTexture") { IsSerialized = true, DepotPath = RoughnessTexture }; v.Variant = p;
            }
            if (MetalnessScaleIn != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScaleIn") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScaleIn") { IsSerialized = true, Value = (float)MetalnessScaleIn }; v.Variant = p;
            }
            if (MetalnessBiasIn != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBiasIn") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBiasIn") { IsSerialized = true, Value = (float)MetalnessBiasIn }; v.Variant = p;
            }
            if (RoughnessScaleIn != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScaleIn") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScaleIn") { IsSerialized = true, Value = (float)RoughnessScaleIn }; v.Variant = p;
            }
            if (RoughnessBiasIn != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBiasIn") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBiasIn") { IsSerialized = true, Value = (float)RoughnessBiasIn }; v.Variant = p;
            }
            if (MetalnessScaleOut != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScaleOut") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScaleOut") { IsSerialized = true, Value = (float)MetalnessScaleOut }; v.Variant = p;
            }
            if (MetalnessBiasOut != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBiasOut") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBiasOut") { IsSerialized = true, Value = (float)MetalnessBiasOut }; v.Variant = p;
            }
            if (RoughnessScaleOut != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScaleOut") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScaleOut") { IsSerialized = true, Value = (float)RoughnessScaleOut }; v.Variant = p;
            }
            if (RoughnessBiasOut != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBiasOut") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBiasOut") { IsSerialized = true, Value = (float)RoughnessBiasOut }; v.Variant = p;
            }
            if (ColorMaskScaleIn != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMaskScaleIn") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMaskScaleIn") { IsSerialized = true, Value = (float)ColorMaskScaleIn }; v.Variant = p;
            }
            if (ColorMaskBiasIn != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMaskBiasIn") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMaskBiasIn") { IsSerialized = true, Value = (float)ColorMaskBiasIn }; v.Variant = p;
            }
            if (ColorMaskScaleOut != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMaskScaleOut") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMaskScaleOut") { IsSerialized = true, Value = (float)ColorMaskScaleOut }; v.Variant = p;
            }
            if (ColorMaskBiasOut != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMaskBiasOut") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMaskBiasOut") { IsSerialized = true, Value = (float)ColorMaskBiasOut }; v.Variant = p;
            }
            if (MetalnessTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MetalnessTexture") { IsSerialized = true, DepotPath = MetalnessTexture }; v.Variant = p;
            }
            if (Tiling != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Tiling") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Tiling") { IsSerialized = true, Value = (float)Tiling }; v.Variant = p;
            }
        }
    }
    public partial class _gi_backface_debug
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _multilayered_baked
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (SurfaceID != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SurfaceID") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SurfaceID") { IsSerialized = true, Value = (float)SurfaceID }; v.Variant = p;
            }
            if (Indirection != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Indirection") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Indirection") { IsSerialized = true, DepotPath = Indirection }; v.Variant = p;
            }
            if (BaseColorRough != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorRough") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColorRough") { IsSerialized = true, DepotPath = BaseColorRough }; v.Variant = p;
            }
            if (NormalMetal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalMetal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalMetal") { IsSerialized = true, DepotPath = NormalMetal }; v.Variant = p;
            }
        }
    }
    public partial class _mikoshi_fullscr_transition
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
        }
    }
    public partial class _decal
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseTextureAsMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTextureAsMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseTextureAsMaskTexture") { IsSerialized = true, Value = (float)DiffuseTextureAsMaskTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
        }
    }
    public partial class _decal_normal
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (DiffuseTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "DiffuseTexture") { IsSerialized = true, DepotPath = DiffuseTexture }; v.Variant = p;
            }
            if (DiffuseTextureAsMaskTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseTextureAsMaskTexture") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DiffuseTextureAsMaskTexture") { IsSerialized = true, Value = (float)DiffuseTextureAsMaskTexture }; v.Variant = p;
            }
            if (NormalTexture != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalTexture") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "NormalTexture") { IsSerialized = true, DepotPath = NormalTexture }; v.Variant = p;
            }
            if (DiffuseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DiffuseColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "DiffuseColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)DiffuseColor.Red }, Green = new CUInt8() { Value = (Byte)DiffuseColor.Green }, Blue = new CUInt8() { Value = (Byte)DiffuseColor.Blue }, Alpha = new CUInt8() { Value = (Byte)DiffuseColor.Alpha } }; v.Variant = p;
            }
            if (AlphaMaskContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMaskContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaMaskContrast") { IsSerialized = true, Value = (float)AlphaMaskContrast }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (RoughnessMetalnessAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessMetalnessAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessMetalnessAlpha") { IsSerialized = true, Value = (float)RoughnessMetalnessAlpha }; v.Variant = p;
            }
            if (SubUVx != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVx") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVx") { IsSerialized = true, Value = (float)SubUVx }; v.Variant = p;
            }
            if (SubUVy != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVy") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVy") { IsSerialized = true, Value = (float)SubUVy }; v.Variant = p;
            }
            if (Frame != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Frame") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Frame") { IsSerialized = true, Value = (float)Frame }; v.Variant = p;
            }
        }
    }
    public partial class _pbr_layer
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (Mask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Mask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Mask") { IsSerialized = true, DepotPath = Mask }; v.Variant = p;
            }
            if (GlobalNormal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "GlobalNormal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "GlobalNormal") { IsSerialized = true, DepotPath = GlobalNormal }; v.Variant = p;
            }
            if (MicroBlends != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MicroBlends") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "MicroBlends") { IsSerialized = true, DepotPath = MicroBlends }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (RoughMetalBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughMetalBlend") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "RoughMetalBlend") { IsSerialized = true, DepotPath = RoughMetalBlend }; v.Variant = p;
            }
            if (TintColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TintColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "TintColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)TintColor.Red }, Green = new CUInt8() { Value = (Byte)TintColor.Green }, Blue = new CUInt8() { Value = (Byte)TintColor.Blue }, Alpha = new CUInt8() { Value = (Byte)TintColor.Alpha } }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
            if (MicroblendTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MicroblendTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MicroblendTile") { IsSerialized = true, Value = (float)MicroblendTile }; v.Variant = p;
            }
            if (MicroblendContrast != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MicroblendContrast") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MicroblendContrast") { IsSerialized = true, Value = (float)MicroblendContrast }; v.Variant = p;
            }
            if (MicroblendNormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MicroblendNormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MicroblendNormalStrength") { IsSerialized = true, Value = (float)MicroblendNormalStrength }; v.Variant = p;
            }
            if (LayerOpacity != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerOpacity") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerOpacity") { IsSerialized = true, Value = (float)LayerOpacity }; v.Variant = p;
            }
            if (LayerOffsetU != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerOffsetU") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerOffsetU") { IsSerialized = true, Value = (float)LayerOffsetU }; v.Variant = p;
            }
            if (LayerOffsetV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerOffsetV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerOffsetV") { IsSerialized = true, Value = (float)LayerOffsetV }; v.Variant = p;
            }
            if (is_df != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "is_df") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "is_df") { IsSerialized = true, Value = (float)is_df }; v.Variant = p;
            }
        }
    }
    public partial class _debugdraw
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _fallback
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
        }
    }
    public partial class _metal_base
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (VehicleDamageInfluence != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "VehicleDamageInfluence") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "VehicleDamageInfluence") { IsSerialized = true, Value = (float)VehicleDamageInfluence }; v.Variant = p;
            }
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "BaseColorScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)BaseColorScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)BaseColorScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)BaseColorScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)BaseColorScale.W };
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (NormalStrength != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalStrength") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "NormalStrength") { IsSerialized = true, Value = (float)NormalStrength }; v.Variant = p;
            }
            if (AlphaThreshold != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaThreshold") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaThreshold") { IsSerialized = true, Value = (float)AlphaThreshold }; v.Variant = p;
            }
            if (Emissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Emissive") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Emissive") { IsSerialized = true, DepotPath = Emissive }; v.Variant = p;
            }
            if (EmissiveLift != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveLift") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveLift") { IsSerialized = true, Value = (float)EmissiveLift }; v.Variant = p;
            }
            if (EmissiveEV != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEV") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEV") { IsSerialized = true, Value = (float)EmissiveEV }; v.Variant = p;
            }
            if (EmissiveEVRaytracingBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveEVRaytracingBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveEVRaytracingBias") { IsSerialized = true, Value = (float)EmissiveEVRaytracingBias }; v.Variant = p;
            }
            if (EmissiveDirectionality != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveDirectionality") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EmissiveDirectionality") { IsSerialized = true, Value = (float)EmissiveDirectionality }; v.Variant = p;
            }
            if (EnableRaytracedEmissive != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EnableRaytracedEmissive") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EnableRaytracedEmissive") { IsSerialized = true, Value = (float)EnableRaytracedEmissive }; v.Variant = p;
            }
            if (EmissiveColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EmissiveColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "EmissiveColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)EmissiveColor.Red }, Green = new CUInt8() { Value = (Byte)EmissiveColor.Green }, Blue = new CUInt8() { Value = (Byte)EmissiveColor.Blue }, Alpha = new CUInt8() { Value = (Byte)EmissiveColor.Alpha } }; v.Variant = p;
            }
            if (LayerTile != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "LayerTile") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "LayerTile") { IsSerialized = true, Value = (float)LayerTile }; v.Variant = p;
            }
        }
    }
    public partial class _mirror
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (BaseColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColor") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BaseColor") { IsSerialized = true, DepotPath = BaseColor }; v.Variant = p;
            }
            if (BorderMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BorderMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "BorderMask") { IsSerialized = true, DepotPath = BorderMask }; v.Variant = p;
            }
            if (BaseColorScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BaseColorScale") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BaseColorScale") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BaseColorScale.Red }, Green = new CUInt8() { Value = (Byte)BaseColorScale.Green }, Blue = new CUInt8() { Value = (Byte)BaseColorScale.Blue }, Alpha = new CUInt8() { Value = (Byte)BaseColorScale.Alpha } }; v.Variant = p;
            }
            if (Metalness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Metalness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Metalness") { IsSerialized = true, DepotPath = Metalness }; v.Variant = p;
            }
            if (MetalnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessScale") { IsSerialized = true, Value = (float)MetalnessScale }; v.Variant = p;
            }
            if (MetalnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MetalnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "MetalnessBias") { IsSerialized = true, Value = (float)MetalnessBias }; v.Variant = p;
            }
            if (Roughness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Roughness") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Roughness") { IsSerialized = true, DepotPath = Roughness }; v.Variant = p;
            }
            if (RoughnessScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessScale") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessScale") { IsSerialized = true, Value = (float)RoughnessScale }; v.Variant = p;
            }
            if (RoughnessBias != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RoughnessBias") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RoughnessBias") { IsSerialized = true, Value = (float)RoughnessBias }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (Translucency != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Translucency") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Translucency") { IsSerialized = true, Value = (float)Translucency }; v.Variant = p;
            }
            if (BorderThickness != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BorderThickness") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "BorderThickness") { IsSerialized = true, Value = (float)BorderThickness }; v.Variant = p;
            }
            if (BorderColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "BorderColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "BorderColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)BorderColor.Red }, Green = new CUInt8() { Value = (Byte)BorderColor.Green }, Blue = new CUInt8() { Value = (Byte)BorderColor.Blue }, Alpha = new CUInt8() { Value = (Byte)BorderColor.Alpha } }; v.Variant = p;
            }
        }
    }
    public partial class _particles_generic
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (Color != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Color") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "Color") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)Color.Red }, Green = new CUInt8() { Value = (Byte)Color.Green }, Blue = new CUInt8() { Value = (Byte)Color.Blue }, Alpha = new CUInt8() { Value = (Byte)Color.Alpha } }; v.Variant = p;
            }
            if (ColorMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorMultiplier") { IsSerialized = true, Value = (float)ColorMultiplier }; v.Variant = p;
            }
            if (SubUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVWidth") { IsSerialized = true, Value = (float)SubUVWidth }; v.Variant = p;
            }
            if (SubUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVHeight") { IsSerialized = true, Value = (float)SubUVHeight }; v.Variant = p;
            }
            if (Desaturate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Desaturate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Desaturate") { IsSerialized = true, Value = (float)Desaturate }; v.Variant = p;
            }
            if (ColorPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ColorPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ColorPower") { IsSerialized = true, Value = (float)ColorPower }; v.Variant = p;
            }
            if (DistortAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortAmount") { IsSerialized = true, Value = (float)DistortAmount }; v.Variant = p;
            }
            if (TexCoordScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordScale.W };
            }
            if (TexCoordSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordSpeed.W };
            }
            if (TexCoordDtortScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDtortScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDtortScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDtortScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDtortScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDtortScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDtortScale.W };
            }
            if (TexCoordDistortSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDistortSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDistortSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.W };
            }
            if (AlphaGlobal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaGlobal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaGlobal") { IsSerialized = true, Value = (float)AlphaGlobal }; v.Variant = p;
            }
            if (AlphaSoft != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaSoft") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaSoft") { IsSerialized = true, Value = (float)AlphaSoft }; v.Variant = p;
            }
            if (AlphaFresnelPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaFresnelPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaFresnelPower") { IsSerialized = true, Value = (float)AlphaFresnelPower }; v.Variant = p;
            }
            if (UseAlphaFresnel != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseAlphaFresnel") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseAlphaFresnel") { IsSerialized = true, Value = (float)UseAlphaFresnel }; v.Variant = p;
            }
            if (UseAlphaMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseAlphaMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseAlphaMask") { IsSerialized = true, Value = (float)UseAlphaMask }; v.Variant = p;
            }
            if (UseOneChannel != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseOneChannel") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseOneChannel") { IsSerialized = true, Value = (float)UseOneChannel }; v.Variant = p;
            }
            if (Diffuse != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Diffuse") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Diffuse") { IsSerialized = true, DepotPath = Diffuse }; v.Variant = p;
            }
            if (AlphaMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "AlphaMask") { IsSerialized = true, DepotPath = AlphaMask }; v.Variant = p;
            }
            if (FlipUVby90deg != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "FlipUVby90deg") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "FlipUVby90deg") { IsSerialized = true, Value = (float)FlipUVby90deg }; v.Variant = p;
            }
            if (EVCompensation != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "EVCompensation") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "EVCompensation") { IsSerialized = true, Value = (float)EVCompensation }; v.Variant = p;
            }
            if (Distortion != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Distortion") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Distortion") { IsSerialized = true, DepotPath = Distortion }; v.Variant = p;
            }
            if (UseContrastAlpha != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseContrastAlpha") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseContrastAlpha") { IsSerialized = true, Value = (float)UseContrastAlpha }; v.Variant = p;
            }
            if (SoftUVInterpolate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftUVInterpolate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftUVInterpolate") { IsSerialized = true, Value = (float)SoftUVInterpolate }; v.Variant = p;
            }
        }
    }
    public partial class _particles_liquid
    {
        public void write(ref CR2WFile cr2w)
        {
            var m = (cr2w.Chunks[0].Data as CMaterialInstance).CMaterialInstanceData;
            if (AdditiveAlphaBlend != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AdditiveAlphaBlend") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AdditiveAlphaBlend") { IsSerialized = true, Value = (float)AdditiveAlphaBlend }; v.Variant = p;
            }
            if (SubUVWidth != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVWidth") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVWidth") { IsSerialized = true, Value = (float)SubUVWidth }; v.Variant = p;
            }
            if (SubUVHeight != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SubUVHeight") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SubUVHeight") { IsSerialized = true, Value = (float)SubUVHeight }; v.Variant = p;
            }
            if (Desaturate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Desaturate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "Desaturate") { IsSerialized = true, Value = (float)Desaturate }; v.Variant = p;
            }
            if (DistortAmount != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "DistortAmount") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "DistortAmount") { IsSerialized = true, Value = (float)DistortAmount }; v.Variant = p;
            }
            if (TexCoordScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordScale.W };
            }
            if (TexCoordSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordSpeed.W };
            }
            if (TexCoordDtortScale != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDtortScale") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDtortScale") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDtortScale.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDtortScale.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDtortScale.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDtortScale.W };
            }
            if (TexCoordDistortSpeed != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "TexCoordDistortSpeed") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "TexCoordDistortSpeed") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)TexCoordDistortSpeed.W };
            }
            if (AlphaGlobal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaGlobal") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaGlobal") { IsSerialized = true, Value = (float)AlphaGlobal }; v.Variant = p;
            }
            if (AlphaSoft != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaSoft") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaSoft") { IsSerialized = true, Value = (float)AlphaSoft }; v.Variant = p;
            }
            if (AlphaFresnelPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaFresnelPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "AlphaFresnelPower") { IsSerialized = true, Value = (float)AlphaFresnelPower }; v.Variant = p;
            }
            if (UseAlphaFresnel != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseAlphaFresnel") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseAlphaFresnel") { IsSerialized = true, Value = (float)UseAlphaFresnel }; v.Variant = p;
            }
            if (UseAlphaMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "UseAlphaMask") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "UseAlphaMask") { IsSerialized = true, Value = (float)UseAlphaMask }; v.Variant = p;
            }
            if (NormalMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "NormalMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new Vector4(cr2w, v, "NormalMultiplier") { IsSerialized = true }; v.Variant = p;
                p.X = new CFloat(cr2w, p, "X") { IsSerialized = true, Value = (float)NormalMultiplier.X }; p.Y = new CFloat(cr2w, p, "Y") { IsSerialized = true, Value = (float)NormalMultiplier.Y }; p.Z = new CFloat(cr2w, p, "Z") { IsSerialized = true, Value = (float)NormalMultiplier.Z }; p.W = new CFloat(cr2w, p, "W") { IsSerialized = true, Value = (float)NormalMultiplier.W };
            }
            if (ReflectionMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ReflectionMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ReflectionMultiplier") { IsSerialized = true, Value = (float)ReflectionMultiplier }; v.Variant = p;
            }
            if (ReflectionPower != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ReflectionPower") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ReflectionPower") { IsSerialized = true, Value = (float)ReflectionPower }; v.Variant = p;
            }
            if (ReflectionColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ReflectionColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "ReflectionColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)ReflectionColor.Red }, Green = new CUInt8() { Value = (Byte)ReflectionColor.Green }, Blue = new CUInt8() { Value = (Byte)ReflectionColor.Blue }, Alpha = new CUInt8() { Value = (Byte)ReflectionColor.Alpha } }; v.Variant = p;
            }
            if (RefractionMultiplier != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "RefractionMultiplier") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "RefractionMultiplier") { IsSerialized = true, Value = (float)RefractionMultiplier }; v.Variant = p;
            }
            if (Normal != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Normal") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Normal") { IsSerialized = true, DepotPath = Normal }; v.Variant = p;
            }
            if (AlphaMask != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "AlphaMask") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "AlphaMask") { IsSerialized = true, DepotPath = AlphaMask }; v.Variant = p;
            }
            if (Distortion != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Distortion") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Distortion") { IsSerialized = true, DepotPath = Distortion }; v.Variant = p;
            }
            if (Reflection != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "Reflection") { IsSerialized = true }; m.Add(v);
                var p = new rRef<ITexture>(cr2w, v, "Reflection") { IsSerialized = true, DepotPath = Reflection }; v.Variant = p;
            }
            if (SoftUVInterpolate != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "SoftUVInterpolate") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "SoftUVInterpolate") { IsSerialized = true, Value = (float)SoftUVInterpolate }; v.Variant = p;
            }
            if (ReflectionEdge != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "ReflectionEdge") { IsSerialized = true }; m.Add(v);
                var p = new CFloat(cr2w, v, "ReflectionEdge") { IsSerialized = true, Value = (float)ReflectionEdge }; v.Variant = p;
            }
            if (MainColor != null)
            {
                var v = new CVariantSizeNameType(cr2w, m, "MainColor") { IsSerialized = true }; m.Add(v);
                var p = new CColor(cr2w, v, "MainColor") { IsSerialized = true, Red = new CUInt8() { Value = (Byte)MainColor.Red }, Green = new CUInt8() { Value = (Byte)MainColor.Green }, Blue = new CUInt8() { Value = (Byte)MainColor.Blue }, Alpha = new CUInt8() { Value = (Byte)MainColor.Alpha } }; v.Variant = p;
            }
        }
    }

}