using System.IO;
using CP77.CR2W.Reflection;
using FastMember;
using static CP77.CR2W.Types.Enums;

namespace CP77.CR2W.Types
{
	[REDMeta]
	public class NPCPuppet : ScriptedPuppet
	{
		[Ordinal(0)]  [RED("e3HighlightHackStarted")] public CBool E3HighlightHackStarted { get; set; }
		[Ordinal(1)]  [RED("e3ObjectRevealed")] public CBool E3ObjectRevealed { get; set; }
		[Ordinal(2)]  [RED("godModeStatListener")] public CHandle<NPCGodModeListener> GodModeStatListener { get; set; }
		[Ordinal(3)]  [RED("forceRegisterInHudManager")] public CBool ForceRegisterInHudManager { get; set; }
		[Ordinal(4)]  [RED("prereqListeners")] public CArray<CHandle<GameObjectListener>> PrereqListeners { get; set; }
		[Ordinal(5)]  [RED("statusEffectListeners")] public CArray<CHandle<StatusEffectTriggerListener>> StatusEffectListeners { get; set; }
		[Ordinal(6)]  [RED("outlineRequestsManager")] public CHandle<OutlineRequestManager> OutlineRequestsManager { get; set; }
		[Ordinal(7)]  [RED("outlineFadeCounter")] public CInt32 OutlineFadeCounter { get; set; }
		[Ordinal(8)]  [RED("fadeOutStarted")] public CBool FadeOutStarted { get; set; }
		[Ordinal(9)]  [RED("lastEngineTime")] public CFloat LastEngineTime { get; set; }
		[Ordinal(10)]  [RED("accumulatedTimePasssed")] public CFloat AccumulatedTimePasssed { get; set; }
		[Ordinal(11)]  [RED("scanningComponent")] public CHandle<gameScanningComponent> ScanningComponent { get; set; }
		[Ordinal(12)]  [RED("visionComponent")] public CHandle<gameVisionModeComponent> VisionComponent { get; set; }
		[Ordinal(13)]  [RED("isHighlightedInFocusMode")] public CBool IsHighlightedInFocusMode { get; set; }
		[Ordinal(14)]  [RED("statusEffectComponent")] public CHandle<gameStatusEffectComponent> StatusEffectComponent { get; set; }
		[Ordinal(15)]  [RED("lastFrameGreen")] public CHandle<OutlineRequest> LastFrameGreen { get; set; }
		[Ordinal(16)]  [RED("lastFrameRed")] public CHandle<OutlineRequest> LastFrameRed { get; set; }
		[Ordinal(17)]  [RED("markAsQuest")] public CBool MarkAsQuest { get; set; }
		[Ordinal(18)]  [RED("forceHighlightSource")] public entEntityID ForceHighlightSource { get; set; }
		[Ordinal(19)]  [RED("workspotMapper")] public CHandle<WorkspotMapperComponent> WorkspotMapper { get; set; }
		[Ordinal(20)]  [RED("stimBroadcaster")] public CHandle<StimBroadcasterComponent> StimBroadcaster { get; set; }
		[Ordinal(21)]  [RED("uiSlotComponent")] public CHandle<entSlotComponent> UiSlotComponent { get; set; }
		[Ordinal(22)]  [RED("squadMemberComponent")] public CHandle<SquadMemberBaseComponent> SquadMemberComponent { get; set; }
		[Ordinal(23)]  [RED("sourceShootComponent")] public CHandle<gameSourceShootComponent> SourceShootComponent { get; set; }
		[Ordinal(24)]  [RED("targetShootComponent")] public CHandle<gameTargetShootComponent> TargetShootComponent { get; set; }
		[Ordinal(25)]  [RED("receivedDamageHistory")] public CArray<DamageHistoryEntry> ReceivedDamageHistory { get; set; }
		[Ordinal(26)]  [RED("forceDefeatReward")] public CBool ForceDefeatReward { get; set; }
		[Ordinal(27)]  [RED("killRewardDisabled")] public CBool KillRewardDisabled { get; set; }
		[Ordinal(28)]  [RED("willDieSoon")] public CBool WillDieSoon { get; set; }
		[Ordinal(29)]  [RED("isScannerDataDirty")] public CBool IsScannerDataDirty { get; set; }
		[Ordinal(30)]  [RED("hasVisibilityForcedInAnimSystem")] public CBool HasVisibilityForcedInAnimSystem { get; set; }
		[Ordinal(31)]  [RED("isDead")] public CBool IsDead { get; set; }
		[Ordinal(32)]  [RED("aiController")] public CHandle<AIHumanComponent> AiController { get; set; }
		[Ordinal(33)]  [RED("movePolicies")] public CHandle<movePoliciesComponent> MovePolicies { get; set; }
		[Ordinal(34)]  [RED("aiStateHandlerComponent")] public CHandle<AIPhaseStateEventHandlerComponent> AiStateHandlerComponent { get; set; }
		[Ordinal(35)]  [RED("hitReactionComponent")] public CHandle<HitReactionComponent> HitReactionComponent { get; set; }
		[Ordinal(36)]  [RED("signalHandlerComponent")] public CHandle<AISignalHandlerComponent> SignalHandlerComponent { get; set; }
		[Ordinal(37)]  [RED("reactionComponent")] public CHandle<ReactionManagerComponent> ReactionComponent { get; set; }
		[Ordinal(38)]  [RED("dismembermentComponent")] public CHandle<gameDismembermentComponent> DismembermentComponent { get; set; }
		[Ordinal(39)]  [RED("hitRepresantation")] public CHandle<entSlotComponent> HitRepresantation { get; set; }
		[Ordinal(40)]  [RED("interactionComponent")] public CHandle<gameinteractionsComponent> InteractionComponent { get; set; }
		[Ordinal(41)]  [RED("slotComponent")] public CHandle<entSlotComponent> SlotComponent { get; set; }
		[Ordinal(42)]  [RED("sensesComponent")] public CHandle<senseComponent> SensesComponent { get; set; }
		[Ordinal(43)]  [RED("visibleObjectComponent")] public CHandle<senseVisibleObjectComponent> VisibleObjectComponent { get; set; }
		[Ordinal(44)]  [RED("sensorObjectComponent")] public CHandle<senseSensorObjectComponent> SensorObjectComponent { get; set; }
		[Ordinal(45)]  [RED("targetTrackerComponent")] public CHandle<AITargetTrackerComponent> TargetTrackerComponent { get; set; }
		[Ordinal(46)]  [RED("targetingComponentsArray")] public CArray<CHandle<gameTargetingComponent>> TargetingComponentsArray { get; set; }
		[Ordinal(47)]  [RED("statesComponent")] public CHandle<NPCStatesComponent> StatesComponent { get; set; }
		[Ordinal(48)]  [RED("fxResourceMapper")] public CHandle<FxResourceMapperComponent> FxResourceMapper { get; set; }
		[Ordinal(49)]  [RED("linkedStatusEffect")] public LinkedStatusEffect LinkedStatusEffect { get; set; }
		[Ordinal(50)]  [RED("resourceLibraryComponent")] public CHandle<ResourceLibraryComponent> ResourceLibraryComponent { get; set; }
		[Ordinal(51)]  [RED("crowdMemberComponent")] public CHandle<CrowdMemberBaseComponent> CrowdMemberComponent { get; set; }
		[Ordinal(52)]  [RED("inventoryComponent")] public CHandle<gameInventory> InventoryComponent { get; set; }
		[Ordinal(53)]  [RED("objectSelectionComponent")] public CHandle<AIObjectSelectionComponent> ObjectSelectionComponent { get; set; }
		[Ordinal(54)]  [RED("transformHistoryComponent")] public CHandle<entTransformHistoryComponent> TransformHistoryComponent { get; set; }
		[Ordinal(55)]  [RED("animationControllerComponent")] public CHandle<entAnimationControllerComponent> AnimationControllerComponent { get; set; }
		[Ordinal(56)]  [RED("bumpComponent")] public CHandle<gameinfluenceBumpComponent> BumpComponent { get; set; }
		[Ordinal(57)]  [RED("isCrowd")] public CBool IsCrowd { get; set; }
		[Ordinal(58)]  [RED("isIconic")] public CBool IsIconic { get; set; }
		[Ordinal(59)]  [RED("combatHUDManager")] public CHandle<CombatHUDManager> CombatHUDManager { get; set; }
		[Ordinal(60)]  [RED("exposePosition")] public CBool ExposePosition { get; set; }
		[Ordinal(61)]  [RED("puppetStateBlackboard")] public CHandle<gameIBlackboard> PuppetStateBlackboard { get; set; }
		[Ordinal(62)]  [RED("customBlackboard")] public CHandle<gameIBlackboard> CustomBlackboard { get; set; }
		[Ordinal(63)]  [RED("securityAreaCallbackID")] public CUInt32 SecurityAreaCallbackID { get; set; }
		[Ordinal(64)]  [RED("customAIComponents")] public CArray<CHandle<AICustomComponents>> CustomAIComponents { get; set; }
		[Ordinal(65)]  [RED("listeners")] public CArray<CHandle<PuppetListener>> Listeners { get; set; }
		[Ordinal(66)]  [RED("securitySupportListener")] public CHandle<SecuritySupportListener> SecuritySupportListener { get; set; }
		[Ordinal(67)]  [RED("shouldBeRevealedStorage")] public CHandle<RevealRequestsStorage> ShouldBeRevealedStorage { get; set; }
		[Ordinal(68)]  [RED("inputProcessed")] public CBool InputProcessed { get; set; }
		[Ordinal(69)]  [RED("targetedBlackBoard")] public CHandle<gameIBlackboard> TargetedBlackBoard { get; set; }
		[Ordinal(70)]  [RED("shouldSpawnBloodPuddle")] public CBool ShouldSpawnBloodPuddle { get; set; }
		[Ordinal(71)]  [RED("bloodPuddleSpawned")] public CBool BloodPuddleSpawned { get; set; }
		[Ordinal(72)]  [RED("skipDeathAnimation")] public CBool SkipDeathAnimation { get; set; }
		[Ordinal(73)]  [RED("hitHistory")] public CHandle<HitHistory> HitHistory { get; set; }
		[Ordinal(74)]  [RED("currentWorkspotTags")] public CArray<CName> CurrentWorkspotTags { get; set; }
		[Ordinal(75)]  [RED("lootQuality")] public CEnum<gamedataQuality> LootQuality { get; set; }
		[Ordinal(76)]  [RED("hasQuestItems")] public CBool HasQuestItems { get; set; }
		[Ordinal(77)]  [RED("activeQualityRangeInteraction")] public CName ActiveQualityRangeInteraction { get; set; }
		[Ordinal(78)]  [RED("weakspotComponent")] public CHandle<gameWeakspotComponent> WeakspotComponent { get; set; }
		[Ordinal(79)]  [RED("highlightData")] public CHandle<FocusForcedHighlightData> HighlightData { get; set; }
		[Ordinal(80)]  [RED("killer")] public wCHandle<entEntity> Killer { get; set; }
		[Ordinal(81)]  [RED("objectActionsCallbackCtrl")] public CHandle<gameObjectActionsCallbackController> ObjectActionsCallbackCtrl { get; set; }
		[Ordinal(82)]  [RED("isActiveCached")] public AIUtilsCachedBoolValue IsActiveCached { get; set; }
		[Ordinal(83)]  [RED("isCyberpsycho")] public CBool IsCyberpsycho { get; set; }
		[Ordinal(84)]  [RED("isCivilian")] public CBool IsCivilian { get; set; }
		[Ordinal(85)]  [RED("isPolice")] public CBool IsPolice { get; set; }
		[Ordinal(86)]  [RED("isGanger")] public CBool IsGanger { get; set; }
		[Ordinal(87)]  [RED("attemptedShards")] public CArray<gameItemID> AttemptedShards { get; set; }
		[Ordinal(88)]  [RED("lastHitEvent")] public CHandle<gameeventsHitEvent> LastHitEvent { get; set; }
		[Ordinal(89)]  [RED("totalFrameReactionDamageReceived")] public CFloat TotalFrameReactionDamageReceived { get; set; }
		[Ordinal(90)]  [RED("totalFrameWoundsDamageReceived")] public CFloat TotalFrameWoundsDamageReceived { get; set; }
		[Ordinal(91)]  [RED("totalFrameDismembermentDamageReceived")] public CFloat TotalFrameDismembermentDamageReceived { get; set; }
		[Ordinal(92)]  [RED("hitEventLock")] public ScriptReentrantRWLock HitEventLock { get; set; }
		[Ordinal(93)]  [RED("NPCManager")] public CHandle<NPCManager> NPCManager { get; set; }
		[Ordinal(94)]  [RED("customDeathDirection")] public CInt32 CustomDeathDirection { get; set; }
		[Ordinal(95)]  [RED("deathOverrideState")] public CBool DeathOverrideState { get; set; }
		[Ordinal(96)]  [RED("agonyState")] public CBool AgonyState { get; set; }
		[Ordinal(97)]  [RED("defensiveState")] public CBool DefensiveState { get; set; }
		[Ordinal(98)]  [RED("lastSetupWorkspotActionEvent")] public CHandle<gameSetupWorkspotActionEvent> LastSetupWorkspotActionEvent { get; set; }
		[Ordinal(99)]  [RED("wasJustKilledOrDefeated")] public CBool WasJustKilledOrDefeated { get; set; }
		[Ordinal(100)]  [RED("shouldDie")] public CBool ShouldDie { get; set; }
		[Ordinal(101)]  [RED("shouldBeDefeated")] public CBool ShouldBeDefeated { get; set; }
		[Ordinal(102)]  [RED("sentDownedEvent")] public CBool SentDownedEvent { get; set; }
		[Ordinal(103)]  [RED("isRagdolling")] public CBool IsRagdolling { get; set; }
		[Ordinal(104)]  [RED("hasAnimatedRagdoll")] public CBool HasAnimatedRagdoll { get; set; }
		[Ordinal(105)]  [RED("disableCollisionRequested")] public CBool DisableCollisionRequested { get; set; }
		[Ordinal(106)]  [RED("ragdollInstigator")] public wCHandle<gameObject> RagdollInstigator { get; set; }
		[Ordinal(107)]  [RED("ragdollSplattersSpawned")] public CInt32 RagdollSplattersSpawned { get; set; }
		[Ordinal(108)]  [RED("ragdollFloorSplashSpawned")] public CBool RagdollFloorSplashSpawned { get; set; }
		[Ordinal(109)]  [RED("ragdollImpactData")] public entRagdollImpactPointData RagdollImpactData { get; set; }
		[Ordinal(110)]  [RED("ragdollDamageData")] public RagdollDamagePollData RagdollDamageData { get; set; }
		[Ordinal(111)]  [RED("ragdollInitialPosition")] public Vector4 RagdollInitialPosition { get; set; }
		[Ordinal(112)]  [RED("ragdollActivationTimestamp")] public CFloat RagdollActivationTimestamp { get; set; }
		[Ordinal(113)]  [RED("ragdolledEntities")] public CArray<wCHandle<entEntity>> RagdolledEntities { get; set; }
		[Ordinal(114)]  [RED("isNotVisible")] public CBool IsNotVisible { get; set; }
		[Ordinal(115)]  [RED("deathListener")] public CHandle<NPCDeathListener> DeathListener { get; set; }
		[Ordinal(116)]  [RED("npcCollisionComponent")] public CHandle<entSimpleColliderComponent> NpcCollisionComponent { get; set; }
		[Ordinal(117)]  [RED("npcRagdollComponent")] public CHandle<entIComponent> NpcRagdollComponent { get; set; }
		[Ordinal(118)]  [RED("npcMountedToPlayerComponents")] public CArray<CHandle<entIComponent>> NpcMountedToPlayerComponents { get; set; }
		[Ordinal(119)]  [RED("scavengeComponent")] public CHandle<ScavengeComponent> ScavengeComponent { get; set; }
		[Ordinal(120)]  [RED("influenceComponent")] public CHandle<gameinfluenceComponent> InfluenceComponent { get; set; }
		[Ordinal(121)]  [RED("comfortZoneComponent")] public CHandle<entIComponent> ComfortZoneComponent { get; set; }
		[Ordinal(122)]  [RED("isTargetingPlayer")] public CBool IsTargetingPlayer { get; set; }
		[Ordinal(123)]  [RED("playerStatsListener")] public CHandle<gameScriptStatsListener> PlayerStatsListener { get; set; }
		[Ordinal(124)]  [RED("upperBodyStateCallbackID")] public CUInt32 UpperBodyStateCallbackID { get; set; }
		[Ordinal(125)]  [RED("leftCyberwareStateCallbackID")] public CUInt32 LeftCyberwareStateCallbackID { get; set; }
		[Ordinal(126)]  [RED("meleeStateCallbackID")] public CUInt32 MeleeStateCallbackID { get; set; }
		[Ordinal(127)]  [RED("combatGadgetStateCallbackID")] public CUInt32 CombatGadgetStateCallbackID { get; set; }
		[Ordinal(128)]  [RED("wasAimedAtLast")] public CBool WasAimedAtLast { get; set; }
		[Ordinal(129)]  [RED("wasCWChargedAtLast")] public CBool WasCWChargedAtLast { get; set; }
		[Ordinal(130)]  [RED("wasMeleeChargedAtLast")] public CBool WasMeleeChargedAtLast { get; set; }
		[Ordinal(131)]  [RED("wasChargingGadgetAtLast")] public CBool WasChargingGadgetAtLast { get; set; }
		[Ordinal(132)]  [RED("isLookedAt")] public CBool IsLookedAt { get; set; }
		[Ordinal(133)]  [RED("cachedPlayerID")] public entEntityID CachedPlayerID { get; set; }
		[Ordinal(134)]  [RED("canGoThroughDoors")] public CBool CanGoThroughDoors { get; set; }
		[Ordinal(135)]  [RED("lastStatusEffectSignalSent")] public wCHandle<gamedataStatusEffect_Record> LastStatusEffectSignalSent { get; set; }
		[Ordinal(136)]  [RED("cachedStatusEffectAnim")] public wCHandle<gamedataStatusEffect_Record> CachedStatusEffectAnim { get; set; }
		[Ordinal(137)]  [RED("resendStatusEffectSignalDelayID")] public gameDelayID ResendStatusEffectSignalDelayID { get; set; }
		[Ordinal(138)]  [RED("lastSEAppliedByPlayer")] public CHandle<gameStatusEffect> LastSEAppliedByPlayer { get; set; }
		[Ordinal(139)]  [RED("pendingSEEvent")] public CHandle<gameeventsApplyStatusEffectEvent> PendingSEEvent { get; set; }
		[Ordinal(140)]  [RED("bounty")] public Bounty Bounty { get; set; }
		[Ordinal(141)]  [RED("cachedVFXList")] public CArray<wCHandle<gamedataStatusEffectFX_Record>> CachedVFXList { get; set; }
		[Ordinal(142)]  [RED("cachedSFXList")] public CArray<wCHandle<gamedataStatusEffectFX_Record>> CachedSFXList { get; set; }
		[Ordinal(143)]  [RED("isThrowingGrenadeToPlayer")] public CBool IsThrowingGrenadeToPlayer { get; set; }
		[Ordinal(144)]  [RED("throwingGrenadeDelayEventID")] public gameDelayID ThrowingGrenadeDelayEventID { get; set; }
		[Ordinal(145)]  [RED("myKiller")] public wCHandle<gameObject> MyKiller { get; set; }
		[Ordinal(146)]  [RED("primaryThreatCalculationType")] public CEnum<EAIThreatCalculationType> PrimaryThreatCalculationType { get; set; }
		[Ordinal(147)]  [RED("temporaryThreatCalculationType")] public CEnum<EAIThreatCalculationType> TemporaryThreatCalculationType { get; set; }
		[Ordinal(148)]  [RED("isPlayerCompanionCached")] public CBool IsPlayerCompanionCached { get; set; }
		[Ordinal(149)]  [RED("isPlayerCompanionCachedTimeStamp")] public CFloat IsPlayerCompanionCachedTimeStamp { get; set; }
		[Ordinal(150)]  [RED("quickHackEffectsApplied")] public CUInt32 QuickHackEffectsApplied { get; set; }
		[Ordinal(151)]  [RED("hackingResistanceMod")] public CHandle<gameConstantStatModifierData> HackingResistanceMod { get; set; }
		[Ordinal(152)]  [RED("delayNonStealthQuickHackVictimEventID")] public gameDelayID DelayNonStealthQuickHackVictimEventID { get; set; }
		[Ordinal(153)]  [RED("cachedIsPaperdoll")] public CInt32 CachedIsPaperdoll { get; set; }
		[Ordinal(154)]  [RED("smartDespawnDelayID")] public gameDelayID SmartDespawnDelayID { get; set; }
		[Ordinal(155)]  [RED("despawnTicks")] public CUInt32 DespawnTicks { get; set; }

		public NPCPuppet(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name) { }
	}
}
