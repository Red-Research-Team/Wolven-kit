using System.IO;
using CP77.CR2W.Reflection;
using FastMember;
using static CP77.CR2W.Types.Enums;

namespace CP77.CR2W.Types
{
	[REDMeta]
	public class SecurityTurret : SensorDevice
	{
		[Ordinal(0)]  [RED("e3HighlightHackStarted")] public CBool E3HighlightHackStarted { get; set; }
		[Ordinal(1)]  [RED("e3ObjectRevealed")] public CBool E3ObjectRevealed { get; set; }
		[Ordinal(2)]  [RED("debugOptions")] public DebuggerProperties DebugOptions { get; set; }
		[Ordinal(3)]  [RED("debug_SS_inputsSendTargetLock")] public CInt32 Debug_SS_inputsSendTargetLock { get; set; }
		[Ordinal(4)]  [RED("debug_SS_inputsSendIntresting")] public CInt32 Debug_SS_inputsSendIntresting { get; set; }
		[Ordinal(5)]  [RED("debug_SS_inputsSendLoseTarget")] public CInt32 Debug_SS_inputsSendLoseTarget { get; set; }
		[Ordinal(6)]  [RED("debug_SS_outputRecieved")] public CInt32 Debug_SS_outputRecieved { get; set; }
		[Ordinal(7)]  [RED("debug_SS_outputFormSelfRecieved")] public CInt32 Debug_SS_outputFormSelfRecieved { get; set; }
		[Ordinal(8)]  [RED("debug_SS_outputFromElseRecieved")] public CInt32 Debug_SS_outputFromElseRecieved { get; set; }
		[Ordinal(9)]  [RED("debug_SS_reevaluatesDone")] public CInt32 Debug_SS_reevaluatesDone { get; set; }
		[Ordinal(10)]  [RED("debug_SS_trespassingRecieved")] public CInt32 Debug_SS_trespassingRecieved { get; set; }
		[Ordinal(11)]  [RED("debug_SS_TargetAssessmentRequest")] public CInt32 Debug_SS_TargetAssessmentRequest { get; set; }
		[Ordinal(12)]  [RED("netClientCurrentlyAppliedState")] public CHandle<SecurityTurretReplicatedState> NetClientCurrentlyAppliedState { get; set; }
		[Ordinal(13)]  [RED("forceRegisterInHudManager")] public CBool ForceRegisterInHudManager { get; set; }
		[Ordinal(14)]  [RED("prereqListeners")] public CArray<CHandle<GameObjectListener>> PrereqListeners { get; set; }
		[Ordinal(15)]  [RED("statusEffectListeners")] public CArray<CHandle<StatusEffectTriggerListener>> StatusEffectListeners { get; set; }
		[Ordinal(16)]  [RED("outlineRequestsManager")] public CHandle<OutlineRequestManager> OutlineRequestsManager { get; set; }
		[Ordinal(17)]  [RED("outlineFadeCounter")] public CInt32 OutlineFadeCounter { get; set; }
		[Ordinal(18)]  [RED("fadeOutStarted")] public CBool FadeOutStarted { get; set; }
		[Ordinal(19)]  [RED("lastEngineTime")] public CFloat LastEngineTime { get; set; }
		[Ordinal(20)]  [RED("accumulatedTimePasssed")] public CFloat AccumulatedTimePasssed { get; set; }
		[Ordinal(21)]  [RED("scanningComponent")] public CHandle<gameScanningComponent> ScanningComponent { get; set; }
		[Ordinal(22)]  [RED("visionComponent")] public CHandle<gameVisionModeComponent> VisionComponent { get; set; }
		[Ordinal(23)]  [RED("isHighlightedInFocusMode")] public CBool IsHighlightedInFocusMode { get; set; }
		[Ordinal(24)]  [RED("statusEffectComponent")] public CHandle<gameStatusEffectComponent> StatusEffectComponent { get; set; }
		[Ordinal(25)]  [RED("lastFrameGreen")] public CHandle<OutlineRequest> LastFrameGreen { get; set; }
		[Ordinal(26)]  [RED("lastFrameRed")] public CHandle<OutlineRequest> LastFrameRed { get; set; }
		[Ordinal(27)]  [RED("markAsQuest")] public CBool MarkAsQuest { get; set; }
		[Ordinal(28)]  [RED("forceHighlightSource")] public entEntityID ForceHighlightSource { get; set; }
		[Ordinal(29)]  [RED("workspotMapper")] public CHandle<WorkspotMapperComponent> WorkspotMapper { get; set; }
		[Ordinal(30)]  [RED("stimBroadcaster")] public CHandle<StimBroadcasterComponent> StimBroadcaster { get; set; }
		[Ordinal(31)]  [RED("uiSlotComponent")] public CHandle<entSlotComponent> UiSlotComponent { get; set; }
		[Ordinal(32)]  [RED("squadMemberComponent")] public CHandle<SquadMemberBaseComponent> SquadMemberComponent { get; set; }
		[Ordinal(33)]  [RED("sourceShootComponent")] public CHandle<gameSourceShootComponent> SourceShootComponent { get; set; }
		[Ordinal(34)]  [RED("targetShootComponent")] public CHandle<gameTargetShootComponent> TargetShootComponent { get; set; }
		[Ordinal(35)]  [RED("receivedDamageHistory")] public CArray<DamageHistoryEntry> ReceivedDamageHistory { get; set; }
		[Ordinal(36)]  [RED("forceDefeatReward")] public CBool ForceDefeatReward { get; set; }
		[Ordinal(37)]  [RED("killRewardDisabled")] public CBool KillRewardDisabled { get; set; }
		[Ordinal(38)]  [RED("willDieSoon")] public CBool WillDieSoon { get; set; }
		[Ordinal(39)]  [RED("isScannerDataDirty")] public CBool IsScannerDataDirty { get; set; }
		[Ordinal(40)]  [RED("hasVisibilityForcedInAnimSystem")] public CBool HasVisibilityForcedInAnimSystem { get; set; }
		[Ordinal(41)]  [RED("isDead")] public CBool IsDead { get; set; }
		[Ordinal(42)]  [RED("controller")] public CHandle<ScriptableDC> Controller { get; set; }
		[Ordinal(43)]  [RED("wasVisible")] public CBool WasVisible { get; set; }
		[Ordinal(44)]  [RED("isVisible")] public CBool IsVisible { get; set; }
		[Ordinal(45)]  [RED("controllerTypeName")] public CName ControllerTypeName { get; set; }
		[Ordinal(46)]  [RED("deviceState")] public CEnum<EDeviceStatus> DeviceState { get; set; }
		[Ordinal(47)]  [RED("uiComponent")] public wCHandle<IWorldWidgetComponent> UiComponent { get; set; }
		[Ordinal(48)]  [RED("screenDefinition")] public SUIScreenDefinition ScreenDefinition { get; set; }
		[Ordinal(49)]  [RED("isUIdirty")] public CBool IsUIdirty { get; set; }
		[Ordinal(50)]  [RED("personalLinkComponent")] public CHandle<workWorkspotResourceComponent> PersonalLinkComponent { get; set; }
		[Ordinal(51)]  [RED("durabilityType")] public CEnum<EDeviceDurabilityType> DurabilityType { get; set; }
		[Ordinal(52)]  [RED("disassemblableComponent")] public CHandle<DisassemblableComponent> DisassemblableComponent { get; set; }
		[Ordinal(53)]  [RED("localization")] public CHandle<entLocalizationStringComponent> Localization { get; set; }
		[Ordinal(54)]  [RED("IKslotComponent")] public CHandle<entSlotComponent> IKslotComponent { get; set; }
		[Ordinal(55)]  [RED("ToggleZoomInteractionWorkspot")] public CHandle<workWorkspotResourceComponent> ToggleZoomInteractionWorkspot { get; set; }
		[Ordinal(56)]  [RED("cameraZoomComponent")] public CHandle<gameCameraComponent> CameraZoomComponent { get; set; }
		[Ordinal(57)]  [RED("slotComponent")] public CHandle<entSlotComponent> SlotComponent { get; set; }
		[Ordinal(58)]  [RED("isInitialized")] public CBool IsInitialized { get; set; }
		[Ordinal(59)]  [RED("isLogicready")] public CBool IsLogicready { get; set; }
		[Ordinal(60)]  [RED("isInsideLogicArea")] public CBool IsInsideLogicArea { get; set; }
		[Ordinal(61)]  [RED("cameraComponent")] public CHandle<gameCameraComponent> CameraComponent { get; set; }
		[Ordinal(62)]  [RED("ZoomUIListenerID")] public CUInt32 ZoomUIListenerID { get; set; }
		[Ordinal(63)]  [RED("ZoomStateMachineListenerID")] public CUInt32 ZoomStateMachineListenerID { get; set; }
		[Ordinal(64)]  [RED("activeStatusEffect")] public TweakDBID ActiveStatusEffect { get; set; }
		[Ordinal(65)]  [RED("activeProgramToUploadOnNPC")] public TweakDBID ActiveProgramToUploadOnNPC { get; set; }
		[Ordinal(66)]  [RED("isQhackUploadInProgerss")] public CBool IsQhackUploadInProgerss { get; set; }
		[Ordinal(67)]  [RED("scanningTweakDBRecord")] public TweakDBID ScanningTweakDBRecord { get; set; }
		[Ordinal(68)]  [RED("updateRunning")] public CBool UpdateRunning { get; set; }
		[Ordinal(69)]  [RED("updateID")] public gameDelayID UpdateID { get; set; }
		[Ordinal(70)]  [RED("delayedUpdateDeviceStateID")] public gameDelayID DelayedUpdateDeviceStateID { get; set; }
		[Ordinal(71)]  [RED("blackboard")] public CHandle<gameIBlackboard> Blackboard { get; set; }
		[Ordinal(72)]  [RED("currentPlayerTargetCallbackID")] public CUInt32 CurrentPlayerTargetCallbackID { get; set; }
		[Ordinal(73)]  [RED("wasLookedAtLast")] public CBool WasLookedAtLast { get; set; }
		[Ordinal(74)]  [RED("lastPingSourceID")] public entEntityID LastPingSourceID { get; set; }
		[Ordinal(75)]  [RED("networkGridBeamFX")] public gameFxResource NetworkGridBeamFX { get; set; }
		[Ordinal(76)]  [RED("fxResourceMapper")] public CHandle<FxResourceMapperComponent> FxResourceMapper { get; set; }
		[Ordinal(77)]  [RED("effectVisualization")] public CHandle<AreaEffectVisualizationComponent> EffectVisualization { get; set; }
		[Ordinal(78)]  [RED("resourceLibraryComponent")] public CHandle<ResourceLibraryComponent> ResourceLibraryComponent { get; set; }
		[Ordinal(79)]  [RED("gameplayRoleComponent")] public CHandle<GameplayRoleComponent> GameplayRoleComponent { get; set; }
		[Ordinal(80)]  [RED("personalLinkHackSend")] public CBool PersonalLinkHackSend { get; set; }
		[Ordinal(81)]  [RED("personalLinkFailsafeID")] public gameDelayID PersonalLinkFailsafeID { get; set; }
		[Ordinal(82)]  [RED("wasAnimationFastForwarded")] public CBool WasAnimationFastForwarded { get; set; }
		[Ordinal(83)]  [RED("contentScale")] public TweakDBID ContentScale { get; set; }
		[Ordinal(84)]  [RED("networkGridBeamOffset")] public Vector4 NetworkGridBeamOffset { get; set; }
		[Ordinal(85)]  [RED("areaEffectsData")] public CArray<SAreaEffectData> AreaEffectsData { get; set; }
		[Ordinal(86)]  [RED("areaEffectsInFocusMode")] public CArray<SAreaEffectTargetData> AreaEffectsInFocusMode { get; set; }
		[Ordinal(87)]  [RED("interaction")] public CHandle<gameinteractionsComponent> Interaction { get; set; }
		[Ordinal(88)]  [RED("interactionIndicator")] public CHandle<gameLightComponent> InteractionIndicator { get; set; }
		[Ordinal(89)]  [RED("disableAreaIndicatorID")] public gameDelayID DisableAreaIndicatorID { get; set; }
		[Ordinal(90)]  [RED("delayedUIRefreshID")] public gameDelayID DelayedUIRefreshID { get; set; }
		[Ordinal(91)]  [RED("isPlayerAround")] public CBool IsPlayerAround { get; set; }
		[Ordinal(92)]  [RED("disableAreaIndicatorDelayActive")] public CBool DisableAreaIndicatorDelayActive { get; set; }
		[Ordinal(93)]  [RED("objectActionsCallbackCtrl")] public CHandle<gameObjectActionsCallbackController> ObjectActionsCallbackCtrl { get; set; }
		[Ordinal(94)]  [RED("animFeatureDataDistractor")] public CHandle<AnimFeature_DistractionState> AnimFeatureDataDistractor { get; set; }
		[Ordinal(95)]  [RED("animFeatureDataNameDistractor")] public CName AnimFeatureDataNameDistractor { get; set; }
		[Ordinal(96)]  [RED("distractionComponentSwapNamesToON")] public CArray<CName> DistractionComponentSwapNamesToON { get; set; }
		[Ordinal(97)]  [RED("distractionComponentSwapNamesToOFF")] public CArray<CName> DistractionComponentSwapNamesToOFF { get; set; }
		[Ordinal(98)]  [RED("distractionComponentON")] public CArray<CHandle<entIPlacedComponent>> DistractionComponentON { get; set; }
		[Ordinal(99)]  [RED("cdistractionComponentOFF")] public CArray<CHandle<entIPlacedComponent>> CdistractionComponentOFF { get; set; }
		[Ordinal(100)]  [RED("numberOfComponentsToON")] public CInt32 NumberOfComponentsToON { get; set; }
		[Ordinal(101)]  [RED("numberOfComponentsToOFF")] public CInt32 NumberOfComponentsToOFF { get; set; }
		[Ordinal(102)]  [RED("indexesOfComponentsToOFF")] public CArray<CInt32> IndexesOfComponentsToOFF { get; set; }
		[Ordinal(103)]  [RED("shouldDistractionEnableCollider")] public CBool ShouldDistractionEnableCollider { get; set; }
		[Ordinal(104)]  [RED("shouldDistractionVFXstay")] public CBool ShouldDistractionVFXstay { get; set; }
		[Ordinal(105)]  [RED("loopAudioEvent")] public CName LoopAudioEvent { get; set; }
		[Ordinal(106)]  [RED("spawnedFxInstancesToKill")] public CArray<CHandle<gameFxInstance>> SpawnedFxInstancesToKill { get; set; }
		[Ordinal(107)]  [RED("mesh")] public CHandle<entMeshComponent> Mesh { get; set; }
		[Ordinal(108)]  [RED("collider")] public CHandle<entIPlacedComponent> Collider { get; set; }
		[Ordinal(109)]  [RED("distractionCollider")] public CHandle<entIPlacedComponent> DistractionCollider { get; set; }
		[Ordinal(110)]  [RED("numberOfReceivedHits")] public CInt32 NumberOfReceivedHits { get; set; }
		[Ordinal(111)]  [RED("devicePenetrationHealth")] public CFloat DevicePenetrationHealth { get; set; }
		[Ordinal(112)]  [RED("killedByExplosion")] public CBool KilledByExplosion { get; set; }
		[Ordinal(113)]  [RED("distractionTimeStart")] public CFloat DistractionTimeStart { get; set; }
		[Ordinal(114)]  [RED("isBroadcastingEnvironmentalHazardStim")] public CBool IsBroadcastingEnvironmentalHazardStim { get; set; }
		[Ordinal(115)]  [RED("componentsON")] public CArray<CHandle<entIPlacedComponent>> ComponentsON { get; set; }
		[Ordinal(116)]  [RED("componentsOFF")] public CArray<CHandle<entIPlacedComponent>> ComponentsOFF { get; set; }
		[Ordinal(117)]  [RED("attitudeAgent")] public CHandle<gameAttitudeAgent> AttitudeAgent { get; set; }
		[Ordinal(118)]  [RED("senseComponent")] public CHandle<senseComponent> SenseComponent { get; set; }
		[Ordinal(119)]  [RED("visibleObjectComponent")] public CHandle<senseVisibleObjectComponent> VisibleObjectComponent { get; set; }
		[Ordinal(120)]  [RED("forwardFaceSlotComponent")] public CHandle<entSlotComponent> ForwardFaceSlotComponent { get; set; }
		[Ordinal(121)]  [RED("targetingComponent")] public CHandle<gameTargetingComponent> TargetingComponent { get; set; }
		[Ordinal(122)]  [RED("targetTrackerComponent")] public CHandle<AITargetTrackerComponent> TargetTrackerComponent { get; set; }
		[Ordinal(123)]  [RED("cameraComponentInverted")] public CHandle<gameCameraComponent> CameraComponentInverted { get; set; }
		[Ordinal(124)]  [RED("targets")] public CArray<CHandle<Target>> Targets { get; set; }
		[Ordinal(125)]  [RED("currentlyFollowedTarget")] public wCHandle<gameObject> CurrentlyFollowedTarget { get; set; }
		[Ordinal(126)]  [RED("currentLookAtEventVert")] public CHandle<entLookAtAddEvent> CurrentLookAtEventVert { get; set; }
		[Ordinal(127)]  [RED("currentLookAtEventHor")] public CHandle<entLookAtAddEvent> CurrentLookAtEventHor { get; set; }
		[Ordinal(128)]  [RED("HPListenersList")] public CArray<CHandle<TargetedObjectDeathListener>> HPListenersList { get; set; }
		[Ordinal(129)]  [RED("sensorDeviceState")] public CEnum<ESensorDeviceStates> SensorDeviceState { get; set; }
		[Ordinal(130)]  [RED("sensorWakeState")] public CEnum<ESensorDeviceWakeState> SensorWakeState { get; set; }
		[Ordinal(131)]  [RED("sensorWakeStatePrevious")] public CEnum<ESensorDeviceWakeState> SensorWakeStatePrevious { get; set; }
		[Ordinal(132)]  [RED("targetingDelayEventID")] public gameDelayID TargetingDelayEventID { get; set; }
		[Ordinal(133)]  [RED("hack_isTargetingDelayEventFilled")] public CBool Hack_isTargetingDelayEventFilled { get; set; }
		[Ordinal(134)]  [RED("currentResolveDelayEventID")] public gameDelayID CurrentResolveDelayEventID { get; set; }
		[Ordinal(135)]  [RED("hack_isResolveDelayEventFilled")] public CBool Hack_isResolveDelayEventFilled { get; set; }
		[Ordinal(136)]  [RED("animFeatureData")] public CHandle<AnimFeature_SensorDevice> AnimFeatureData { get; set; }
		[Ordinal(137)]  [RED("animFeatureDataName")] public CName AnimFeatureDataName { get; set; }
		[Ordinal(138)]  [RED("targetLostBySensesDelayEventID")] public gameDelayID TargetLostBySensesDelayEventID { get; set; }
		[Ordinal(139)]  [RED("hack_isTargetLostBySensesDelEvtFilled")] public CBool Hack_isTargetLostBySensesDelEvtFilled { get; set; }
		[Ordinal(140)]  [RED("initialAttitude")] public CName InitialAttitude { get; set; }
		[Ordinal(141)]  [RED("detectionFactorMultiplier")] public CFloat DetectionFactorMultiplier { get; set; }
		[Ordinal(142)]  [RED("lightScanRefs")] public CArray<CHandle<gameLightComponent>> LightScanRefs { get; set; }
		[Ordinal(143)]  [RED("lightAttitudeRefs")] public CArray<CHandle<gameLightComponent>> LightAttitudeRefs { get; set; }
		[Ordinal(144)]  [RED("lightInfoRefs")] public CArray<CHandle<gameLightComponent>> LightInfoRefs { get; set; }
		[Ordinal(145)]  [RED("lightColors")] public LedColors_SensorDevice LightColors { get; set; }
		[Ordinal(146)]  [RED("deviceFXRecord")] public CHandle<gamedataDeviceFX_Record> DeviceFXRecord { get; set; }
		[Ordinal(147)]  [RED("scanGameEffect")] public CHandle<gameEffectInstance> ScanGameEffect { get; set; }
		[Ordinal(148)]  [RED("scanFXSlotName")] public CName ScanFXSlotName { get; set; }
		[Ordinal(149)]  [RED("visionConeEffectInstance")] public CHandle<gameEffectInstance> VisionConeEffectInstance { get; set; }
		[Ordinal(150)]  [RED("idleGameEffectInstance")] public CHandle<gameEffectInstance> IdleGameEffectInstance { get; set; }
		[Ordinal(151)]  [RED("targetForcedFormTagKill")] public CBool TargetForcedFormTagKill { get; set; }
		[Ordinal(152)]  [RED("hasSupport")] public CBool HasSupport { get; set; }
		[Ordinal(153)]  [RED("defaultSensePreset")] public TweakDBID DefaultSensePreset { get; set; }
		[Ordinal(154)]  [RED("elementsToHideOnTCS")] public CArray<CName> ElementsToHideOnTCS { get; set; }
		[Ordinal(155)]  [RED("elementsToHideOnTCSRefs")] public CArray<CHandle<entIPlacedComponent>> ElementsToHideOnTCSRefs { get; set; }
		[Ordinal(156)]  [RED("previoustagKillList")] public CArray<wCHandle<gameObject>> PrevioustagKillList { get; set; }
		[Ordinal(157)]  [RED("playIdleSoundOnIdle")] public CBool PlayIdleSoundOnIdle { get; set; }
		[Ordinal(158)]  [RED("idleSound")] public CName IdleSound { get; set; }
		[Ordinal(159)]  [RED("idleSoundStop")] public CName IdleSoundStop { get; set; }
		[Ordinal(160)]  [RED("soundDeviceON")] public CName SoundDeviceON { get; set; }
		[Ordinal(161)]  [RED("soundDeviceOFF")] public CName SoundDeviceOFF { get; set; }
		[Ordinal(162)]  [RED("idleSoundIsPlaying")] public CBool IdleSoundIsPlaying { get; set; }
		[Ordinal(163)]  [RED("soundDeviceDestroyed")] public CName SoundDeviceDestroyed { get; set; }
		[Ordinal(164)]  [RED("soundDetectionLoop")] public CName SoundDetectionLoop { get; set; }
		[Ordinal(165)]  [RED("soundDetectionLoopStop")] public CName SoundDetectionLoopStop { get; set; }
		[Ordinal(166)]  [RED("isPLAYERSAFETargetLock")] public CBool IsPLAYERSAFETargetLock { get; set; }
		[Ordinal(167)]  [RED("playerDetected")] public CBool PlayerDetected { get; set; }
		[Ordinal(168)]  [RED("clientForceSetAnimFeature")] public CBool ClientForceSetAnimFeature { get; set; }
		[Ordinal(169)]  [RED("playerControlData")] public PlayerControlDeviceData PlayerControlData { get; set; }
		[Ordinal(170)]  [RED("engineTimeInSec")] public CFloat EngineTimeInSec { get; set; }
		[Ordinal(171)]  [RED("TCExitEngineTime")] public CFloat TCExitEngineTime { get; set; }
		[Ordinal(172)]  [RED("hack_wasTargetReevaluated")] public CBool Hack_wasTargetReevaluated { get; set; }
		[Ordinal(173)]  [RED("hack_wasSSOutupFromSelf")] public CBool Hack_wasSSOutupFromSelf { get; set; }
		[Ordinal(174)]  [RED("degbu_SS_inputsSend")] public CInt32 Degbu_SS_inputsSend { get; set; }
		[Ordinal(175)]  [RED("minPitch")] public CFloat MinPitch { get; set; }
		[Ordinal(176)]  [RED("maxPitch")] public CFloat MaxPitch { get; set; }
		[Ordinal(177)]  [RED("minYaw")] public CFloat MinYaw { get; set; }
		[Ordinal(178)]  [RED("maxYaw")] public CFloat MaxYaw { get; set; }
		[Ordinal(179)]  [RED("animFeature")] public CHandle<AnimFeature_SecurityTurretData> AnimFeature { get; set; }
		[Ordinal(180)]  [RED("animFeatureName")] public CName AnimFeatureName { get; set; }
		[Ordinal(181)]  [RED("lookAtSlot")] public CHandle<entSlotComponent> LookAtSlot { get; set; }
		[Ordinal(182)]  [RED("laserMesh")] public CHandle<entMeshComponent> LaserMesh { get; set; }
		[Ordinal(183)]  [RED("targetingComp")] public CHandle<gameTargetingComponent> TargetingComp { get; set; }
		[Ordinal(184)]  [RED("triggerSideOne")] public CHandle<gameStaticTriggerAreaComponent> TriggerSideOne { get; set; }
		[Ordinal(185)]  [RED("triggerSideTwo")] public CHandle<gameStaticTriggerAreaComponent> TriggerSideTwo { get; set; }
		[Ordinal(186)]  [RED("weapon")] public wCHandle<gameweaponObject> Weapon { get; set; }
		[Ordinal(187)]  [RED("itemID")] public gameItemID ItemID { get; set; }
		[Ordinal(188)]  [RED("laserGameEffect")] public CHandle<gameEffectInstance> LaserGameEffect { get; set; }
		[Ordinal(189)]  [RED("laserFXSlotName")] public CName LaserFXSlotName { get; set; }
		[Ordinal(190)]  [RED("burstDelayEvtID")] public gameDelayID BurstDelayEvtID { get; set; }
		[Ordinal(191)]  [RED("isBurstDelayOngoing")] public CBool IsBurstDelayOngoing { get; set; }
		[Ordinal(192)]  [RED("nextShootCycleDelayEvtID")] public gameDelayID NextShootCycleDelayEvtID { get; set; }
		[Ordinal(193)]  [RED("isShootingOngoing")] public CBool IsShootingOngoing { get; set; }
		[Ordinal(194)]  [RED("timeToNextShot")] public CFloat TimeToNextShot { get; set; }
		[Ordinal(195)]  [RED("optim_CheckTargetParametersShots")] public CInt32 Optim_CheckTargetParametersShots { get; set; }

		public SecurityTurret(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name) { }
	}
}
