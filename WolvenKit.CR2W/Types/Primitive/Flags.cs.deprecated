using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using WolvenKit.CR2W.Editors;
using WolvenKit.CR2W.Reflection;

namespace WolvenKit.CR2W.Types
{
    //[REDMeta]
    //public class EImmunityFlags : CFlags
    //{
    //    public EImmunityFlags(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name) { }

    //    public override void Read(BinaryReader file, uint size) => base.Read(file, size);

    //    public override void Write(BinaryWriter file) => base.Write(file);

    //}
    //[REDMeta]
    //public class EEntityStaticFlags : CFlags
    //{
    //    public EEntityStaticFlags(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name) { }

    //    public override void Read(BinaryReader file, uint size) => base.Read(file, size);

    //    public override void Write(BinaryWriter file) => base.Write(file);

    //}
    //[REDMeta]
    //public class EDrawableFlags : CFlags
    //{
    //    public EDrawableFlags(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name) { }

    //    public override void Read(BinaryReader file, uint size) => base.Read(file, size);

    //    public override void Write(BinaryWriter file) => base.Write(file);

    //}
    //[REDMeta]
    //public class ETriggerChannel : CFlags
    //{
    //    public ETriggerChannel(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name) { }

    //    public override void Read(BinaryReader file, uint size) => base.Read(file, size);

    //    public override void Write(BinaryWriter file) => base.Write(file);

    //}
    //[REDMeta]
    //public class ELightChannel : CFlags
    //{
    //    public ELightChannel(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name) { }

    //    public override void Read(BinaryReader file, uint size) => base.Read(file, size);

    //    public override void Write(BinaryWriter file) => base.Write(file);

    //}
    //[REDMeta]
    //public class ELightUsageMask : CFlags
    //{
    //    public ELightUsageMask(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name) { }

    //    public override void Read(BinaryReader file, uint size) => base.Read(file, size);

    //    public override void Write(BinaryWriter file) => base.Write(file);

    //}
    //[REDMeta]
    //public class EDismembermentEffectTypeFlag : CFlags
    //{
    //    public EDismembermentEffectTypeFlag(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name) { }

    //}

    //[REDMeta]
    //public class EMeshChunkRenderMask : CFlags
    //{
    //    public EMeshChunkRenderMask(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name) { }

    //}
}